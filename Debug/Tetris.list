
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800201c  0800201c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800205c  0800205c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800205c  0800205c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800205c  0800205c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002070  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002070  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007007  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001690  00000000  00000000  0002703b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000680  00000000  00000000  00028e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001659c  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ffc  00000000  00000000  0003fa44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ba19  00000000  00000000  00046a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001834  00000000  00000000  000d24d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002004 	.word	0x08002004

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002004 	.word	0x08002004

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <printBuffer>:
#include "ascii.h"
#include <string.h>

uint8_t max_7219_buffer[MAX_DEVICES][8];

void printBuffer(void) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
	uint16_t data[MAX_DEVICES];
	for(uint8_t i=1;i<=8;i++){
 8000222:	230f      	movs	r3, #15
 8000224:	18fb      	adds	r3, r7, r3
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e030      	b.n	800028e <printBuffer+0x72>
		for(uint8_t j=0;j<MAX_DEVICES;j++){
 800022c:	230e      	movs	r3, #14
 800022e:	18fb      	adds	r3, r7, r3
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	e01c      	b.n	8000270 <printBuffer+0x54>
			data[j]=((uint16_t)(i<<8))|(max_7219_buffer[j][i-1]);
 8000236:	200f      	movs	r0, #15
 8000238:	183b      	adds	r3, r7, r0
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b29b      	uxth	r3, r3
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	b299      	uxth	r1, r3
 8000242:	240e      	movs	r4, #14
 8000244:	193b      	adds	r3, r7, r4
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	183b      	adds	r3, r7, r0
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <printBuffer+0x84>)
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	1882      	adds	r2, r0, r2
 8000254:	5cd3      	ldrb	r3, [r2, r3]
 8000256:	b29b      	uxth	r3, r3
 8000258:	193a      	adds	r2, r7, r4
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	430b      	orrs	r3, r1
 800025e:	b299      	uxth	r1, r3
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++){
 8000266:	193b      	adds	r3, r7, r4
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	193b      	adds	r3, r7, r4
 800026c:	3201      	adds	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	230e      	movs	r3, #14
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b03      	cmp	r3, #3
 8000278:	d9dd      	bls.n	8000236 <printBuffer+0x1a>
		}
		//max_send_data_r(data);
		max_send_data_spi_r(data);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f993 	bl	80005a8 <max_send_data_spi_r>
	for(uint8_t i=1;i<=8;i++){
 8000282:	210f      	movs	r1, #15
 8000284:	187b      	adds	r3, r7, r1
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	187b      	adds	r3, r7, r1
 800028a:	3201      	adds	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	230f      	movs	r3, #15
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b08      	cmp	r3, #8
 8000296:	d9c9      	bls.n	800022c <printBuffer+0x10>
	}
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b005      	add	sp, #20
 800029e:	bd90      	pop	{r4, r7, pc}
 80002a0:	2000002c 	.word	0x2000002c

080002a4 <updateBuffer>:

void updateBuffer(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	initBuffer();
 80002a8:	f000 f854 	bl	8000354 <initBuffer>
	max_7219_buffer[i][0]=0b11000000;
 80002ac:	4b27      	ldr	r3, [pc, #156]	; (800034c <updateBuffer+0xa8>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001a      	movs	r2, r3
 80002b2:	4b27      	ldr	r3, [pc, #156]	; (8000350 <updateBuffer+0xac>)
 80002b4:	00d2      	lsls	r2, r2, #3
 80002b6:	21c0      	movs	r1, #192	; 0xc0
 80002b8:	54d1      	strb	r1, [r2, r3]
	max_7219_buffer[i][1]=0b11000000;
 80002ba:	4b24      	ldr	r3, [pc, #144]	; (800034c <updateBuffer+0xa8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4a24      	ldr	r2, [pc, #144]	; (8000350 <updateBuffer+0xac>)
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	18d3      	adds	r3, r2, r3
 80002c4:	3301      	adds	r3, #1
 80002c6:	22c0      	movs	r2, #192	; 0xc0
 80002c8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][2]=0b11000000;
 80002ca:	4b20      	ldr	r3, [pc, #128]	; (800034c <updateBuffer+0xa8>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4a20      	ldr	r2, [pc, #128]	; (8000350 <updateBuffer+0xac>)
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	18d3      	adds	r3, r2, r3
 80002d4:	3302      	adds	r3, #2
 80002d6:	22c0      	movs	r2, #192	; 0xc0
 80002d8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][3]=0b11000000;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <updateBuffer+0xa8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <updateBuffer+0xac>)
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	18d3      	adds	r3, r2, r3
 80002e4:	3303      	adds	r3, #3
 80002e6:	22c0      	movs	r2, #192	; 0xc0
 80002e8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][4]=0b11000000;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <updateBuffer+0xa8>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <updateBuffer+0xac>)
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	18d3      	adds	r3, r2, r3
 80002f4:	3304      	adds	r3, #4
 80002f6:	22c0      	movs	r2, #192	; 0xc0
 80002f8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][5]=0b11000000;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <updateBuffer+0xa8>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <updateBuffer+0xac>)
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	18d3      	adds	r3, r2, r3
 8000304:	3305      	adds	r3, #5
 8000306:	22c0      	movs	r2, #192	; 0xc0
 8000308:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][6]=0b11111111;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <updateBuffer+0xa8>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <updateBuffer+0xac>)
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3306      	adds	r3, #6
 8000316:	22ff      	movs	r2, #255	; 0xff
 8000318:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][7]=0b11111111;
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <updateBuffer+0xa8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <updateBuffer+0xac>)
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3307      	adds	r3, #7
 8000326:	22ff      	movs	r2, #255	; 0xff
 8000328:	701a      	strb	r2, [r3, #0]
	i++;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <updateBuffer+0xa8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <updateBuffer+0xa8>)
 8000334:	701a      	strb	r2, [r3, #0]
	if(i==4)
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <updateBuffer+0xa8>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d102      	bne.n	8000344 <updateBuffer+0xa0>
		i=0;
 800033e:	4b03      	ldr	r3, [pc, #12]	; (800034c <updateBuffer+0xa8>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	20000028 	.word	0x20000028
 8000350:	2000002c 	.word	0x2000002c

08000354 <initBuffer>:

void initBuffer(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<MAX_DEVICES;i++) {
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	e01a      	b.n	8000398 <initBuffer+0x44>
		for(uint8_t j=0;j<8;j++){
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
 8000368:	e00d      	b.n	8000386 <initBuffer+0x32>
			max_7219_buffer[i][j]=0b00000000;
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	490e      	ldr	r1, [pc, #56]	; (80003ac <initBuffer+0x58>)
 8000374:	00d2      	lsls	r2, r2, #3
 8000376:	188a      	adds	r2, r1, r2
 8000378:	2100      	movs	r1, #0
 800037a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j=0;j<8;j++){
 800037c:	1dbb      	adds	r3, r7, #6
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	3201      	adds	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b07      	cmp	r3, #7
 800038c:	d9ed      	bls.n	800036a <initBuffer+0x16>
	for(uint8_t i=0;i<MAX_DEVICES;i++) {
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	3201      	adds	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d9e0      	bls.n	8000362 <initBuffer+0xe>
		}
	}
	printBuffer();
 80003a0:	f7ff ff3c 	bl	800021c <printBuffer>
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <main>:


void SystemClock_Config(void);

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  HAL_Init();
 80003b4:	f000 fad8 	bl	8000968 <HAL_Init>
  SystemClock_Config();
 80003b8:	f000 f80a 	bl	80003d0 <SystemClock_Config>
  max_init();
 80003bc:	f000 f856 	bl	800046c <max_init>
  while(1)
  {
	  updateBuffer();
 80003c0:	f7ff ff70 	bl	80002a4 <updateBuffer>
	  printBuffer();
 80003c4:	f7ff ff2a 	bl	800021c <printBuffer>
	  HAL_Delay(80);
 80003c8:	2050      	movs	r0, #80	; 0x50
 80003ca:	f000 fb51 	bl	8000a70 <HAL_Delay>
	  updateBuffer();
 80003ce:	e7f7      	b.n	80003c0 <main+0x10>

080003d0 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b093      	sub	sp, #76	; 0x4c
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2410      	movs	r4, #16
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2338      	movs	r3, #56	; 0x38
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f001 fe07 	bl	8001ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	003b      	movs	r3, r7
 80003e8:	0018      	movs	r0, r3
 80003ea:	2310      	movs	r3, #16
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f001 fe00 	bl	8001ff4 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 fda7 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fe:	193b      	adds	r3, r7, r4
 8000400:	2202      	movs	r2, #2
 8000402:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	193b      	adds	r3, r7, r4
 8000406:	2280      	movs	r2, #128	; 0x80
 8000408:	0052      	lsls	r2, r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2240      	movs	r2, #64	; 0x40
 8000416:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000418:	193b      	adds	r3, r7, r4
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	193b      	adds	r3, r7, r4
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fdd3 	bl	8000fcc <HAL_RCC_OscConfig>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800042a:	f000 f819 	bl	8000460 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	003b      	movs	r3, r7
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000434:	003b      	movs	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	003b      	movs	r3, r7
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f001 f8de 	bl	800160c <HAL_RCC_ClockConfig>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000454:	f000 f804 	bl	8000460 <Error_Handler>
  }
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b013      	add	sp, #76	; 0x4c
 800045e:	bd90      	pop	{r4, r7, pc}

08000460 <Error_Handler>:



void Error_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <max_init>:
#include "configs.h"
#include "shifter.h"
#include "max7219.h"


void max_init(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	uint16_t serialData[MAX_DEVICES];
	init_shifter();
 8000472:	f000 f8a9 	bl	80005c8 <init_shifter>
	for(uint8_t i=0;i<15;i++){
 8000476:	230f      	movs	r3, #15
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	e024      	b.n	80004ca <max_init+0x5e>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000480:	230e      	movs	r3, #14
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	e010      	b.n	80004ac <max_init+0x40>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x0000);
 800048a:	230f      	movs	r3, #15
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	200e      	movs	r0, #14
 8000494:	183a      	adds	r2, r7, r0
 8000496:	7812      	ldrb	r2, [r2, #0]
 8000498:	021b      	lsls	r3, r3, #8
 800049a:	b299      	uxth	r1, r3
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	0052      	lsls	r2, r2, #1
 80004a0:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80004a2:	183b      	adds	r3, r7, r0
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	3201      	adds	r2, #1
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	230e      	movs	r3, #14
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d9e9      	bls.n	800048a <max_init+0x1e>
		}
		//max_send_data(serialData);
		max_send_data_spi(serialData);
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 f865 	bl	8000588 <max_send_data_spi>
	for(uint8_t i=0;i<15;i++){
 80004be:	210f      	movs	r1, #15
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	781a      	ldrb	r2, [r3, #0]
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	3201      	adds	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	230f      	movs	r3, #15
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b0e      	cmp	r3, #14
 80004d2:	d9d5      	bls.n	8000480 <max_init+0x14>
	}

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80004d4:	230d      	movs	r3, #13
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	e00b      	b.n	80004f6 <max_init+0x8a>
				serialData[j]=0x0B07;
 80004de:	200d      	movs	r0, #13
 80004e0:	183b      	adds	r3, r7, r0
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	0052      	lsls	r2, r2, #1
 80004e8:	4916      	ldr	r1, [pc, #88]	; (8000544 <max_init+0xd8>)
 80004ea:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	3201      	adds	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	230d      	movs	r3, #13
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d9ee      	bls.n	80004de <max_init+0x72>
			}
	//max_send_data(serialData);
	max_send_data_spi(serialData);
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f840 	bl	8000588 <max_send_data_spi>

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000508:	230c      	movs	r3, #12
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e00b      	b.n	800052a <max_init+0xbe>
				serialData[j]=0x0C01;
 8000512:	200c      	movs	r0, #12
 8000514:	183b      	adds	r3, r7, r0
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	490a      	ldr	r1, [pc, #40]	; (8000548 <max_init+0xdc>)
 800051e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000520:	183b      	adds	r3, r7, r0
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	183b      	adds	r3, r7, r0
 8000526:	3201      	adds	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	230c      	movs	r3, #12
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9ee      	bls.n	8000512 <max_init+0xa6>
			}
	//max_send_data(serialData);
	max_send_data_spi(serialData);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	0018      	movs	r0, r3
 8000538:	f000 f826 	bl	8000588 <max_send_data_spi>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b004      	add	sp, #16
 8000542:	bd80      	pop	{r7, pc}
 8000544:	00000b07 	.word	0x00000b07
 8000548:	00000c01 	.word	0x00000c01

0800054c <max_load_low>:

void max_load_low(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	LOADR -> ODR &= ~LOADP;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <max_load_low+0x18>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <max_load_low+0x18>)
 8000556:	4904      	ldr	r1, [pc, #16]	; (8000568 <max_load_low+0x1c>)
 8000558:	400a      	ands	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	50000400 	.word	0x50000400
 8000568:	fffffbff 	.word	0xfffffbff

0800056c <max_load_high>:

void max_load_high(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	LOADR -> ODR |=  LOADP;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <max_load_high+0x18>)
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <max_load_high+0x18>)
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	00c9      	lsls	r1, r1, #3
 800057a:	430a      	orrs	r2, r1
 800057c:	615a      	str	r2, [r3, #20]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	50000400 	.word	0x50000400

08000588 <max_send_data_spi>:
	max_load_low();
	shiftout_r(data);
	max_load_high();
}

void max_send_data_spi(uint16_t data[]) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	max_load_low();
 8000590:	f7ff ffdc 	bl	800054c <max_load_low>
	shiftout_spi(data);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	0018      	movs	r0, r3
 8000598:	f000 f838 	bl	800060c <shiftout_spi>
	max_load_high();
 800059c:	f7ff ffe6 	bl	800056c <max_load_high>
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b002      	add	sp, #8
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <max_send_data_spi_r>:

void max_send_data_spi_r(uint16_t data[]) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	max_load_low();
 80005b0:	f7ff ffcc 	bl	800054c <max_load_low>
	shiftout_spi_r(data);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 f85c 	bl	8000674 <shiftout_spi_r>
	max_load_high();
 80005bc:	f7ff ffd6 	bl	800056c <max_load_high>
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <init_shifter>:
#include "shifter.h"

SPI_HandleTypeDef hspi1;
uint8_t temp;

void init_shifter(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80005cc:	f000 f886 	bl	80006dc <MX_GPIO_Init>
	DATAR -> ODR &= ~DATAP;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <init_shifter+0x38>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <init_shifter+0x38>)
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	438a      	bics	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
	CLKR  -> ODR &= ~CLKP;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <init_shifter+0x38>)
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <init_shifter+0x38>)
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <init_shifter+0x3c>)
 80005e4:	400a      	ands	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
	LOADR -> ODR &= ~LOADP;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <init_shifter+0x38>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <init_shifter+0x38>)
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <init_shifter+0x40>)
 80005f0:	400a      	ands	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
	MX_SPI1_Init();
 80005f4:	f000 f8b8 	bl	8000768 <MX_SPI1_Init>
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	50000400 	.word	0x50000400
 8000604:	ffff7fff 	.word	0xffff7fff
 8000608:	fffffbff 	.word	0xfffffbff

0800060c <shiftout_spi>:
    		}
        }
   }
}

void shiftout_spi(uint16_t data[]) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	for(int j=0;j<MAX_DEVICES;j++) {
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e020      	b.n	800065c <shiftout_spi+0x50>
		  temp=(uint8_t)(data[j]>>8);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	18d3      	adds	r3, r2, r3
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <shiftout_spi+0x60>)
 800062c:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1,&temp, 1, 100);
 800062e:	490f      	ldr	r1, [pc, #60]	; (800066c <shiftout_spi+0x60>)
 8000630:	480f      	ldr	r0, [pc, #60]	; (8000670 <shiftout_spi+0x64>)
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	f001 fa0d 	bl	8001a54 <HAL_SPI_Transmit>
		  temp=(uint8_t)(data[j]&0xFF);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <shiftout_spi+0x60>)
 8000648:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1,&temp, 1, 100);
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <shiftout_spi+0x60>)
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <shiftout_spi+0x64>)
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	f001 f9ff 	bl	8001a54 <HAL_SPI_Transmit>
	for(int j=0;j<MAX_DEVICES;j++) {
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b03      	cmp	r3, #3
 8000660:	dddb      	ble.n	800061a <shiftout_spi+0xe>
	}
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	2000004c 	.word	0x2000004c
 8000670:	20000050 	.word	0x20000050

08000674 <shiftout_spi_r>:

void shiftout_spi_r(uint16_t data[]) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	for(int j=MAX_DEVICES-1;j>=0;j--) {
 800067c:	2303      	movs	r3, #3
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e020      	b.n	80006c4 <shiftout_spi_r+0x50>
		  temp=(uint8_t)(data[j]>>8);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	18d3      	adds	r3, r2, r3
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <shiftout_spi_r+0x60>)
 8000694:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1,&temp, 1, 100);
 8000696:	490f      	ldr	r1, [pc, #60]	; (80006d4 <shiftout_spi_r+0x60>)
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <shiftout_spi_r+0x64>)
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	2201      	movs	r2, #1
 800069e:	f001 f9d9 	bl	8001a54 <HAL_SPI_Transmit>
		  temp=(uint8_t)(data[j]&0xFF);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	18d3      	adds	r3, r2, r3
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <shiftout_spi_r+0x60>)
 80006b0:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1,&temp, 1, 100);
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <shiftout_spi_r+0x60>)
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <shiftout_spi_r+0x64>)
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2201      	movs	r2, #1
 80006ba:	f001 f9cb 	bl	8001a54 <HAL_SPI_Transmit>
	for(int j=MAX_DEVICES-1;j>=0;j--) {
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dadb      	bge.n	8000682 <shiftout_spi_r+0xe>
	}
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b004      	add	sp, #16
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	2000004c 	.word	0x2000004c
 80006d8:	20000050 	.word	0x20000050

080006dc <MX_GPIO_Init>:




void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f001 fc81 	bl	8001ff4 <memset>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_GPIO_Init+0x80>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0x80>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_GPIO_Init+0x80>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_GPIO_Init+0x80>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_GPIO_Init+0x80>)
 8000710:	2102      	movs	r1, #2
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_GPIO_Init+0x80>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071a:	2202      	movs	r2, #2
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 8000722:	490f      	ldr	r1, [pc, #60]	; (8000760 <MX_GPIO_Init+0x84>)
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_GPIO_Init+0x88>)
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fbf1 	bl	8000f10 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_6;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <MX_GPIO_Init+0x84>)
 8000734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <MX_GPIO_Init+0x88>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 fa7a 	bl	8000c48 <HAL_GPIO_Init>

}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b009      	add	sp, #36	; 0x24
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	00008440 	.word	0x00008440
 8000764:	50000400 	.word	0x50000400

08000768 <MX_SPI1_Init>:


void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_SPI1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_SPI1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_SPI1_Init+0x74>)
 8000774:	2282      	movs	r2, #130	; 0x82
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_SPI1_Init+0x74>)
 8000782:	22e0      	movs	r2, #224	; 0xe0
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_SPI1_Init+0x74>)
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_SPI1_Init+0x74>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_SPI1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_SPI1_Init+0x74>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f8a9 	bl	8001920 <HAL_SPI_Init>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f7ff fe45 	bl	8000460 <Error_Handler>
  }

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000050 	.word	0x20000050
 80007e0:	40013000 	.word	0x40013000

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_MspInit+0x4c>)
 80007ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	641a      	str	r2, [r3, #64]	; 0x40
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x4c>)
 8000804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_MspInit+0x4c>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0549      	lsls	r1, r1, #21
 800080c:	430a      	orrs	r2, r1
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_MspInit+0x4c>)
 8000812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	055b      	lsls	r3, r3, #21
 8000818:	4013      	ands	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f946 	bl	8000ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	2314      	movs	r3, #20
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	0018      	movs	r0, r3
 8000842:	2314      	movs	r3, #20
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f001 fbd4 	bl	8001ff4 <memset>
  if(hspi->Instance==SPI1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <HAL_SPI_MspInit+0x8c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d130      	bne.n	80008b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0149      	lsls	r1, r1, #5
 8000860:	430a      	orrs	r2, r1
 8000862:	641a      	str	r2, [r3, #64]	; 0x40
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	015b      	lsls	r3, r3, #5
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_SPI_MspInit+0x90>)
 8000880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800088a:	2114      	movs	r1, #20
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2206      	movs	r2, #6
 8000890:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2202      	movs	r2, #2
 8000896:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	187a      	adds	r2, r7, r1
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f9c8 	bl	8000c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b00a      	add	sp, #40	; 0x28
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013000 	.word	0x40013000
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8a4 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <SystemInit+0x14>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0512      	lsls	r2, r2, #20
 8000906:	609a      	str	r2, [r3, #8]
#endif
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000916:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000918:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800091a:	e003      	b.n	8000924 <LoopCopyDataInit>

0800091c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800091e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000920:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000922:	3104      	adds	r1, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopForever+0xa>)
  ldr r3, =_edata
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <LoopForever+0xe>)
  adds r2, r0, r1
 8000928:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800092a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800092c:	d3f6      	bcc.n	800091c <CopyDataInit>
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopForever+0x12>)
  b LoopFillZerobss
 8000930:	e002      	b.n	8000938 <LoopFillZerobss>

08000932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  str  r3, [r2]
 8000934:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000936:	3204      	adds	r2, #4

08000938 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <LoopForever+0x16>)
  cmp r2, r3
 800093a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800093c:	d3f9      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093e:	f7ff ffdd 	bl	80008fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000942:	f001 fb33 	bl	8001fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fd33 	bl	80003b0 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   r0, =_estack
 800094c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000950:	08002064 	.word	0x08002064
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000960:	200000b8 	.word	0x200000b8

08000964 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_COMP_IRQHandler>
	...

08000968 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_Init+0x3c>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_Init+0x3c>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0049      	lsls	r1, r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f810 	bl	80009a8 <HAL_InitTick>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d003      	beq.n	8000994 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e001      	b.n	8000998 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff ff26 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_InitTick+0x88>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d02b      	beq.n	8000a18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_InitTick+0x8c>)
 80009c2:	681c      	ldr	r4, [r3, #0]
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_InitTick+0x88>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0019      	movs	r1, r3
 80009ca:	23fa      	movs	r3, #250	; 0xfa
 80009cc:	0098      	lsls	r0, r3, #2
 80009ce:	f7ff fb99 	bl	8000104 <__udivsi3>
 80009d2:	0003      	movs	r3, r0
 80009d4:	0019      	movs	r1, r3
 80009d6:	0020      	movs	r0, r4
 80009d8:	f7ff fb94 	bl	8000104 <__udivsi3>
 80009dc:	0003      	movs	r3, r0
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f925 	bl	8000c2e <HAL_SYSTICK_Config>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d112      	bne.n	8000a0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80a      	bhi.n	8000a04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f904 	bl	8000c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_InitTick+0x90>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e00d      	b.n	8000a20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a04:	230f      	movs	r3, #15
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e008      	b.n	8000a20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e003      	b.n	8000a20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	781b      	ldrb	r3, [r3, #0]
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b005      	add	sp, #20
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_IncTick+0x18>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	18d2      	adds	r2, r2, r3
 8000a4a:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_IncTick+0x18>)
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000b4 	.word	0x200000b4
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	200000b4 	.word	0x200000b4

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff fff0 	bl	8000a5c <HAL_GetTick>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	3301      	adds	r3, #1
 8000a88:	d004      	beq.n	8000a94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_Delay+0x40>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	f7ff ffe1 	bl	8000a5c <HAL_GetTick>
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d8f7      	bhi.n	8000a96 <HAL_Delay+0x26>
  {
  }
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	fffff9ff 	.word	0xfffff9ff

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b7f      	cmp	r3, #127	; 0x7f
 8000af4:	d828      	bhi.n	8000b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	33c0      	adds	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	589b      	ldr	r3, [r3, r2]
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	400a      	ands	r2, r1
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	21ff      	movs	r1, #255	; 0xff
 8000b14:	4091      	lsls	r1, r2
 8000b16:	000a      	movs	r2, r1
 8000b18:	43d2      	mvns	r2, r2
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	401a      	ands	r2, r3
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4003      	ands	r3, r0
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <__NVIC_SetPriority+0xd4>)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	33c0      	adds	r3, #192	; 0xc0
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b46:	e031      	b.n	8000bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	400b      	ands	r3, r1
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	3306      	adds	r3, #6
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	3304      	adds	r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	0011      	movs	r1, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	21ff      	movs	r1, #255	; 0xff
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	401a      	ands	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	2303      	movs	r3, #3
 8000b8a:	4003      	ands	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001c      	movs	r4, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	4023      	ands	r3, r4
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	18c3      	adds	r3, r0, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <SysTick_Config+0x40>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d901      	bls.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e010      	b.n	8000bf4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <SysTick_Config+0x44>)
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	3a01      	subs	r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	2103      	movs	r1, #3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff7d 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SysTick_Config+0x44>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SysTick_Config+0x44>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	00ffffff 	.word	0x00ffffff
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	210f      	movs	r1, #15
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff ffbf 	bl	8000bbc <SysTick_Config>
 8000c3e:	0003      	movs	r3, r0
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e147      	b.n	8000ee8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <HAL_GPIO_Init+0x28>
 8000c6e:	e138      	b.n	8000ee2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x38>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	58d3      	ldr	r3, [r2, r3]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2207      	movs	r2, #7
 8000c92:	4013      	ands	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2107      	movs	r1, #7
 8000cac:	400b      	ands	r3, r1
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	409a      	lsls	r2, r3
 8000cee:	0013      	movs	r3, r2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00b      	beq.n	8000d1c <HAL_GPIO_Init+0xd4>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	2b11      	cmp	r3, #17
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	2201      	movs	r2, #1
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	055b      	lsls	r3, r3, #21
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x174>
 8000dba:	e092      	b.n	8000ee2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dbc:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	589b      	ldr	r3, [r3, r2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x1ca>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_GPIO_Init+0x2bc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x1c6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_GPIO_Init+0x2c0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x1c2>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <HAL_GPIO_Init+0x2c4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x1be>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x1cc>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e004      	b.n	8000e14 <HAL_GPIO_Init+0x1cc>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x1cc>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x1cc>
 8000e12:	2300      	movs	r3, #0
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	2103      	movs	r1, #3
 8000e18:	400a      	ands	r2, r1
 8000e1a:	00d2      	lsls	r2, r2, #3
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e24:	4936      	ldr	r1, [pc, #216]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3318      	adds	r3, #24
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e32:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	58d3      	ldr	r3, [r2, r3]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e58:	4929      	ldr	r1, [pc, #164]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e62:	2384      	movs	r3, #132	; 0x84
 8000e64:	58d3      	ldr	r3, [r2, r3]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	029b      	lsls	r3, r3, #10
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e86:	491e      	ldr	r1, [pc, #120]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e88:	2284      	movs	r2, #132	; 0x84
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	035b      	lsls	r3, r3, #13
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	039b      	lsls	r3, r3, #14
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_GPIO_Init+0x2b8>)
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	40da      	lsrs	r2, r3
 8000ef0:	1e13      	subs	r3, r2, #0
 8000ef2:	d000      	beq.n	8000ef6 <HAL_GPIO_Init+0x2ae>
 8000ef4:	e6b0      	b.n	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b006      	add	sp, #24
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	40021800 	.word	0x40021800
 8000f04:	50000400 	.word	0x50000400
 8000f08:	50000800 	.word	0x50000800
 8000f0c:	50000c00 	.word	0x50000c00

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	0008      	movs	r0, r1
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	1cbb      	adds	r3, r7, #2
 8000f1e:	1c02      	adds	r2, r0, #0
 8000f20:	801a      	strh	r2, [r3, #0]
 8000f22:	1c7b      	adds	r3, r7, #1
 8000f24:	1c0a      	adds	r2, r1, #0
 8000f26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f28:	1c7b      	adds	r3, r7, #1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	881a      	ldrh	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e003      	b.n	8000f42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	1cbb      	adds	r3, r7, #2
 8000f3c:	881a      	ldrh	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d11f      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	0013      	movs	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	189b      	adds	r3, r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4912      	ldr	r1, [pc, #72]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8c0 	bl	8000104 <__udivsi3>
 8000f84:	0003      	movs	r3, r0
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f8a:	e008      	b.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e001      	b.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e009      	b.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d0ed      	beq.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	fffff9ff 	.word	0xfffff9ff
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	000f4240 	.word	0x000f4240

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e304      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0x1e>
 8000fe8:	e07c      	b.n	80010e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fea:	4bc3      	ldr	r3, [pc, #780]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2238      	movs	r2, #56	; 0x38
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff4:	4bc0      	ldr	r3, [pc, #768]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b10      	cmp	r3, #16
 8001002:	d102      	bne.n	800100a <HAL_RCC_OscConfig+0x3e>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d002      	beq.n	8001010 <HAL_RCC_OscConfig+0x44>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b08      	cmp	r3, #8
 800100e:	d10b      	bne.n	8001028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	4bb9      	ldr	r3, [pc, #740]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	d062      	beq.n	80010e2 <HAL_RCC_OscConfig+0x116>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d15e      	bne.n	80010e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e2df      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	429a      	cmp	r2, r3
 8001032:	d107      	bne.n	8001044 <HAL_RCC_OscConfig+0x78>
 8001034:	4bb0      	ldr	r3, [pc, #704]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4baf      	ldr	r3, [pc, #700]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e020      	b.n	8001086 <HAL_RCC_OscConfig+0xba>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	02db      	lsls	r3, r3, #11
 800104c:	429a      	cmp	r2, r3
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0xa2>
 8001050:	4ba9      	ldr	r3, [pc, #676]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4ba8      	ldr	r3, [pc, #672]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	02c9      	lsls	r1, r1, #11
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	4ba6      	ldr	r3, [pc, #664]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4ba5      	ldr	r3, [pc, #660]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0249      	lsls	r1, r1, #9
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0xba>
 800106e:	4ba2      	ldr	r3, [pc, #648]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4ba1      	ldr	r3, [pc, #644]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001074:	49a1      	ldr	r1, [pc, #644]	; (80012fc <HAL_RCC_OscConfig+0x330>)
 8001076:	400a      	ands	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4b9f      	ldr	r3, [pc, #636]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001080:	499f      	ldr	r1, [pc, #636]	; (8001300 <HAL_RCC_OscConfig+0x334>)
 8001082:	400a      	ands	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d014      	beq.n	80010b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fce5 	bl	8000a5c <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fce0 	bl	8000a5c <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e29e      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010aa:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	029b      	lsls	r3, r3, #10
 80010b2:	4013      	ands	r3, r2
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0xcc>
 80010b6:	e015      	b.n	80010e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcd0 	bl	8000a5c <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fccb 	bl	8000a5c <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e289      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010d4:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0xf6>
 80010e0:	e000      	b.n	80010e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_RCC_OscConfig+0x124>
 80010ee:	e099      	b.n	8001224 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f0:	4b81      	ldr	r3, [pc, #516]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2238      	movs	r2, #56	; 0x38
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010fa:	4b7f      	ldr	r3, [pc, #508]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2203      	movs	r2, #3
 8001100:	4013      	ands	r3, r2
 8001102:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b10      	cmp	r3, #16
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x144>
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d002      	beq.n	8001116 <HAL_RCC_OscConfig+0x14a>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d135      	bne.n	8001182 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001116:	4b78      	ldr	r3, [pc, #480]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4013      	ands	r3, r2
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x162>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e25c      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b72      	ldr	r3, [pc, #456]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a74      	ldr	r2, [pc, #464]	; (8001304 <HAL_RCC_OscConfig+0x338>)
 8001134:	4013      	ands	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	021a      	lsls	r2, r3, #8
 800113e:	4b6e      	ldr	r3, [pc, #440]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800114a:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x33c>)
 8001150:	4013      	ands	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800115e:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0adb      	lsrs	r3, r3, #11
 8001164:	2207      	movs	r2, #7
 8001166:	4013      	ands	r3, r2
 8001168:	4a68      	ldr	r2, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x340>)
 800116a:	40da      	lsrs	r2, r3
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <HAL_RCC_OscConfig+0x344>)
 800116e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_OscConfig+0x348>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fc17 	bl	80009a8 <HAL_InitTick>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d051      	beq.n	8001222 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e232      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d030      	beq.n	80011ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5e      	ldr	r2, [pc, #376]	; (8001308 <HAL_RCC_OscConfig+0x33c>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0049      	lsls	r1, r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc56 	bl	8000a5c <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc51 	bl	8000a5c <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e20f      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_RCC_OscConfig+0x338>)
 80011da:	4013      	ands	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	021a      	lsls	r2, r3, #8
 80011e4:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	e01b      	b.n	8001224 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	4949      	ldr	r1, [pc, #292]	; (8001318 <HAL_RCC_OscConfig+0x34c>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc30 	bl	8000a5c <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fc2b 	bl	8000a5c <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1e9      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4013      	ands	r3, r2
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x236>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001222:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2208      	movs	r2, #8
 800122a:	4013      	ands	r3, r2
 800122c:	d047      	beq.n	80012be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	4013      	ands	r3, r2
 8001236:	2b18      	cmp	r3, #24
 8001238:	d10a      	bne.n	8001250 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d03c      	beq.n	80012be <HAL_RCC_OscConfig+0x2f2>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d138      	bne.n	80012be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e1cb      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d019      	beq.n	800128c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800125a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fbfa 	bl	8000a5c <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126e:	f7ff fbf5 	bl	8000a5c <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1b3      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d0f1      	beq.n	800126e <HAL_RCC_OscConfig+0x2a2>
 800128a:	e018      	b.n	80012be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 800128e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001292:	2101      	movs	r1, #1
 8001294:	438a      	bics	r2, r1
 8001296:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fbe0 	bl	8000a5c <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff fbdb 	bl	8000a5c <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e199      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	2202      	movs	r2, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1f1      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0x2fe>
 80012c8:	e0c6      	b.n	8001458 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ca:	231f      	movs	r3, #31
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2238      	movs	r2, #56	; 0x38
 80012d8:	4013      	ands	r3, r2
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d11e      	bne.n	800131c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x31e>
 80012e8:	e0b6      	b.n	8001458 <HAL_RCC_OscConfig+0x48c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d000      	beq.n	80012f4 <HAL_RCC_OscConfig+0x328>
 80012f2:	e0b1      	b.n	8001458 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e177      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	fffeffff 	.word	0xfffeffff
 8001300:	fffbffff 	.word	0xfffbffff
 8001304:	ffff80ff 	.word	0xffff80ff
 8001308:	ffffc7ff 	.word	0xffffc7ff
 800130c:	00f42400 	.word	0x00f42400
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004
 8001318:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800131c:	4bb4      	ldr	r3, [pc, #720]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800131e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	055b      	lsls	r3, r3, #21
 8001324:	4013      	ands	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_RCC_OscConfig+0x360>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x362>
 800132c:	2300      	movs	r3, #0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4baf      	ldr	r3, [pc, #700]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001336:	4bae      	ldr	r3, [pc, #696]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0549      	lsls	r1, r1, #21
 800133c:	430a      	orrs	r2, r1
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001340:	4bab      	ldr	r3, [pc, #684]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	055b      	lsls	r3, r3, #21
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800134e:	231f      	movs	r3, #31
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001356:	4ba7      	ldr	r3, [pc, #668]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4013      	ands	r3, r2
 8001360:	d11a      	bne.n	8001398 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001362:	4ba4      	ldr	r3, [pc, #656]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4ba3      	ldr	r3, [pc, #652]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0049      	lsls	r1, r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001370:	f7ff fb74 	bl	8000a5c <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fb6f 	bl	8000a5c <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e12d      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138c:	4b99      	ldr	r3, [pc, #612]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x3e2>
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	430a      	orrs	r2, r1
 80013aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x41c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x404>
 80013b6:	4b8e      	ldr	r3, [pc, #568]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013ba:	4b8d      	ldr	r3, [pc, #564]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013bc:	2104      	movs	r1, #4
 80013be:	430a      	orrs	r2, r1
 80013c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013c6:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x41c>
 80013d0:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013d4:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	438a      	bics	r2, r1
 80013da:	65da      	str	r2, [r3, #92]	; 0x5c
 80013dc:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013e0:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80013e2:	2104      	movs	r1, #4
 80013e4:	438a      	bics	r2, r1
 80013e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d014      	beq.n	800141a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb34 	bl	8000a5c <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f8:	e009      	b.n	800140e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fb2f 	bl	8000a5c <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a7c      	ldr	r2, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x62c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0ec      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800140e:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x42e>
 8001418:	e013      	b.n	8001442 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fb1f 	bl	8000a5c <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001422:	e009      	b.n	8001438 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb1a 	bl	8000a5c <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4a72      	ldr	r2, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x62c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0d7      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001442:	231f      	movs	r3, #31
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800144e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001450:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x630>)
 8001454:	400a      	ands	r2, r1
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d100      	bne.n	8001462 <HAL_RCC_OscConfig+0x496>
 8001460:	e0c1      	b.n	80015e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2238      	movs	r2, #56	; 0x38
 8001468:	4013      	ands	r3, r2
 800146a:	2b10      	cmp	r3, #16
 800146c:	d100      	bne.n	8001470 <HAL_RCC_OscConfig+0x4a4>
 800146e:	e081      	b.n	8001574 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d156      	bne.n	8001526 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800147e:	4960      	ldr	r1, [pc, #384]	; (8001600 <HAL_RCC_OscConfig+0x634>)
 8001480:	400a      	ands	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff faea 	bl	8000a5c <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fae5 	bl	8000a5c <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0a3      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	049b      	lsls	r3, r3, #18
 80014a8:	4013      	ands	r3, r2
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_RCC_OscConfig+0x638>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	431a      	orrs	r2, r3
 80014da:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0449      	lsls	r1, r1, #17
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0549      	lsls	r1, r1, #21
 80014f8:	430a      	orrs	r2, r1
 80014fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff faae 	bl	8000a5c <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff faa9 	bl	8000a5c <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e067      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	049b      	lsls	r3, r3, #18
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x53a>
 8001524:	e05f      	b.n	80015e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 800152c:	4934      	ldr	r1, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x634>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001538:	2103      	movs	r1, #3
 800153a:	438a      	bics	r2, r1
 800153c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001544:	4930      	ldr	r1, [pc, #192]	; (8001608 <HAL_RCC_OscConfig+0x63c>)
 8001546:	400a      	ands	r2, r1
 8001548:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fa87 	bl	8000a5c <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fa82 	bl	8000a5c <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	049b      	lsls	r3, r3, #18
 800156e:	4013      	ands	r3, r2
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x588>
 8001572:	e038      	b.n	80015e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e033      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x624>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2203      	movs	r2, #3
 800158a:	401a      	ands	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d126      	bne.n	80015e2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2270      	movs	r2, #112	; 0x70
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d11f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	23fe      	movs	r3, #254	; 0xfe
 80015a6:	01db      	lsls	r3, r3, #7
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	23f8      	movs	r3, #248	; 0xf8
 80015b8:	039b      	lsls	r3, r3, #14
 80015ba:	401a      	ands	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10e      	bne.n	80015e2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	23e0      	movs	r3, #224	; 0xe0
 80015c8:	051b      	lsls	r3, r3, #20
 80015ca:	401a      	ands	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	0f5b      	lsrs	r3, r3, #29
 80015d8:	075a      	lsls	r2, r3, #29
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b008      	add	sp, #32
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	00001388 	.word	0x00001388
 80015fc:	efffffff 	.word	0xefffffff
 8001600:	feffffff 	.word	0xfeffffff
 8001604:	11c1808c 	.word	0x11c1808c
 8001608:	eefeffff 	.word	0xeefeffff

0800160c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0e9      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001620:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2207      	movs	r2, #7
 8001626:	4013      	ands	r3, r2
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d91e      	bls.n	800166c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2207      	movs	r2, #7
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	4b70      	ldr	r3, [pc, #448]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa0c 	bl	8000a5c <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001648:	e009      	b.n	800165e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7ff fa07 	bl	8000a5c <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_RCC_ClockConfig+0x1f4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0ca      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165e:	4b67      	ldr	r3, [pc, #412]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2207      	movs	r2, #7
 8001664:	4013      	ands	r3, r2
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d015      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2204      	movs	r2, #4
 800167c:	4013      	ands	r3, r2
 800167e:	d006      	beq.n	800168e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001680:	4b60      	ldr	r3, [pc, #384]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 8001686:	21e0      	movs	r1, #224	; 0xe0
 8001688:	01c9      	lsls	r1, r1, #7
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_RCC_ClockConfig+0x1fc>)
 8001694:	4013      	ands	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	d057      	beq.n	800175c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d12b      	bne.n	8001718 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e097      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049b      	lsls	r3, r3, #18
 80016d4:	4013      	ands	r3, r2
 80016d6:	d11f      	bne.n	8001718 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e08b      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4013      	ands	r3, r2
 80016ee:	d113      	bne.n	8001718 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e07f      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d106      	bne.n	800170a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	2202      	movs	r2, #2
 8001702:	4013      	ands	r3, r2
 8001704:	d108      	bne.n	8001718 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e074      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e06d      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2207      	movs	r2, #7
 800171e:	4393      	bics	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800172c:	f7ff f996 	bl	8000a5c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f991 	bl	8000a5c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_RCC_ClockConfig+0x1f4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e054      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2238      	movs	r2, #56	; 0x38
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	429a      	cmp	r2, r3
 800175a:	d1ec      	bne.n	8001736 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2207      	movs	r2, #7
 8001762:	4013      	ands	r3, r2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d21e      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2207      	movs	r2, #7
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800177c:	f7ff f96e 	bl	8000a5c <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001784:	e009      	b.n	800179a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f969 	bl	8000a5c <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x1f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e02c      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2207      	movs	r2, #7
 80017a0:	4013      	ands	r3, r2
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1ee      	bne.n	8001786 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4013      	ands	r3, r2
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <HAL_RCC_ClockConfig+0x200>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017c6:	f000 f829 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017ca:	0001      	movs	r1, r0
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	220f      	movs	r2, #15
 80017d4:	401a      	ands	r2, r3
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x204>)
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	58d3      	ldr	r3, [r2, r3]
 80017dc:	221f      	movs	r2, #31
 80017de:	4013      	ands	r3, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x208>)
 80017e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_ClockConfig+0x20c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff f8db 	bl	80009a8 <HAL_InitTick>
 80017f2:	0003      	movs	r3, r0
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	00001388 	.word	0x00001388
 8001804:	40021000 	.word	0x40021000
 8001808:	fffff0ff 	.word	0xfffff0ff
 800180c:	ffff8fff 	.word	0xffff8fff
 8001810:	0800201c 	.word	0x0800201c
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2238      	movs	r2, #56	; 0x38
 8001828:	4013      	ands	r3, r2
 800182a:	d10f      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0adb      	lsrs	r3, r3, #11
 8001832:	2207      	movs	r2, #7
 8001834:	4013      	ands	r3, r2
 8001836:	2201      	movs	r2, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	0013      	movs	r3, r2
 800183c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	4835      	ldr	r0, [pc, #212]	; (8001918 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001842:	f7fe fc5f 	bl	8000104 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e05d      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2238      	movs	r2, #56	; 0x38
 8001852:	4013      	ands	r3, r2
 8001854:	2b08      	cmp	r3, #8
 8001856:	d102      	bne.n	800185e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_RCC_GetSysClockFreq+0x100>)
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e054      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2238      	movs	r2, #56	; 0x38
 8001864:	4013      	ands	r3, r2
 8001866:	2b10      	cmp	r3, #16
 8001868:	d138      	bne.n	80018dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d10d      	bne.n	80018a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	4824      	ldr	r0, [pc, #144]	; (800191c <HAL_RCC_GetSysClockFreq+0x100>)
 800188c:	f7fe fc3a 	bl	8000104 <__udivsi3>
 8001890:	0003      	movs	r3, r0
 8001892:	0019      	movs	r1, r3
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	227f      	movs	r2, #127	; 0x7f
 800189c:	4013      	ands	r3, r2
 800189e:	434b      	muls	r3, r1
 80018a0:	617b      	str	r3, [r7, #20]
        break;
 80018a2:	e00d      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	481c      	ldr	r0, [pc, #112]	; (8001918 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018a8:	f7fe fc2c 	bl	8000104 <__udivsi3>
 80018ac:	0003      	movs	r3, r0
 80018ae:	0019      	movs	r1, r3
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	227f      	movs	r2, #127	; 0x7f
 80018b8:	4013      	ands	r3, r2
 80018ba:	434b      	muls	r3, r1
 80018bc:	617b      	str	r3, [r7, #20]
        break;
 80018be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0f5b      	lsrs	r3, r3, #29
 80018c6:	2207      	movs	r2, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	6978      	ldr	r0, [r7, #20]
 80018d2:	f7fe fc17 	bl	8000104 <__udivsi3>
 80018d6:	0003      	movs	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e015      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2238      	movs	r2, #56	; 0x38
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d103      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2238      	movs	r2, #56	; 0x38
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	d103      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018fc:	23fa      	movs	r3, #250	; 0xfa
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e001      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001908:	693b      	ldr	r3, [r7, #16]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b006      	add	sp, #24
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200

08001920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e08a      	b.n	8001a48 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	225d      	movs	r2, #93	; 0x5d
 800193c:	5c9b      	ldrb	r3, [r3, r2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	225c      	movs	r2, #92	; 0x5c
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f7fe ff70 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	225d      	movs	r2, #93	; 0x5d
 8001958:	2102      	movs	r1, #2
 800195a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2140      	movs	r1, #64	; 0x40
 8001968:	438a      	bics	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	23e0      	movs	r3, #224	; 0xe0
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	429a      	cmp	r2, r3
 8001976:	d902      	bls.n	800197e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e002      	b.n	8001984 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	015b      	lsls	r3, r3, #5
 8001982:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	23f0      	movs	r3, #240	; 0xf0
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	429a      	cmp	r2, r3
 800198e:	d008      	beq.n	80019a2 <HAL_SPI_Init+0x82>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	23e0      	movs	r3, #224	; 0xe0
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	429a      	cmp	r2, r3
 800199a:	d002      	beq.n	80019a2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	23e0      	movs	r3, #224	; 0xe0
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d903      	bls.n	80019be <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
 80019bc:	e002      	b.n	80019c4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6999      	ldr	r1, [r3, #24]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	400b      	ands	r3, r1
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	0011      	movs	r1, r2
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	2204      	movs	r2, #4
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4907      	ldr	r1, [pc, #28]	; (8001a50 <HAL_SPI_Init+0x130>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	225d      	movs	r2, #93	; 0x5d
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	fffff7ff 	.word	0xfffff7ff

08001a54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	1dbb      	adds	r3, r7, #6
 8001a62:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a64:	231f      	movs	r3, #31
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	225c      	movs	r2, #92	; 0x5c
 8001a70:	5c9b      	ldrb	r3, [r3, r2]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_SPI_Transmit+0x26>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e169      	b.n	8001d4e <HAL_SPI_Transmit+0x2fa>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	225c      	movs	r2, #92	; 0x5c
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a82:	f7fe ffeb 	bl	8000a5c <HAL_GetTick>
 8001a86:	0003      	movs	r3, r0
 8001a88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a8a:	2316      	movs	r3, #22
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	1dba      	adds	r2, r7, #6
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	225d      	movs	r2, #93	; 0x5d
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d004      	beq.n	8001aaa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001aa0:	231f      	movs	r3, #31
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001aa8:	e146      	b.n	8001d38 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_SPI_Transmit+0x64>
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d104      	bne.n	8001ac2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ab8:	231f      	movs	r3, #31
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ac0:	e13a      	b.n	8001d38 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	225d      	movs	r2, #93	; 0x5d
 8001ac6:	2103      	movs	r1, #3
 8001ac8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1dba      	adds	r2, r7, #6
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1dba      	adds	r2, r7, #6
 8001ae2:	8812      	ldrh	r2, [r2, #0]
 8001ae4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2244      	movs	r2, #68	; 0x44
 8001af0:	2100      	movs	r1, #0
 8001af2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2246      	movs	r2, #70	; 0x46
 8001af8:	2100      	movs	r1, #0
 8001afa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d108      	bne.n	8001b26 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	01c9      	lsls	r1, r1, #7
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d007      	beq.n	8001b44 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	23e0      	movs	r3, #224	; 0xe0
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d94e      	bls.n	8001bee <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <HAL_SPI_Transmit+0x10e>
 8001b58:	2316      	movs	r3, #22
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d13f      	bne.n	8001be2 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	1c9a      	adds	r2, r3, #2
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b86:	e02c      	b.n	8001be2 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d112      	bne.n	8001bbc <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	1c9a      	adds	r2, r3, #2
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bba:	e012      	b.n	8001be2 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bbc:	f7fe ff4e 	bl	8000a5c <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d802      	bhi.n	8001bd2 <HAL_SPI_Transmit+0x17e>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_SPI_Transmit+0x184>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8001bd8:	231f      	movs	r3, #31
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2203      	movs	r2, #3
 8001bde:	701a      	strb	r2, [r3, #0]
          goto error;
 8001be0:	e0aa      	b.n	8001d38 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1cd      	bne.n	8001b88 <HAL_SPI_Transmit+0x134>
 8001bec:	e080      	b.n	8001cf0 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_SPI_Transmit+0x1ae>
 8001bf6:	2316      	movs	r3, #22
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d000      	beq.n	8001c02 <HAL_SPI_Transmit+0x1ae>
 8001c00:	e071      	b.n	8001ce6 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d912      	bls.n	8001c32 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c9a      	adds	r2, r3, #2
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b02      	subs	r3, #2
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c30:	e059      	b.n	8001ce6 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	330c      	adds	r3, #12
 8001c3c:	7812      	ldrb	r2, [r2, #0]
 8001c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c58:	e045      	b.n	8001ce6 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d12b      	bne.n	8001cc0 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d912      	bls.n	8001c98 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	1c9a      	adds	r2, r3, #2
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b02      	subs	r3, #2
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c96:	e026      	b.n	8001ce6 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	330c      	adds	r3, #12
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cbe:	e012      	b.n	8001ce6 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cc0:	f7fe fecc 	bl	8000a5c <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d802      	bhi.n	8001cd6 <HAL_SPI_Transmit+0x282>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_SPI_Transmit+0x288>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ce4:	e028      	b.n	8001d38 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1b4      	bne.n	8001c5a <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 f912 	bl	8001f20 <SPI_EndRxTxTransaction>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e000      	b.n	8001d38 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8001d36:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	225d      	movs	r2, #93	; 0x5d
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	225c      	movs	r2, #92	; 0x5c
 8001d44:	2100      	movs	r1, #0
 8001d46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d48:	231f      	movs	r3, #31
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b008      	add	sp, #32
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d68:	e050      	b.n	8001e0c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	d04d      	beq.n	8001e0c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d70:	f7fe fe74 	bl	8000a5c <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d902      	bls.n	8001d86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d142      	bne.n	8001e0c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	21e0      	movs	r1, #224	; 0xe0
 8001d92:	438a      	bics	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2382      	movs	r3, #130	; 0x82
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d113      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0x72>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d005      	beq.n	8001dba <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d107      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	438a      	bics	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d110      	bne.n	8001df8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4914      	ldr	r1, [pc, #80]	; (8001e34 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8001de2:	400a      	ands	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0189      	lsls	r1, r1, #6
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	225d      	movs	r2, #93	; 0x5d
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	225c      	movs	r2, #92	; 0x5c
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e00f      	b.n	8001e2c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	425a      	negs	r2, r3
 8001e1c:	4153      	adcs	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	001a      	movs	r2, r3
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d19f      	bne.n	8001d6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	ffffdfff 	.word	0xffffdfff

08001e38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e46:	e05c      	b.n	8001f02 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	23c0      	movs	r3, #192	; 0xc0
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <SPI_WaitFifoStateUntilTimeout+0x28>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	d04d      	beq.n	8001f02 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e66:	f7fe fdf9 	bl	8000a5c <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d902      	bls.n	8001e7c <SPI_WaitFifoStateUntilTimeout+0x44>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d142      	bne.n	8001f02 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	21e0      	movs	r1, #224	; 0xe0
 8001e88:	438a      	bics	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2382      	movs	r3, #130	; 0x82
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d113      	bne.n	8001ec0 <SPI_WaitFifoStateUntilTimeout+0x88>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d005      	beq.n	8001eb0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	019b      	lsls	r3, r3, #6
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d110      	bne.n	8001eee <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4911      	ldr	r1, [pc, #68]	; (8001f1c <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0189      	lsls	r1, r1, #6
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	225d      	movs	r2, #93	; 0x5d
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	225c      	movs	r2, #92	; 0x5c
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e008      	b.n	8001f14 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d19a      	bne.n	8001e48 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	ffffdfff 	.word	0xffffdfff

08001f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	0159      	lsls	r1, r3, #5
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	0013      	movs	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f7ff ff7c 	bl	8001e38 <SPI_WaitFifoStateUntilTimeout>
 8001f40:	1e03      	subs	r3, r0, #0
 8001f42:	d007      	beq.n	8001f54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e027      	b.n	8001fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	f7ff fef9 	bl	8001d58 <SPI_WaitFlagStateUntilTimeout>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d007      	beq.n	8001f7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	2220      	movs	r2, #32
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e014      	b.n	8001fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	23c0      	movs	r3, #192	; 0xc0
 8001f7e:	00d9      	lsls	r1, r3, #3
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	0013      	movs	r3, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f7ff ff55 	bl	8001e38 <SPI_WaitFifoStateUntilTimeout>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d007      	beq.n	8001fa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f96:	2220      	movs	r2, #32
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e000      	b.n	8001fa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}

08001fac <__libc_init_array>:
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	2600      	movs	r6, #0
 8001fb0:	4d0c      	ldr	r5, [pc, #48]	; (8001fe4 <__libc_init_array+0x38>)
 8001fb2:	4c0d      	ldr	r4, [pc, #52]	; (8001fe8 <__libc_init_array+0x3c>)
 8001fb4:	1b64      	subs	r4, r4, r5
 8001fb6:	10a4      	asrs	r4, r4, #2
 8001fb8:	42a6      	cmp	r6, r4
 8001fba:	d109      	bne.n	8001fd0 <__libc_init_array+0x24>
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	f000 f821 	bl	8002004 <_init>
 8001fc2:	4d0a      	ldr	r5, [pc, #40]	; (8001fec <__libc_init_array+0x40>)
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	; (8001ff0 <__libc_init_array+0x44>)
 8001fc6:	1b64      	subs	r4, r4, r5
 8001fc8:	10a4      	asrs	r4, r4, #2
 8001fca:	42a6      	cmp	r6, r4
 8001fcc:	d105      	bne.n	8001fda <__libc_init_array+0x2e>
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	00b3      	lsls	r3, r6, #2
 8001fd2:	58eb      	ldr	r3, [r5, r3]
 8001fd4:	4798      	blx	r3
 8001fd6:	3601      	adds	r6, #1
 8001fd8:	e7ee      	b.n	8001fb8 <__libc_init_array+0xc>
 8001fda:	00b3      	lsls	r3, r6, #2
 8001fdc:	58eb      	ldr	r3, [r5, r3]
 8001fde:	4798      	blx	r3
 8001fe0:	3601      	adds	r6, #1
 8001fe2:	e7f2      	b.n	8001fca <__libc_init_array+0x1e>
 8001fe4:	0800205c 	.word	0x0800205c
 8001fe8:	0800205c 	.word	0x0800205c
 8001fec:	0800205c 	.word	0x0800205c
 8001ff0:	08002060 	.word	0x08002060

08001ff4 <memset>:
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	1812      	adds	r2, r2, r0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <memset+0xa>
 8001ffc:	4770      	bx	lr
 8001ffe:	7019      	strb	r1, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	e7f9      	b.n	8001ff8 <memset+0x4>

08002004 <_init>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200a:	bc08      	pop	{r3}
 800200c:	469e      	mov	lr, r3
 800200e:	4770      	bx	lr

08002010 <_fini>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr
