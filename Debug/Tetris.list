
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012dc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013d8  080013d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080013d8  080013d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013d8  080013d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080013e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  080013ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080013ec  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000354b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d57  00000000  00000000  0002357f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000438  00000000  00000000  000242d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c0  00000000  00000000  00024710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000c62  00000000  00000000  00024ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000039bd  00000000  00000000  00025732  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087fd2  00000000  00000000  000290ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b10c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da4  00000000  00000000  000b113c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001380 	.word	0x08001380

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001380 	.word	0x08001380

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <clear_buff>:
  {
	  asm( "NOP" );
  }
}

void clear_buff(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_DEVICES*8;i++)
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e007      	b.n	8000238 <clear_buff+0x1c>
		buff[i]=0x0000;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <clear_buff+0x2c>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	0052      	lsls	r2, r2, #1
 800022e:	2100      	movs	r1, #0
 8000230:	52d1      	strh	r1, [r2, r3]
	for(int i=0;i<MAX_DEVICES*8;i++)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b07      	cmp	r3, #7
 800023c:	ddf4      	ble.n	8000228 <clear_buff+0xc>
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b002      	add	sp, #8
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000028 	.word	0x20000028

0800024c <spi_w16>:
void spi_w16( SPI_TypeDef *SPIx, uint16_t dat[] ) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	e010      	b.n	800027e <spi_w16+0x32>
	  while ( !( SPIx->SR & SPI_SR_TXE ) ) {};
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	2202      	movs	r2, #2
 8000264:	4013      	ands	r3, r2
 8000266:	d0fa      	beq.n	800025e <spi_w16+0x12>
	   *( uint16_t* )&( SPIx->DR ) = dat[i];
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	18d2      	adds	r2, r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	330c      	adds	r3, #12
 8000274:	8812      	ldrh	r2, [r2, #0]
 8000276:	801a      	strh	r2, [r3, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3301      	adds	r3, #1
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2b00      	cmp	r3, #0
 8000282:	ddeb      	ble.n	800025c <spi_w16+0x10>
  }

}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b004      	add	sp, #16
 800028a:	bd80      	pop	{r7, pc}

0800028c <init_max>:

void init_max(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	uint16_t serialData[MAX_DEVICES];
	for(uint8_t i=0;i<15;i++){
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e021      	b.n	80002de <init_max+0x52>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 800029a:	1dbb      	adds	r3, r7, #6
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e00e      	b.n	80002c0 <init_max+0x34>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x0000);
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	1dba      	adds	r2, r7, #6
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	b299      	uxth	r1, r3
 80002b0:	003b      	movs	r3, r7
 80002b2:	0052      	lsls	r2, r2, #1
 80002b4:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80002b6:	1dbb      	adds	r3, r7, #6
 80002b8:	781a      	ldrb	r2, [r3, #0]
 80002ba:	1dbb      	adds	r3, r7, #6
 80002bc:	3201      	adds	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	1dbb      	adds	r3, r7, #6
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0ec      	beq.n	80002a2 <init_max+0x16>
		}
		spi_w16(SPI1,serialData);
 80002c8:	003b      	movs	r3, r7
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <init_max+0xc8>)
 80002cc:	0019      	movs	r1, r3
 80002ce:	0010      	movs	r0, r2
 80002d0:	f7ff ffbc 	bl	800024c <spi_w16>
	for(uint8_t i=0;i<15;i++){
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	781a      	ldrb	r2, [r3, #0]
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	3201      	adds	r2, #1
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b0e      	cmp	r3, #14
 80002e4:	d9d9      	bls.n	800029a <init_max+0xe>
	}

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80002e6:	1d7b      	adds	r3, r7, #5
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	e00a      	b.n	8000304 <init_max+0x78>
				serialData[j]=0x0B07;
 80002ee:	1d7b      	adds	r3, r7, #5
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	003b      	movs	r3, r7
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	4918      	ldr	r1, [pc, #96]	; (8000358 <init_max+0xcc>)
 80002f8:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80002fa:	1d7b      	adds	r3, r7, #5
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	1d7b      	adds	r3, r7, #5
 8000300:	3201      	adds	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
 8000304:	1d7b      	adds	r3, r7, #5
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f0      	beq.n	80002ee <init_max+0x62>
			}
	spi_w16(SPI1,serialData);
 800030c:	003b      	movs	r3, r7
 800030e:	4a11      	ldr	r2, [pc, #68]	; (8000354 <init_max+0xc8>)
 8000310:	0019      	movs	r1, r3
 8000312:	0010      	movs	r0, r2
 8000314:	f7ff ff9a 	bl	800024c <spi_w16>

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
 800031e:	e00a      	b.n	8000336 <init_max+0xaa>
				serialData[j]=0x0C01;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	003b      	movs	r3, r7
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	490c      	ldr	r1, [pc, #48]	; (800035c <init_max+0xd0>)
 800032a:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	781a      	ldrb	r2, [r3, #0]
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	3201      	adds	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f0      	beq.n	8000320 <init_max+0x94>
			}
	spi_w16(SPI1,serialData);
 800033e:	003b      	movs	r3, r7
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <init_max+0xc8>)
 8000342:	0019      	movs	r1, r3
 8000344:	0010      	movs	r0, r2
 8000346:	f7ff ff81 	bl	800024c <spi_w16>
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40013000 	.word	0x40013000
 8000358:	00000b07 	.word	0x00000b07
 800035c:	00000c01 	.word	0x00000c01

08000360 <main>:

int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  HAL_Init();
 8000364:	f000 f996 	bl	8000694 <HAL_Init>
  SystemClock_Config();
 8000368:	f000 f8f2 	bl	8000550 <SystemClock_Config>

  //GPIOA configs

  RCC->IOPENR    |= RCC_IOPENR_GPIOAEN;
 800036c:	4b66      	ldr	r3, [pc, #408]	; (8000508 <main+0x1a8>)
 800036e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000370:	4b65      	ldr	r3, [pc, #404]	; (8000508 <main+0x1a8>)
 8000372:	2101      	movs	r1, #1
 8000374:	430a      	orrs	r2, r1
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->AHBENR    |= RCC_AHBENR_DMA1EN;
 8000378:	4b63      	ldr	r3, [pc, #396]	; (8000508 <main+0x1a8>)
 800037a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800037c:	4b62      	ldr	r3, [pc, #392]	; (8000508 <main+0x1a8>)
 800037e:	2101      	movs	r1, #1
 8000380:	430a      	orrs	r2, r1
 8000382:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->APBENR2   |= RCC_APBENR2_SPI1EN;
 8000384:	4b60      	ldr	r3, [pc, #384]	; (8000508 <main+0x1a8>)
 8000386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000388:	4b5f      	ldr	r3, [pc, #380]	; (8000508 <main+0x1a8>)
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	0149      	lsls	r1, r1, #5
 800038e:	430a      	orrs	r2, r1
 8000390:	641a      	str	r2, [r3, #64]	; 0x40
  GPIOA->MODER   &= ~(0x3<<(1*2) | 0x3<<(2*2) | 0x3<<(4*2));
 8000392:	23a0      	movs	r3, #160	; 0xa0
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	23a0      	movs	r3, #160	; 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	495b      	ldr	r1, [pc, #364]	; (800050c <main+0x1ac>)
 800039e:	400a      	ands	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]
  GPIOA->MODER   |= (0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2));
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	23a0      	movs	r3, #160	; 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	218a      	movs	r1, #138	; 0x8a
 80003ae:	0089      	lsls	r1, r1, #2
 80003b0:	430a      	orrs	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
  GPIOA->OTYPER  &= ~((0x1<<1) | (0x1<<2) | (0x1<<4));
 80003b4:	23a0      	movs	r3, #160	; 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	23a0      	movs	r3, #160	; 0xa0
 80003bc:	05db      	lsls	r3, r3, #23
 80003be:	2116      	movs	r1, #22
 80003c0:	438a      	bics	r2, r1
 80003c2:	605a      	str	r2, [r3, #4]
  GPIOA->OSPEEDR &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2));
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	4950      	ldr	r1, [pc, #320]	; (8000510 <main+0x1b0>)
 80003d0:	400a      	ands	r2, r1
 80003d2:	609a      	str	r2, [r3, #8]
  GPIOA->PUPDR   &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2));
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	23a0      	movs	r3, #160	; 0xa0
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	494c      	ldr	r1, [pc, #304]	; (8000510 <main+0x1b0>)
 80003e0:	400a      	ands	r2, r1
 80003e2:	60da      	str	r2, [r3, #12]
  GPIOA->AFR[0]  &= ~(0xff<<(1*4) | 0xff<<(2*4) | 0xff<<(4*4));
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	6a1a      	ldr	r2, [r3, #32]
 80003ea:	23a0      	movs	r3, #160	; 0xa0
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	4949      	ldr	r1, [pc, #292]	; (8000514 <main+0x1b4>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	621a      	str	r2, [r3, #32]

  //DMA configs

  DMA1_Channel1->CCR &= ~( DMA_CCR_MEM2MEM |
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <main+0x1b8>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b47      	ldr	r3, [pc, #284]	; (8000518 <main+0x1b8>)
 80003fa:	4948      	ldr	r1, [pc, #288]	; (800051c <main+0x1bc>)
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
                           DMA_CCR_PL |
                           DMA_CCR_MSIZE |
                           DMA_CCR_PSIZE |
                           DMA_CCR_PINC |
                           DMA_CCR_EN );
  DMA1_Channel1->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <main+0x1b8>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b44      	ldr	r3, [pc, #272]	; (8000518 <main+0x1b8>)
 8000406:	4946      	ldr	r1, [pc, #280]	; (8000520 <main+0x1c0>)
 8000408:	430a      	orrs	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
                           DMA_CCR_MINC |
                           DMA_CCR_CIRC |
                           DMA_CCR_DIR );


  DMAMUX1_Channel0->CCR &= ~( DMAMUX_CxCR_DMAREQ_ID );
 800040c:	4b45      	ldr	r3, [pc, #276]	; (8000524 <main+0x1c4>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <main+0x1c4>)
 8000412:	21ff      	movs	r1, #255	; 0xff
 8000414:	438a      	bics	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
  DMAMUX1_Channel0->CCR |=  ( 17 << DMAMUX_CxCR_DMAREQ_ID_Pos );
 8000418:	4b42      	ldr	r3, [pc, #264]	; (8000524 <main+0x1c4>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <main+0x1c4>)
 800041e:	2111      	movs	r1, #17
 8000420:	430a      	orrs	r2, r1
 8000422:	601a      	str	r2, [r3, #0]

  DMA1_Channel1->CMAR  = ( uint32_t )&buff;
 8000424:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <main+0x1b8>)
 8000426:	4a40      	ldr	r2, [pc, #256]	; (8000528 <main+0x1c8>)
 8000428:	60da      	str	r2, [r3, #12]
  DMA1_Channel1->CPAR  = ( uint32_t )&(SPI1->DR);
 800042a:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <main+0x1b8>)
 800042c:	4a3f      	ldr	r2, [pc, #252]	; (800052c <main+0x1cc>)
 800042e:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CNDTR = ( uint16_t )(MAX_DEVICES*8);
 8000430:	4b39      	ldr	r3, [pc, #228]	; (8000518 <main+0x1b8>)
 8000432:	2208      	movs	r2, #8
 8000434:	605a      	str	r2, [r3, #4]

  //SPI configs
  SPI1->CR1 |=  ( SPI_CR1_MSTR | (1<<SPI_CR1_BIDIOE_Pos) );
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <main+0x1d0>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <main+0x1d0>)
 800043c:	493d      	ldr	r1, [pc, #244]	; (8000534 <main+0x1d4>)
 800043e:	430a      	orrs	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
  SPI1->CR2 &= ~( SPI_CR2_DS );
 8000442:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <main+0x1d0>)
 8000444:	685a      	ldr	r2, [r3, #4]
 8000446:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <main+0x1d0>)
 8000448:	493b      	ldr	r1, [pc, #236]	; (8000538 <main+0x1d8>)
 800044a:	400a      	ands	r2, r1
 800044c:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |=  ( 0xf << SPI_CR2_DS_Pos | SPI_CR2_TXDMAEN | 1<<SPI_CR2_NSSP_Pos | 1<<SPI_CR2_SSOE_Pos );
 800044e:	4b38      	ldr	r3, [pc, #224]	; (8000530 <main+0x1d0>)
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	4b37      	ldr	r3, [pc, #220]	; (8000530 <main+0x1d0>)
 8000454:	4939      	ldr	r1, [pc, #228]	; (800053c <main+0x1dc>)
 8000456:	430a      	orrs	r2, r1
 8000458:	605a      	str	r2, [r3, #4]



  SPI1->CR1 |=  ( SPI_CR1_SPE );
 800045a:	4b35      	ldr	r3, [pc, #212]	; (8000530 <main+0x1d0>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b34      	ldr	r3, [pc, #208]	; (8000530 <main+0x1d0>)
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	430a      	orrs	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
  init_max();
 8000466:	f7ff ff11 	bl	800028c <init_max>
  //spi_w16(SPI1,0x03AA);




    clear_buff();
 800046a:	f7ff fed7 	bl	800021c <clear_buff>

    DMA1_Channel1->CCR |= ( DMA_CCR_EN );
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <main+0x1b8>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	4b29      	ldr	r3, [pc, #164]	; (8000518 <main+0x1b8>)
 8000474:	2101      	movs	r1, #1
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
while(1) {
    buff[0]=0x0100;
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <main+0x1c8>)
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	0052      	lsls	r2, r2, #1
 8000480:	801a      	strh	r2, [r3, #0]
    buff[1]=0x02ff;
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <main+0x1c8>)
 8000484:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <main+0x1e0>)
 8000486:	805a      	strh	r2, [r3, #2]
    buff[2]=0x0300;
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <main+0x1c8>)
 800048a:	22c0      	movs	r2, #192	; 0xc0
 800048c:	0092      	lsls	r2, r2, #2
 800048e:	809a      	strh	r2, [r3, #4]
    buff[3]=0x0400;
 8000490:	4b25      	ldr	r3, [pc, #148]	; (8000528 <main+0x1c8>)
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	00d2      	lsls	r2, r2, #3
 8000496:	80da      	strh	r2, [r3, #6]
    buff[4]=0x0500;
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <main+0x1c8>)
 800049a:	22a0      	movs	r2, #160	; 0xa0
 800049c:	00d2      	lsls	r2, r2, #3
 800049e:	811a      	strh	r2, [r3, #8]
    buff[5]=0x0600;
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <main+0x1c8>)
 80004a2:	22c0      	movs	r2, #192	; 0xc0
 80004a4:	00d2      	lsls	r2, r2, #3
 80004a6:	815a      	strh	r2, [r3, #10]
    buff[6]=0x07ff;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <main+0x1c8>)
 80004aa:	4a26      	ldr	r2, [pc, #152]	; (8000544 <main+0x1e4>)
 80004ac:	819a      	strh	r2, [r3, #12]
    buff[7]=0x0800;
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <main+0x1c8>)
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	0112      	lsls	r2, r2, #4
 80004b4:	81da      	strh	r2, [r3, #14]

    HAL_Delay(100);
 80004b6:	2064      	movs	r0, #100	; 0x64
 80004b8:	f000 f976 	bl	80007a8 <HAL_Delay>
    clear_buff();
 80004bc:	f7ff feae 	bl	800021c <clear_buff>

    buff[0]=0x01ff;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <main+0x1c8>)
 80004c2:	4a21      	ldr	r2, [pc, #132]	; (8000548 <main+0x1e8>)
 80004c4:	801a      	strh	r2, [r3, #0]
    buff[1]=0x0200;
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <main+0x1c8>)
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	805a      	strh	r2, [r3, #2]
    buff[2]=0x0300;
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <main+0x1c8>)
 80004d0:	22c0      	movs	r2, #192	; 0xc0
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	809a      	strh	r2, [r3, #4]
    buff[3]=0x0400;
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <main+0x1c8>)
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	00d2      	lsls	r2, r2, #3
 80004dc:	80da      	strh	r2, [r3, #6]
    buff[4]=0x0500;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <main+0x1c8>)
 80004e0:	22a0      	movs	r2, #160	; 0xa0
 80004e2:	00d2      	lsls	r2, r2, #3
 80004e4:	811a      	strh	r2, [r3, #8]
    buff[5]=0x0600;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <main+0x1c8>)
 80004e8:	22c0      	movs	r2, #192	; 0xc0
 80004ea:	00d2      	lsls	r2, r2, #3
 80004ec:	815a      	strh	r2, [r3, #10]
    buff[6]=0x0700;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <main+0x1c8>)
 80004f0:	22e0      	movs	r2, #224	; 0xe0
 80004f2:	00d2      	lsls	r2, r2, #3
 80004f4:	819a      	strh	r2, [r3, #12]
    buff[7]=0x08ff;
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x1c8>)
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <main+0x1ec>)
 80004fa:	81da      	strh	r2, [r3, #14]

    HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 f953 	bl	80007a8 <HAL_Delay>
    clear_buff();
 8000502:	f7ff fe8b 	bl	800021c <clear_buff>
    buff[0]=0x0100;
 8000506:	e7b8      	b.n	800047a <main+0x11a>
 8000508:	40021000 	.word	0x40021000
 800050c:	fffffcc3 	.word	0xfffffcc3
 8000510:	fffffdd7 	.word	0xfffffdd7
 8000514:	ff00000f 	.word	0xff00000f
 8000518:	40020008 	.word	0x40020008
 800051c:	ffff80be 	.word	0xffff80be
 8000520:	000025b0 	.word	0x000025b0
 8000524:	40020800 	.word	0x40020800
 8000528:	20000028 	.word	0x20000028
 800052c:	4001300c 	.word	0x4001300c
 8000530:	40013000 	.word	0x40013000
 8000534:	00004004 	.word	0x00004004
 8000538:	fffff0ff 	.word	0xfffff0ff
 800053c:	00000f0e 	.word	0x00000f0e
 8000540:	000002ff 	.word	0x000002ff
 8000544:	000007ff 	.word	0x000007ff
 8000548:	000001ff 	.word	0x000001ff
 800054c:	000008ff 	.word	0x000008ff

08000550 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b093      	sub	sp, #76	; 0x4c
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	2410      	movs	r4, #16
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2338      	movs	r3, #56	; 0x38
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f000 ff05 	bl	8001370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	2310      	movs	r3, #16
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f000 fefe 	bl	8001370 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f9eb 	bl	8000954 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2202      	movs	r2, #2
 8000582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2240      	movs	r2, #64	; 0x40
 8000596:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fa17 	bl	80009d4 <HAL_RCC_OscConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005aa:	f000 f819 	bl	80005e0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	003b      	movs	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	003b      	movs	r3, r7
 80005c8:	2100      	movs	r1, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fd22 	bl	8001014 <HAL_RCC_ClockConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005d4:	f000 f804 	bl	80005e0 <Error_Handler>
  }
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b013      	add	sp, #76	; 0x4c
 80005de:	bd90      	pop	{r4, r7, pc}

080005e0 <Error_Handler>:



void Error_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <HardFault_Handler+0x4>

080005fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f8af 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <SystemInit+0x14>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0512      	lsls	r2, r2, #20
 8000632:	609a      	str	r2, [r3, #8]
#endif
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000642:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000644:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000646:	e003      	b.n	8000650 <LoopCopyDataInit>

08000648 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800064a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800064c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800064e:	3104      	adds	r1, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <LoopForever+0xa>)
  ldr r3, =_edata
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <LoopForever+0xe>)
  adds r2, r0, r1
 8000654:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000658:	d3f6      	bcc.n	8000648 <CopyDataInit>
  ldr r2, =_sbss
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <LoopForever+0x12>)
  b LoopFillZerobss
 800065c:	e002      	b.n	8000664 <LoopFillZerobss>

0800065e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000660:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000662:	3204      	adds	r2, #4

08000664 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <LoopForever+0x16>)
  cmp r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000668:	d3f9      	bcc.n	800065e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800066a:	f7ff ffdd 	bl	8000628 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800066e:	f000 fe5b 	bl	8001328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fe75 	bl	8000360 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   r0, =_estack
 8000678:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800067c:	080013e0 	.word	0x080013e0
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000684:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000688:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800068c:	2000003c 	.word	0x2000003c

08000690 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_COMP_IRQHandler>
	...

08000694 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_Init+0x3c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_Init+0x3c>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	0049      	lsls	r1, r1, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ae:	2003      	movs	r0, #3
 80006b0:	f000 f816 	bl	80006e0 <HAL_InitTick>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d003      	beq.n	80006c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	e001      	b.n	80006c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f000 f808 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40022000 	.word	0x40022000

080006d4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006e8:	230f      	movs	r3, #15
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_InitTick+0x88>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d02b      	beq.n	8000750 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <HAL_InitTick+0x8c>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_InitTick+0x88>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	0019      	movs	r1, r3
 8000702:	23fa      	movs	r3, #250	; 0xfa
 8000704:	0098      	lsls	r0, r3, #2
 8000706:	f7ff fcfd 	bl	8000104 <__udivsi3>
 800070a:	0003      	movs	r3, r0
 800070c:	0019      	movs	r1, r3
 800070e:	0020      	movs	r0, r4
 8000710:	f7ff fcf8 	bl	8000104 <__udivsi3>
 8000714:	0003      	movs	r3, r0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f90f 	bl	800093a <HAL_SYSTICK_Config>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d112      	bne.n	8000746 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d80a      	bhi.n	800073c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2301      	movs	r3, #1
 800072a:	425b      	negs	r3, r3
 800072c:	2200      	movs	r2, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f8ee 	bl	8000910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_InitTick+0x90>)
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e00d      	b.n	8000758 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800073c:	230f      	movs	r3, #15
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e008      	b.n	8000758 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000746:	230f      	movs	r3, #15
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e003      	b.n	8000758 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000758:	230f      	movs	r3, #15
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b005      	add	sp, #20
 8000764:	bd90      	pop	{r4, r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000008 	.word	0x20000008
 800076c:	20000000 	.word	0x20000000
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_IncTick+0x18>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <HAL_IncTick+0x1c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	18d2      	adds	r2, r2, r3
 8000782:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_IncTick+0x18>)
 8000784:	601a      	str	r2, [r3, #0]
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000038 	.word	0x20000038
 8000790:	20000008 	.word	0x20000008

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000038 	.word	0x20000038

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	0003      	movs	r3, r0
 80007b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	d004      	beq.n	80007cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_Delay+0x40>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	f7ff ffe1 	bl	8000794 <HAL_GetTick>
 80007d2:	0002      	movs	r2, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d8f7      	bhi.n	80007ce <HAL_Delay+0x26>
  {
  }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b004      	add	sp, #16
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000800:	d828      	bhi.n	8000854 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <__NVIC_SetPriority+0xd4>)
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b25b      	sxtb	r3, r3
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	33c0      	adds	r3, #192	; 0xc0
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	589b      	ldr	r3, [r3, r2]
 8000812:	1dfa      	adds	r2, r7, #7
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	0011      	movs	r1, r2
 8000818:	2203      	movs	r2, #3
 800081a:	400a      	ands	r2, r1
 800081c:	00d2      	lsls	r2, r2, #3
 800081e:	21ff      	movs	r1, #255	; 0xff
 8000820:	4091      	lsls	r1, r2
 8000822:	000a      	movs	r2, r1
 8000824:	43d2      	mvns	r2, r2
 8000826:	401a      	ands	r2, r3
 8000828:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	401a      	ands	r2, r3
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	0018      	movs	r0, r3
 8000838:	2303      	movs	r3, #3
 800083a:	4003      	ands	r3, r0
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	481f      	ldr	r0, [pc, #124]	; (80008c0 <__NVIC_SetPriority+0xd4>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	089b      	lsrs	r3, r3, #2
 800084a:	430a      	orrs	r2, r1
 800084c:	33c0      	adds	r3, #192	; 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000852:	e031      	b.n	80008b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <__NVIC_SetPriority+0xd8>)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	0019      	movs	r1, r3
 800085c:	230f      	movs	r3, #15
 800085e:	400b      	ands	r3, r1
 8000860:	3b08      	subs	r3, #8
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	3306      	adds	r3, #6
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	18d3      	adds	r3, r2, r3
 800086a:	3304      	adds	r3, #4
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <__NVIC_SetPriority+0xd8>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	001c      	movs	r4, r3
 80008a4:	230f      	movs	r3, #15
 80008a6:	4023      	ands	r3, r4
 80008a8:	3b08      	subs	r3, #8
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	430a      	orrs	r2, r1
 80008ae:	3306      	adds	r3, #6
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	18c3      	adds	r3, r0, r3
 80008b4:	3304      	adds	r3, #4
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b003      	add	sp, #12
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <SysTick_Config+0x40>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d901      	bls.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e010      	b.n	8000900 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <SysTick_Config+0x44>)
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	3a01      	subs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	2301      	movs	r3, #1
 80008e8:	425b      	negs	r3, r3
 80008ea:	2103      	movs	r1, #3
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff7d 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <SysTick_Config+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x44>)
 80008fa:	2207      	movs	r2, #7
 80008fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fe:	2300      	movs	r3, #0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}
 8000908:	00ffffff 	.word	0x00ffffff
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	210f      	movs	r1, #15
 800091c:	187b      	adds	r3, r7, r1
 800091e:	1c02      	adds	r2, r0, #0
 8000920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25b      	sxtb	r3, r3
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ff5d 	bl	80007ec <__NVIC_SetPriority>
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	b004      	add	sp, #16
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff ffbf 	bl	80008c8 <SysTick_Config>
 800094a:	0003      	movs	r3, r0
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000962:	4013      	ands	r3, r2
 8000964:	0019      	movs	r1, r3
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	429a      	cmp	r2, r3
 8000976:	d11f      	bne.n	80009b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	0013      	movs	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	189b      	adds	r3, r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4912      	ldr	r1, [pc, #72]	; (80009d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fbbc 	bl	8000104 <__udivsi3>
 800098c:	0003      	movs	r3, r0
 800098e:	3301      	adds	r3, #1
 8000990:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000992:	e008      	b.n	80009a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3b01      	subs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e001      	b.n	80009a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80009a2:	2303      	movs	r3, #3
 80009a4:	e009      	b.n	80009ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	401a      	ands	r2, r3
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d0ed      	beq.n	8000994 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40007000 	.word	0x40007000
 80009c8:	fffff9ff 	.word	0xfffff9ff
 80009cc:	20000000 	.word	0x20000000
 80009d0:	000f4240 	.word	0x000f4240

080009d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e304      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	d100      	bne.n	80009f2 <HAL_RCC_OscConfig+0x1e>
 80009f0:	e07c      	b.n	8000aec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009f2:	4bc3      	ldr	r3, [pc, #780]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2238      	movs	r2, #56	; 0x38
 80009f8:	4013      	ands	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009fc:	4bc0      	ldr	r3, [pc, #768]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	2b10      	cmp	r3, #16
 8000a0a:	d102      	bne.n	8000a12 <HAL_RCC_OscConfig+0x3e>
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d002      	beq.n	8000a18 <HAL_RCC_OscConfig+0x44>
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d10b      	bne.n	8000a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a18:	4bb9      	ldr	r3, [pc, #740]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	d062      	beq.n	8000aea <HAL_RCC_OscConfig+0x116>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d15e      	bne.n	8000aea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e2df      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	025b      	lsls	r3, r3, #9
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d107      	bne.n	8000a4c <HAL_RCC_OscConfig+0x78>
 8000a3c:	4bb0      	ldr	r3, [pc, #704]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4baf      	ldr	r3, [pc, #700]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	0249      	lsls	r1, r1, #9
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e020      	b.n	8000a8e <HAL_RCC_OscConfig+0xba>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	02db      	lsls	r3, r3, #11
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d10e      	bne.n	8000a76 <HAL_RCC_OscConfig+0xa2>
 8000a58:	4ba9      	ldr	r3, [pc, #676]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4ba8      	ldr	r3, [pc, #672]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	02c9      	lsls	r1, r1, #11
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	4ba6      	ldr	r3, [pc, #664]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4ba5      	ldr	r3, [pc, #660]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0249      	lsls	r1, r1, #9
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	e00b      	b.n	8000a8e <HAL_RCC_OscConfig+0xba>
 8000a76:	4ba2      	ldr	r3, [pc, #648]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4ba1      	ldr	r3, [pc, #644]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a7c:	49a1      	ldr	r1, [pc, #644]	; (8000d04 <HAL_RCC_OscConfig+0x330>)
 8000a7e:	400a      	ands	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	4b9f      	ldr	r3, [pc, #636]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b9e      	ldr	r3, [pc, #632]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000a88:	499f      	ldr	r1, [pc, #636]	; (8000d08 <HAL_RCC_OscConfig+0x334>)
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d014      	beq.n	8000ac0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a96:	f7ff fe7d 	bl	8000794 <HAL_GetTick>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aa0:	f7ff fe78 	bl	8000794 <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b64      	cmp	r3, #100	; 0x64
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e29e      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ab2:	4b93      	ldr	r3, [pc, #588]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	029b      	lsls	r3, r3, #10
 8000aba:	4013      	ands	r3, r2
 8000abc:	d0f0      	beq.n	8000aa0 <HAL_RCC_OscConfig+0xcc>
 8000abe:	e015      	b.n	8000aec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fe68 	bl	8000794 <HAL_GetTick>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ac8:	e008      	b.n	8000adc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fe63 	bl	8000794 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b64      	cmp	r3, #100	; 0x64
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e289      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000adc:	4b88      	ldr	r3, [pc, #544]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d1f0      	bne.n	8000aca <HAL_RCC_OscConfig+0xf6>
 8000ae8:	e000      	b.n	8000aec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2202      	movs	r2, #2
 8000af2:	4013      	ands	r3, r2
 8000af4:	d100      	bne.n	8000af8 <HAL_RCC_OscConfig+0x124>
 8000af6:	e099      	b.n	8000c2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000af8:	4b81      	ldr	r3, [pc, #516]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	2238      	movs	r2, #56	; 0x38
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b02:	4b7f      	ldr	r3, [pc, #508]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2b10      	cmp	r3, #16
 8000b10:	d102      	bne.n	8000b18 <HAL_RCC_OscConfig+0x144>
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d002      	beq.n	8000b1e <HAL_RCC_OscConfig+0x14a>
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d135      	bne.n	8000b8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b1e:	4b78      	ldr	r3, [pc, #480]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	4013      	ands	r3, r2
 8000b28:	d005      	beq.n	8000b36 <HAL_RCC_OscConfig+0x162>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e25c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b36:	4b72      	ldr	r3, [pc, #456]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a74      	ldr	r2, [pc, #464]	; (8000d0c <HAL_RCC_OscConfig+0x338>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	0019      	movs	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	021a      	lsls	r2, r3, #8
 8000b46:	4b6e      	ldr	r3, [pc, #440]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d112      	bne.n	8000b78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b52:	4b6b      	ldr	r3, [pc, #428]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a6e      	ldr	r2, [pc, #440]	; (8000d10 <HAL_RCC_OscConfig+0x33c>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	4b67      	ldr	r3, [pc, #412]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000b66:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	0adb      	lsrs	r3, r3, #11
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	4013      	ands	r3, r2
 8000b70:	4a68      	ldr	r2, [pc, #416]	; (8000d14 <HAL_RCC_OscConfig+0x340>)
 8000b72:	40da      	lsrs	r2, r3
 8000b74:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x344>)
 8000b76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000b78:	4b68      	ldr	r3, [pc, #416]	; (8000d1c <HAL_RCC_OscConfig+0x348>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fdaf 	bl	80006e0 <HAL_InitTick>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d051      	beq.n	8000c2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e232      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d030      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000b92:	4b5b      	ldr	r3, [pc, #364]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <HAL_RCC_OscConfig+0x33c>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	4b57      	ldr	r3, [pc, #348]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ba6:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fdee 	bl	8000794 <HAL_GetTick>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bbe:	f7ff fde9 	bl	8000794 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e20f      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bd0:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d0f0      	beq.n	8000bbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bdc:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <HAL_RCC_OscConfig+0x338>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	0019      	movs	r1, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	021a      	lsls	r2, r3, #8
 8000bec:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	e01b      	b.n	8000c2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000bf4:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000bfa:	4949      	ldr	r1, [pc, #292]	; (8000d20 <HAL_RCC_OscConfig+0x34c>)
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c00:	f7ff fdc8 	bl	8000794 <HAL_GetTick>
 8000c04:	0003      	movs	r3, r0
 8000c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c08:	e008      	b.n	8000c1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fdc3 	bl	8000794 <HAL_GetTick>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e1e9      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c1c:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4013      	ands	r3, r2
 8000c26:	d1f0      	bne.n	8000c0a <HAL_RCC_OscConfig+0x236>
 8000c28:	e000      	b.n	8000c2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2208      	movs	r2, #8
 8000c32:	4013      	ands	r3, r2
 8000c34:	d047      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000c36:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2238      	movs	r2, #56	; 0x38
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b18      	cmp	r3, #24
 8000c40:	d10a      	bne.n	8000c58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000c42:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	2202      	movs	r2, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d03c      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x2f2>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d138      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e1cb      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d019      	beq.n	8000c94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fd92 	bl	8000794 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c76:	f7ff fd8d 	bl	8000794 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e1b3      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d0f1      	beq.n	8000c76 <HAL_RCC_OscConfig+0x2a2>
 8000c92:	e018      	b.n	8000cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fd78 	bl	8000794 <HAL_GetTick>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000caa:	f7ff fd73 	bl	8000794 <HAL_GetTick>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e199      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d1f1      	bne.n	8000caa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x2fe>
 8000cd0:	e0c6      	b.n	8000e60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2238      	movs	r2, #56	; 0x38
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b20      	cmp	r3, #32
 8000ce4:	d11e      	bne.n	8000d24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cea:	2202      	movs	r2, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	d100      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x31e>
 8000cf0:	e0b6      	b.n	8000e60 <HAL_RCC_OscConfig+0x48c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <HAL_RCC_OscConfig+0x328>
 8000cfa:	e0b1      	b.n	8000e60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e177      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
 8000d00:	40021000 	.word	0x40021000
 8000d04:	fffeffff 	.word	0xfffeffff
 8000d08:	fffbffff 	.word	0xfffbffff
 8000d0c:	ffff80ff 	.word	0xffff80ff
 8000d10:	ffffc7ff 	.word	0xffffc7ff
 8000d14:	00f42400 	.word	0x00f42400
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000d24:	4bb4      	ldr	r3, [pc, #720]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	055b      	lsls	r3, r3, #21
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_RCC_OscConfig+0x360>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x362>
 8000d34:	2300      	movs	r3, #0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d011      	beq.n	8000d5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4baf      	ldr	r3, [pc, #700]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d3e:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0549      	lsls	r1, r1, #21
 8000d44:	430a      	orrs	r2, r1
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d48:	4bab      	ldr	r3, [pc, #684]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	055b      	lsls	r3, r3, #21
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000d56:	231f      	movs	r3, #31
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d5e:	4ba7      	ldr	r3, [pc, #668]	; (8000ffc <HAL_RCC_OscConfig+0x628>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4013      	ands	r3, r2
 8000d68:	d11a      	bne.n	8000da0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d6a:	4ba4      	ldr	r3, [pc, #656]	; (8000ffc <HAL_RCC_OscConfig+0x628>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4ba3      	ldr	r3, [pc, #652]	; (8000ffc <HAL_RCC_OscConfig+0x628>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0049      	lsls	r1, r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fd0c 	bl	8000794 <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d82:	f7ff fd07 	bl	8000794 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e12d      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d94:	4b99      	ldr	r3, [pc, #612]	; (8000ffc <HAL_RCC_OscConfig+0x628>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d106      	bne.n	8000db6 <HAL_RCC_OscConfig+0x3e2>
 8000da8:	4b93      	ldr	r3, [pc, #588]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8000db4:	e01c      	b.n	8000df0 <HAL_RCC_OscConfig+0x41c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x404>
 8000dbe:	4b8e      	ldr	r3, [pc, #568]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dc2:	4b8d      	ldr	r3, [pc, #564]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000dca:	4b8b      	ldr	r3, [pc, #556]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dce:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0x41c>
 8000dd8:	4b87      	ldr	r3, [pc, #540]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ddc:	4b86      	ldr	r3, [pc, #536]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	438a      	bics	r2, r1
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8000de4:	4b84      	ldr	r3, [pc, #528]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000de8:	4b83      	ldr	r3, [pc, #524]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000dea:	2104      	movs	r1, #4
 8000dec:	438a      	bics	r2, r1
 8000dee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d014      	beq.n	8000e22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df8:	f7ff fccc 	bl	8000794 <HAL_GetTick>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e00:	e009      	b.n	8000e16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e02:	f7ff fcc7 	bl	8000794 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a7c      	ldr	r2, [pc, #496]	; (8001000 <HAL_RCC_OscConfig+0x62c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e0ec      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x42e>
 8000e20:	e013      	b.n	8000e4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e22:	f7ff fcb7 	bl	8000794 <HAL_GetTick>
 8000e26:	0003      	movs	r3, r0
 8000e28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e2a:	e009      	b.n	8000e40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fcb2 	bl	8000794 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	4a72      	ldr	r2, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x62c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0d7      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e40:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e44:	2202      	movs	r2, #2
 8000e46:	4013      	ands	r3, r2
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000e4a:	231f      	movs	r3, #31
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d105      	bne.n	8000e60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000e54:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e58:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e5a:	496a      	ldr	r1, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x630>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d100      	bne.n	8000e6a <HAL_RCC_OscConfig+0x496>
 8000e68:	e0c1      	b.n	8000fee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2238      	movs	r2, #56	; 0x38
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	d100      	bne.n	8000e78 <HAL_RCC_OscConfig+0x4a4>
 8000e76:	e081      	b.n	8000f7c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d156      	bne.n	8000f2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e80:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000e86:	4960      	ldr	r1, [pc, #384]	; (8001008 <HAL_RCC_OscConfig+0x634>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fc82 	bl	8000794 <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fc7d 	bl	8000794 <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e0a3      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ea8:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	049b      	lsls	r3, r3, #18
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	4a54      	ldr	r2, [pc, #336]	; (800100c <HAL_RCC_OscConfig+0x638>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	0449      	lsls	r1, r1, #17
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000ef6:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0549      	lsls	r1, r1, #21
 8000f00:	430a      	orrs	r2, r1
 8000f02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc46 	bl	8000794 <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fc41 	bl	8000794 <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e067      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	049b      	lsls	r3, r3, #18
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x53a>
 8000f2c:	e05f      	b.n	8000fee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f2e:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f34:	4934      	ldr	r1, [pc, #208]	; (8001008 <HAL_RCC_OscConfig+0x634>)
 8000f36:	400a      	ands	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f40:	2103      	movs	r1, #3
 8000f42:	438a      	bics	r2, r1
 8000f44:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8000f46:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f4c:	4930      	ldr	r1, [pc, #192]	; (8001010 <HAL_RCC_OscConfig+0x63c>)
 8000f4e:	400a      	ands	r2, r1
 8000f50:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc1f 	bl	8000794 <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5c:	f7ff fc1a 	bl	8000794 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e040      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f6e:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	049b      	lsls	r3, r3, #18
 8000f76:	4013      	ands	r3, r2
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x588>
 8000f7a:	e038      	b.n	8000fee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e033      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_RCC_OscConfig+0x624>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2203      	movs	r2, #3
 8000f92:	401a      	ands	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d126      	bne.n	8000fea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2270      	movs	r2, #112	; 0x70
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d11f      	bne.n	8000fea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	23fe      	movs	r3, #254	; 0xfe
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d116      	bne.n	8000fea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	23f8      	movs	r3, #248	; 0xf8
 8000fc0:	039b      	lsls	r3, r3, #14
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10e      	bne.n	8000fea <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	23e0      	movs	r3, #224	; 0xe0
 8000fd0:	051b      	lsls	r3, r3, #20
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	0f5b      	lsrs	r3, r3, #29
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b008      	add	sp, #32
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40007000 	.word	0x40007000
 8001000:	00001388 	.word	0x00001388
 8001004:	efffffff 	.word	0xefffffff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	11c1808c 	.word	0x11c1808c
 8001010:	eefeffff 	.word	0xeefeffff

08001014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0e9      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001028:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2207      	movs	r2, #7
 800102e:	4013      	ands	r3, r2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d91e      	bls.n	8001074 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001036:	4b73      	ldr	r3, [pc, #460]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2207      	movs	r2, #7
 800103c:	4393      	bics	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001048:	f7ff fba4 	bl	8000794 <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001050:	e009      	b.n	8001066 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001052:	f7ff fb9f 	bl	8000794 <HAL_GetTick>
 8001056:	0002      	movs	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4a6a      	ldr	r2, [pc, #424]	; (8001208 <HAL_RCC_ClockConfig+0x1f4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e0ca      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2207      	movs	r2, #7
 800106c:	4013      	ands	r3, r2
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d1ee      	bne.n	8001052 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2202      	movs	r2, #2
 800107a:	4013      	ands	r3, r2
 800107c:	d015      	beq.n	80010aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2204      	movs	r2, #4
 8001084:	4013      	ands	r3, r2
 8001086:	d006      	beq.n	8001096 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001088:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 800108e:	21e0      	movs	r1, #224	; 0xe0
 8001090:	01c9      	lsls	r1, r1, #7
 8001092:	430a      	orrs	r2, r1
 8001094:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <HAL_RCC_ClockConfig+0x1fc>)
 800109c:	4013      	ands	r3, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4013      	ands	r3, r2
 80010b2:	d057      	beq.n	8001164 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d107      	bne.n	80010cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d12b      	bne.n	8001120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e097      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d107      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d4:	4b4d      	ldr	r3, [pc, #308]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	049b      	lsls	r3, r3, #18
 80010dc:	4013      	ands	r3, r2
 80010de:	d11f      	bne.n	8001120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e08b      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4013      	ands	r3, r2
 80010f6:	d113      	bne.n	8001120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e07f      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d106      	bne.n	8001112 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d108      	bne.n	8001120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e074      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2202      	movs	r2, #2
 8001118:	4013      	ands	r3, r2
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e06d      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2207      	movs	r2, #7
 8001126:	4393      	bics	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001130:	430a      	orrs	r2, r1
 8001132:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001134:	f7ff fb2e 	bl	8000794 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113c:	e009      	b.n	8001152 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113e:	f7ff fb29 	bl	8000794 <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_RCC_ClockConfig+0x1f4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e054      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2238      	movs	r2, #56	; 0x38
 8001158:	401a      	ands	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	429a      	cmp	r2, r3
 8001162:	d1ec      	bne.n	800113e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2207      	movs	r2, #7
 800116a:	4013      	ands	r3, r2
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d21e      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2207      	movs	r2, #7
 8001178:	4393      	bics	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001184:	f7ff fb06 	bl	8000794 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800118c:	e009      	b.n	80011a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118e:	f7ff fb01 	bl	8000794 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_RCC_ClockConfig+0x1f4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e02c      	b.n	80011fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_RCC_ClockConfig+0x1f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2207      	movs	r2, #7
 80011a8:	4013      	ands	r3, r2
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1ee      	bne.n	800118e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2204      	movs	r2, #4
 80011b6:	4013      	ands	r3, r2
 80011b8:	d009      	beq.n	80011ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_RCC_ClockConfig+0x200>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	0019      	movs	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80011ca:	430a      	orrs	r2, r1
 80011cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80011ce:	f000 f829 	bl	8001224 <HAL_RCC_GetSysClockFreq>
 80011d2:	0001      	movs	r1, r0
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_RCC_ClockConfig+0x1f8>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	220f      	movs	r2, #15
 80011dc:	401a      	ands	r2, r3
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_RCC_ClockConfig+0x204>)
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	58d3      	ldr	r3, [r2, r3]
 80011e4:	221f      	movs	r2, #31
 80011e6:	4013      	ands	r3, r2
 80011e8:	000a      	movs	r2, r1
 80011ea:	40da      	lsrs	r2, r3
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_ClockConfig+0x208>)
 80011ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_ClockConfig+0x20c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff fa73 	bl	80006e0 <HAL_InitTick>
 80011fa:	0003      	movs	r3, r0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40022000 	.word	0x40022000
 8001208:	00001388 	.word	0x00001388
 800120c:	40021000 	.word	0x40021000
 8001210:	fffff0ff 	.word	0xfffff0ff
 8001214:	ffff8fff 	.word	0xffff8fff
 8001218:	08001398 	.word	0x08001398
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2238      	movs	r2, #56	; 0x38
 8001230:	4013      	ands	r3, r2
 8001232:	d10f      	bne.n	8001254 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0adb      	lsrs	r3, r3, #11
 800123a:	2207      	movs	r2, #7
 800123c:	4013      	ands	r3, r2
 800123e:	2201      	movs	r2, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	4835      	ldr	r0, [pc, #212]	; (8001320 <HAL_RCC_GetSysClockFreq+0xfc>)
 800124a:	f7fe ff5b 	bl	8000104 <__udivsi3>
 800124e:	0003      	movs	r3, r0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	e05d      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2238      	movs	r2, #56	; 0x38
 800125a:	4013      	ands	r3, r2
 800125c:	2b08      	cmp	r3, #8
 800125e:	d102      	bne.n	8001266 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_RCC_GetSysClockFreq+0x100>)
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	e054      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2238      	movs	r2, #56	; 0x38
 800126c:	4013      	ands	r3, r2
 800126e:	2b10      	cmp	r3, #16
 8001270:	d138      	bne.n	80012e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	2207      	movs	r2, #7
 8001284:	4013      	ands	r3, r2
 8001286:	3301      	adds	r3, #1
 8001288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d10d      	bne.n	80012ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	4824      	ldr	r0, [pc, #144]	; (8001324 <HAL_RCC_GetSysClockFreq+0x100>)
 8001294:	f7fe ff36 	bl	8000104 <__udivsi3>
 8001298:	0003      	movs	r3, r0
 800129a:	0019      	movs	r1, r3
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	227f      	movs	r2, #127	; 0x7f
 80012a4:	4013      	ands	r3, r2
 80012a6:	434b      	muls	r3, r1
 80012a8:	617b      	str	r3, [r7, #20]
        break;
 80012aa:	e00d      	b.n	80012c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	481c      	ldr	r0, [pc, #112]	; (8001320 <HAL_RCC_GetSysClockFreq+0xfc>)
 80012b0:	f7fe ff28 	bl	8000104 <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0019      	movs	r1, r3
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	227f      	movs	r2, #127	; 0x7f
 80012c0:	4013      	ands	r3, r2
 80012c2:	434b      	muls	r3, r1
 80012c4:	617b      	str	r3, [r7, #20]
        break;
 80012c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0f5b      	lsrs	r3, r3, #29
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7fe ff13 	bl	8000104 <__udivsi3>
 80012de:	0003      	movs	r3, r0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e015      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2238      	movs	r2, #56	; 0x38
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d103      	bne.n	80012f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_RCC_GetSysClockFreq+0xf8>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2238      	movs	r2, #56	; 0x38
 80012fe:	4013      	ands	r3, r2
 8001300:	2b18      	cmp	r3, #24
 8001302:	d103      	bne.n	800130c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001304:	23fa      	movs	r3, #250	; 0xfa
 8001306:	01db      	lsls	r3, r3, #7
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	e001      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001310:	693b      	ldr	r3, [r7, #16]
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b006      	add	sp, #24
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021000 	.word	0x40021000
 8001320:	00f42400 	.word	0x00f42400
 8001324:	007a1200 	.word	0x007a1200

08001328 <__libc_init_array>:
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	2600      	movs	r6, #0
 800132c:	4d0c      	ldr	r5, [pc, #48]	; (8001360 <__libc_init_array+0x38>)
 800132e:	4c0d      	ldr	r4, [pc, #52]	; (8001364 <__libc_init_array+0x3c>)
 8001330:	1b64      	subs	r4, r4, r5
 8001332:	10a4      	asrs	r4, r4, #2
 8001334:	42a6      	cmp	r6, r4
 8001336:	d109      	bne.n	800134c <__libc_init_array+0x24>
 8001338:	2600      	movs	r6, #0
 800133a:	f000 f821 	bl	8001380 <_init>
 800133e:	4d0a      	ldr	r5, [pc, #40]	; (8001368 <__libc_init_array+0x40>)
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <__libc_init_array+0x44>)
 8001342:	1b64      	subs	r4, r4, r5
 8001344:	10a4      	asrs	r4, r4, #2
 8001346:	42a6      	cmp	r6, r4
 8001348:	d105      	bne.n	8001356 <__libc_init_array+0x2e>
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	00b3      	lsls	r3, r6, #2
 800134e:	58eb      	ldr	r3, [r5, r3]
 8001350:	4798      	blx	r3
 8001352:	3601      	adds	r6, #1
 8001354:	e7ee      	b.n	8001334 <__libc_init_array+0xc>
 8001356:	00b3      	lsls	r3, r6, #2
 8001358:	58eb      	ldr	r3, [r5, r3]
 800135a:	4798      	blx	r3
 800135c:	3601      	adds	r6, #1
 800135e:	e7f2      	b.n	8001346 <__libc_init_array+0x1e>
 8001360:	080013d8 	.word	0x080013d8
 8001364:	080013d8 	.word	0x080013d8
 8001368:	080013d8 	.word	0x080013d8
 800136c:	080013dc 	.word	0x080013dc

08001370 <memset>:
 8001370:	0003      	movs	r3, r0
 8001372:	1812      	adds	r2, r2, r0
 8001374:	4293      	cmp	r3, r2
 8001376:	d100      	bne.n	800137a <memset+0xa>
 8001378:	4770      	bx	lr
 800137a:	7019      	strb	r1, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	e7f9      	b.n	8001374 <memset+0x4>

08001380 <_init>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr

0800138c <_fini>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr
