
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f0  080020f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020f4  080020f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002104  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002104  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035ee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d80  00000000  00000000  00023622  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000440  00000000  00000000  000243a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c8  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000c68  00000000  00000000  00024bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003cd5  00000000  00000000  00025818  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087ff7  00000000  00000000  000294ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b14e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc4  00000000  00000000  000b1560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002098 	.word	0x08002098

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002098 	.word	0x08002098

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <build_buffer>:
void SystemClock_Config(void);

uint16_t buff[MAX_DEVICES*8];
uint8_t buff_data[MAX_DEVICES*8];

void build_buffer(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
	int k=0;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
	   for(int j=0;j<8;j++) {
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e020      	b.n	800026e <build_buffer+0x52>
		   for(int i=0;i<MAX_DEVICES;i++) {
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e017      	b.n	8000262 <build_buffer+0x46>
		   buff[k++]=((uint16_t)((j+1)<<8))|((uint16_t)buff_data[(8*i)+j]);
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	b29b      	uxth	r3, r3
 8000236:	3301      	adds	r3, #1
 8000238:	b29b      	uxth	r3, r3
 800023a:	021b      	lsls	r3, r3, #8
 800023c:	b299      	uxth	r1, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	00da      	lsls	r2, r3, #3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	18d3      	adds	r3, r2, r3
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <build_buffer+0x60>)
 8000248:	5cd3      	ldrb	r3, [r2, r3]
 800024a:	b29a      	uxth	r2, r3
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	1c58      	adds	r0, r3, #1
 8000250:	60f8      	str	r0, [r7, #12]
 8000252:	430a      	orrs	r2, r1
 8000254:	b291      	uxth	r1, r2
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <build_buffer+0x64>)
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	5299      	strh	r1, [r3, r2]
		   for(int i=0;i<MAX_DEVICES;i++) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b03      	cmp	r3, #3
 8000266:	dde4      	ble.n	8000232 <build_buffer+0x16>
	   for(int j=0;j<8;j++) {
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2b07      	cmp	r3, #7
 8000272:	dddb      	ble.n	800022c <build_buffer+0x10>
	   }
   }
}
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	b004      	add	sp, #16
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000068 	.word	0x20000068
 8000280:	20000028 	.word	0x20000028

08000284 <clear_buff>:
  {
	  asm( "NOP" );
  }
}

void clear_buff(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_DEVICES*8;i++)
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e007      	b.n	80002a0 <clear_buff+0x1c>
		buff[i]=0x0000;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <clear_buff+0x2c>)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	2100      	movs	r1, #0
 8000298:	52d1      	strh	r1, [r2, r3]
	for(int i=0;i<MAX_DEVICES*8;i++)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	3301      	adds	r3, #1
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b1f      	cmp	r3, #31
 80002a4:	ddf4      	ble.n	8000290 <clear_buff+0xc>
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b002      	add	sp, #8
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	20000028 	.word	0x20000028

080002b4 <spi_w16>:

void spi_w16( SPI_TypeDef *SPIx, uint16_t dat[] ) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	e010      	b.n	80002e6 <spi_w16+0x32>
	  while ( !( SPIx->SR & SPI_SR_TXE ) ) {};
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	2202      	movs	r2, #2
 80002cc:	4013      	ands	r3, r2
 80002ce:	d0fa      	beq.n	80002c6 <spi_w16+0x12>
	   *( uint16_t* )&( SPIx->DR ) = dat[i];
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	18d2      	adds	r2, r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	330c      	adds	r3, #12
 80002dc:	8812      	ldrh	r2, [r2, #0]
 80002de:	801a      	strh	r2, [r3, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	3301      	adds	r3, #1
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	ddeb      	ble.n	80002c4 <spi_w16+0x10>
  }

}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b004      	add	sp, #16
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <init_max>:

void init_max(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<5);
 80002fa:	23a0      	movs	r3, #160	; 0xa0
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	23a0      	movs	r3, #160	; 0xa0
 8000302:	05db      	lsls	r3, r3, #23
 8000304:	2120      	movs	r1, #32
 8000306:	430a      	orrs	r2, r1
 8000308:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1<<5);
 800030a:	23a0      	movs	r3, #160	; 0xa0
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	695a      	ldr	r2, [r3, #20]
 8000310:	23a0      	movs	r3, #160	; 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	2120      	movs	r1, #32
 8000316:	438a      	bics	r2, r1
 8000318:	615a      	str	r2, [r3, #20]
	uint16_t serialData[MAX_DEVICES];
	for(uint8_t i=0;i<15;i++){
 800031a:	230f      	movs	r3, #15
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e026      	b.n	8000372 <init_max+0x7e>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000324:	230e      	movs	r3, #14
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
 800032c:	e010      	b.n	8000350 <init_max+0x5c>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x00);
 800032e:	230f      	movs	r3, #15
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	200e      	movs	r0, #14
 8000338:	183a      	adds	r2, r7, r0
 800033a:	7812      	ldrb	r2, [r2, #0]
 800033c:	021b      	lsls	r3, r3, #8
 800033e:	b299      	uxth	r1, r3
 8000340:	003b      	movs	r3, r7
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000346:	183b      	adds	r3, r7, r0
 8000348:	781a      	ldrb	r2, [r3, #0]
 800034a:	183b      	adds	r3, r7, r0
 800034c:	3201      	adds	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	230e      	movs	r3, #14
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d9e9      	bls.n	800032e <init_max+0x3a>
		}
		spi_w16(SPI1,serialData);
 800035a:	003b      	movs	r3, r7
 800035c:	4a3e      	ldr	r2, [pc, #248]	; (8000458 <init_max+0x164>)
 800035e:	0019      	movs	r1, r3
 8000360:	0010      	movs	r0, r2
 8000362:	f7ff ffa7 	bl	80002b4 <spi_w16>
	for(uint8_t i=0;i<15;i++){
 8000366:	210f      	movs	r1, #15
 8000368:	187b      	adds	r3, r7, r1
 800036a:	781a      	ldrb	r2, [r3, #0]
 800036c:	187b      	adds	r3, r7, r1
 800036e:	3201      	adds	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	230f      	movs	r3, #15
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b0e      	cmp	r3, #14
 800037a:	d9d3      	bls.n	8000324 <init_max+0x30>
	}

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 800037c:	230d      	movs	r3, #13
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
 8000384:	e00b      	b.n	800039e <init_max+0xaa>
		serialData[j]=(0x0B07);
 8000386:	200d      	movs	r0, #13
 8000388:	183b      	adds	r3, r7, r0
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	003b      	movs	r3, r7
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	4932      	ldr	r1, [pc, #200]	; (800045c <init_max+0x168>)
 8000392:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000394:	183b      	adds	r3, r7, r0
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	183b      	adds	r3, r7, r0
 800039a:	3201      	adds	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	230d      	movs	r3, #13
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d9ee      	bls.n	8000386 <init_max+0x92>
	}
	spi_w16(SPI1,serialData);
 80003a8:	003b      	movs	r3, r7
 80003aa:	4a2b      	ldr	r2, [pc, #172]	; (8000458 <init_max+0x164>)
 80003ac:	0019      	movs	r1, r3
 80003ae:	0010      	movs	r0, r2
 80003b0:	f7ff ff80 	bl	80002b4 <spi_w16>

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003b4:	230c      	movs	r3, #12
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
 80003bc:	e00b      	b.n	80003d6 <init_max+0xe2>
		serialData[j]=(0x0C01);
 80003be:	200c      	movs	r0, #12
 80003c0:	183b      	adds	r3, r7, r0
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	003b      	movs	r3, r7
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	4925      	ldr	r1, [pc, #148]	; (8000460 <init_max+0x16c>)
 80003ca:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003cc:	183b      	adds	r3, r7, r0
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	183b      	adds	r3, r7, r0
 80003d2:	3201      	adds	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	230c      	movs	r3, #12
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d9ee      	bls.n	80003be <init_max+0xca>
	}
	spi_w16(SPI1,serialData);
 80003e0:	003b      	movs	r3, r7
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <init_max+0x164>)
 80003e4:	0019      	movs	r1, r3
 80003e6:	0010      	movs	r0, r2
 80003e8:	f7ff ff64 	bl	80002b4 <spi_w16>

	for(uint8_t i=1;i<=8;i++){
 80003ec:	230b      	movs	r3, #11
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	e026      	b.n	8000444 <init_max+0x150>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003f6:	230a      	movs	r3, #10
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
 80003fe:	e010      	b.n	8000422 <init_max+0x12e>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x00);
 8000400:	230b      	movs	r3, #11
 8000402:	18fb      	adds	r3, r7, r3
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29b      	uxth	r3, r3
 8000408:	200a      	movs	r0, #10
 800040a:	183a      	adds	r2, r7, r0
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	021b      	lsls	r3, r3, #8
 8000410:	b299      	uxth	r1, r3
 8000412:	003b      	movs	r3, r7
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000418:	183b      	adds	r3, r7, r0
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	183b      	adds	r3, r7, r0
 800041e:	3201      	adds	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
 8000422:	230a      	movs	r3, #10
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b03      	cmp	r3, #3
 800042a:	d9e9      	bls.n	8000400 <init_max+0x10c>
		}
	spi_w16(SPI1,serialData);
 800042c:	003b      	movs	r3, r7
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <init_max+0x164>)
 8000430:	0019      	movs	r1, r3
 8000432:	0010      	movs	r0, r2
 8000434:	f7ff ff3e 	bl	80002b4 <spi_w16>
	for(uint8_t i=1;i<=8;i++){
 8000438:	210b      	movs	r1, #11
 800043a:	187b      	adds	r3, r7, r1
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	187b      	adds	r3, r7, r1
 8000440:	3201      	adds	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	230b      	movs	r3, #11
 8000446:	18fb      	adds	r3, r7, r3
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b08      	cmp	r3, #8
 800044c:	d9d3      	bls.n	80003f6 <init_max+0x102>
	}
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	40013000 	.word	0x40013000
 800045c:	00000b07 	.word	0x00000b07
 8000460:	00000c01 	.word	0x00000c01

08000464 <main>:

int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  HAL_Init();
 8000468:	f000 ffa0 	bl	80013ac <HAL_Init>
  SystemClock_Config();
 800046c:	f000 fefc 	bl	8001268 <SystemClock_Config>

  //GPIOA configs

  RCC->IOPENR    |= RCC_IOPENR_GPIOAEN;
 8000470:	4bfe      	ldr	r3, [pc, #1016]	; (800086c <main+0x408>)
 8000472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000474:	4bfd      	ldr	r3, [pc, #1012]	; (800086c <main+0x408>)
 8000476:	2101      	movs	r1, #1
 8000478:	430a      	orrs	r2, r1
 800047a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->AHBENR    |= RCC_AHBENR_DMA1EN;
 800047c:	4bfb      	ldr	r3, [pc, #1004]	; (800086c <main+0x408>)
 800047e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000480:	4bfa      	ldr	r3, [pc, #1000]	; (800086c <main+0x408>)
 8000482:	2101      	movs	r1, #1
 8000484:	430a      	orrs	r2, r1
 8000486:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->APBENR2   |= RCC_APBENR2_SPI1EN;
 8000488:	4bf8      	ldr	r3, [pc, #992]	; (800086c <main+0x408>)
 800048a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800048c:	4bf7      	ldr	r3, [pc, #988]	; (800086c <main+0x408>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0149      	lsls	r1, r1, #5
 8000492:	430a      	orrs	r2, r1
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
  GPIOA->MODER   &= ~(0x3<<(1*2) | 0x3<<(2*2) | 0x3<<(4*2) | 0x3<<(5*2));
 8000496:	23a0      	movs	r3, #160	; 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	49f3      	ldr	r1, [pc, #972]	; (8000870 <main+0x40c>)
 80004a2:	400a      	ands	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
  GPIOA->MODER   |= (0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2) | 0x1<<(5*2));
 80004a6:	23a0      	movs	r3, #160	; 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	21c5      	movs	r1, #197	; 0xc5
 80004b2:	00c9      	lsls	r1, r1, #3
 80004b4:	430a      	orrs	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]
  //GPIOA->OTYPER  &= ~((0x1<<1) | (0x1<<2) | (0x1<<4));
  //GPIOA->OSPEEDR &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2) | 0x2<<(5*2));
  //GPIOA->PUPDR   &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2));
  GPIOA->PUPDR   |= ~(0x2<<(5*2));
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	68da      	ldr	r2, [r3, #12]
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	49ec      	ldr	r1, [pc, #944]	; (8000874 <main+0x410>)
 80004c4:	430a      	orrs	r2, r1
 80004c6:	60da      	str	r2, [r3, #12]
  GPIOA->AFR[0]  &= ~(0xff<<(1*4) | 0xff<<(2*4) | 0xff<<(4*4));
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	6a1a      	ldr	r2, [r3, #32]
 80004ce:	23a0      	movs	r3, #160	; 0xa0
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	49e9      	ldr	r1, [pc, #932]	; (8000878 <main+0x414>)
 80004d4:	400a      	ands	r2, r1
 80004d6:	621a      	str	r2, [r3, #32]

  GPIOA->ODR &= ~(1<<5);
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	23a0      	movs	r3, #160	; 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2120      	movs	r1, #32
 80004e4:	438a      	bics	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
  //DMA configs

  DMA1_Channel1->CCR &= ~( DMA_CCR_MEM2MEM |
 80004e8:	4be4      	ldr	r3, [pc, #912]	; (800087c <main+0x418>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4be3      	ldr	r3, [pc, #908]	; (800087c <main+0x418>)
 80004ee:	49e4      	ldr	r1, [pc, #912]	; (8000880 <main+0x41c>)
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
                           DMA_CCR_PL |
                           DMA_CCR_MSIZE |
                           DMA_CCR_PSIZE |
                           DMA_CCR_PINC |
                           DMA_CCR_EN );
  DMA1_Channel1->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 80004f4:	4be1      	ldr	r3, [pc, #900]	; (800087c <main+0x418>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4be0      	ldr	r3, [pc, #896]	; (800087c <main+0x418>)
 80004fa:	49e2      	ldr	r1, [pc, #904]	; (8000884 <main+0x420>)
 80004fc:	430a      	orrs	r2, r1
 80004fe:	601a      	str	r2, [r3, #0]
                           DMA_CCR_MINC |
                           DMA_CCR_CIRC |
                           DMA_CCR_DIR );


  DMAMUX1_Channel0->CCR &= ~( DMAMUX_CxCR_DMAREQ_ID );
 8000500:	4be1      	ldr	r3, [pc, #900]	; (8000888 <main+0x424>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4be0      	ldr	r3, [pc, #896]	; (8000888 <main+0x424>)
 8000506:	21ff      	movs	r1, #255	; 0xff
 8000508:	438a      	bics	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
  DMAMUX1_Channel0->CCR |=  ( 17 << DMAMUX_CxCR_DMAREQ_ID_Pos );
 800050c:	4bde      	ldr	r3, [pc, #888]	; (8000888 <main+0x424>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4bdd      	ldr	r3, [pc, #884]	; (8000888 <main+0x424>)
 8000512:	2111      	movs	r1, #17
 8000514:	430a      	orrs	r2, r1
 8000516:	601a      	str	r2, [r3, #0]

  DMA1_Channel1->CMAR  = ( uint32_t )&buff;
 8000518:	4bd8      	ldr	r3, [pc, #864]	; (800087c <main+0x418>)
 800051a:	4adc      	ldr	r2, [pc, #880]	; (800088c <main+0x428>)
 800051c:	60da      	str	r2, [r3, #12]
  DMA1_Channel1->CPAR  = ( uint32_t )&(SPI1->DR);
 800051e:	4bd7      	ldr	r3, [pc, #860]	; (800087c <main+0x418>)
 8000520:	4adb      	ldr	r2, [pc, #876]	; (8000890 <main+0x42c>)
 8000522:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CNDTR = ( uint16_t )(MAX_DEVICES*8);
 8000524:	4bd5      	ldr	r3, [pc, #852]	; (800087c <main+0x418>)
 8000526:	2220      	movs	r2, #32
 8000528:	605a      	str	r2, [r3, #4]

  //SPI configs
  SPI1->CR1 |=  ( SPI_CR1_MSTR | (1<<SPI_CR1_BIDIOE_Pos) );
 800052a:	4bda      	ldr	r3, [pc, #872]	; (8000894 <main+0x430>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4bd9      	ldr	r3, [pc, #868]	; (8000894 <main+0x430>)
 8000530:	49d9      	ldr	r1, [pc, #868]	; (8000898 <main+0x434>)
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
  SPI1->CR2 &= ~( SPI_CR2_DS );
 8000536:	4bd7      	ldr	r3, [pc, #860]	; (8000894 <main+0x430>)
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	4bd6      	ldr	r3, [pc, #856]	; (8000894 <main+0x430>)
 800053c:	49d7      	ldr	r1, [pc, #860]	; (800089c <main+0x438>)
 800053e:	400a      	ands	r2, r1
 8000540:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |=  ( 0xf << SPI_CR2_DS_Pos | SPI_CR2_TXDMAEN | 1<<SPI_CR2_NSSP_Pos | 1<<SPI_CR2_SSOE_Pos );
 8000542:	4bd4      	ldr	r3, [pc, #848]	; (8000894 <main+0x430>)
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	4bd3      	ldr	r3, [pc, #844]	; (8000894 <main+0x430>)
 8000548:	49d5      	ldr	r1, [pc, #852]	; (80008a0 <main+0x43c>)
 800054a:	430a      	orrs	r2, r1
 800054c:	605a      	str	r2, [r3, #4]

  SPI1->CR1 |=  ( SPI_CR1_SPE );
 800054e:	4bd1      	ldr	r3, [pc, #836]	; (8000894 <main+0x430>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4bd0      	ldr	r3, [pc, #832]	; (8000894 <main+0x430>)
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
  init_max();
 800055a:	f7ff fecb 	bl	80002f4 <init_max>

  //HAL_Delay(500);
  clear_buff();
 800055e:	f7ff fe91 	bl	8000284 <clear_buff>

  DMA1_Channel1->CCR |= ( DMA_CCR_EN );
 8000562:	4bc6      	ldr	r3, [pc, #792]	; (800087c <main+0x418>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4bc5      	ldr	r3, [pc, #788]	; (800087c <main+0x418>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	601a      	str	r2, [r3, #0]

while(1) {

    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000001;buff_data[24]=0b00000000;
 800056e:	4bcd      	ldr	r3, [pc, #820]	; (80008a4 <main+0x440>)
 8000570:	2220      	movs	r2, #32
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	4bcb      	ldr	r3, [pc, #812]	; (80008a4 <main+0x440>)
 8000576:	2210      	movs	r2, #16
 8000578:	721a      	strb	r2, [r3, #8]
 800057a:	4bca      	ldr	r3, [pc, #808]	; (80008a4 <main+0x440>)
 800057c:	2201      	movs	r2, #1
 800057e:	741a      	strb	r2, [r3, #16]
 8000580:	4bc8      	ldr	r3, [pc, #800]	; (80008a4 <main+0x440>)
 8000582:	2200      	movs	r2, #0
 8000584:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000586:	4bc7      	ldr	r3, [pc, #796]	; (80008a4 <main+0x440>)
 8000588:	2200      	movs	r2, #0
 800058a:	705a      	strb	r2, [r3, #1]
 800058c:	4bc5      	ldr	r3, [pc, #788]	; (80008a4 <main+0x440>)
 800058e:	2210      	movs	r2, #16
 8000590:	725a      	strb	r2, [r3, #9]
 8000592:	4bc4      	ldr	r3, [pc, #784]	; (80008a4 <main+0x440>)
 8000594:	2200      	movs	r2, #0
 8000596:	745a      	strb	r2, [r3, #17]
 8000598:	4bc2      	ldr	r3, [pc, #776]	; (80008a4 <main+0x440>)
 800059a:	2200      	movs	r2, #0
 800059c:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 800059e:	4bc1      	ldr	r3, [pc, #772]	; (80008a4 <main+0x440>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	709a      	strb	r2, [r3, #2]
 80005a4:	4bbf      	ldr	r3, [pc, #764]	; (80008a4 <main+0x440>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	729a      	strb	r2, [r3, #10]
 80005aa:	4bbe      	ldr	r3, [pc, #760]	; (80008a4 <main+0x440>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	749a      	strb	r2, [r3, #18]
 80005b0:	4bbc      	ldr	r3, [pc, #752]	; (80008a4 <main+0x440>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00001000;buff_data[27]=0b00011000;
 80005b6:	4bbb      	ldr	r3, [pc, #748]	; (80008a4 <main+0x440>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	70da      	strb	r2, [r3, #3]
 80005bc:	4bb9      	ldr	r3, [pc, #740]	; (80008a4 <main+0x440>)
 80005be:	2210      	movs	r2, #16
 80005c0:	72da      	strb	r2, [r3, #11]
 80005c2:	4bb8      	ldr	r3, [pc, #736]	; (80008a4 <main+0x440>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	74da      	strb	r2, [r3, #19]
 80005c8:	4bb6      	ldr	r3, [pc, #728]	; (80008a4 <main+0x440>)
 80005ca:	2218      	movs	r2, #24
 80005cc:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00001000;buff_data[28]=0b00011000;
 80005ce:	4bb5      	ldr	r3, [pc, #724]	; (80008a4 <main+0x440>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	711a      	strb	r2, [r3, #4]
 80005d4:	4bb3      	ldr	r3, [pc, #716]	; (80008a4 <main+0x440>)
 80005d6:	2210      	movs	r2, #16
 80005d8:	731a      	strb	r2, [r3, #12]
 80005da:	4bb2      	ldr	r3, [pc, #712]	; (80008a4 <main+0x440>)
 80005dc:	2208      	movs	r2, #8
 80005de:	751a      	strb	r2, [r3, #20]
 80005e0:	4bb0      	ldr	r3, [pc, #704]	; (80008a4 <main+0x440>)
 80005e2:	2218      	movs	r2, #24
 80005e4:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 80005e6:	4baf      	ldr	r3, [pc, #700]	; (80008a4 <main+0x440>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	715a      	strb	r2, [r3, #5]
 80005ec:	4bad      	ldr	r3, [pc, #692]	; (80008a4 <main+0x440>)
 80005ee:	2210      	movs	r2, #16
 80005f0:	735a      	strb	r2, [r3, #13]
 80005f2:	4bac      	ldr	r3, [pc, #688]	; (80008a4 <main+0x440>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	755a      	strb	r2, [r3, #21]
 80005f8:	4baa      	ldr	r3, [pc, #680]	; (80008a4 <main+0x440>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001000;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 80005fe:	4ba9      	ldr	r3, [pc, #676]	; (80008a4 <main+0x440>)
 8000600:	2208      	movs	r2, #8
 8000602:	719a      	strb	r2, [r3, #6]
 8000604:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <main+0x440>)
 8000606:	2210      	movs	r2, #16
 8000608:	739a      	strb	r2, [r3, #14]
 800060a:	4ba6      	ldr	r3, [pc, #664]	; (80008a4 <main+0x440>)
 800060c:	2200      	movs	r2, #0
 800060e:	759a      	strb	r2, [r3, #22]
 8000610:	4ba4      	ldr	r3, [pc, #656]	; (80008a4 <main+0x440>)
 8000612:	2200      	movs	r2, #0
 8000614:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000616:	4ba3      	ldr	r3, [pc, #652]	; (80008a4 <main+0x440>)
 8000618:	2200      	movs	r2, #0
 800061a:	71da      	strb	r2, [r3, #7]
 800061c:	4ba1      	ldr	r3, [pc, #644]	; (80008a4 <main+0x440>)
 800061e:	2210      	movs	r2, #16
 8000620:	73da      	strb	r2, [r3, #15]
 8000622:	4ba0      	ldr	r3, [pc, #640]	; (80008a4 <main+0x440>)
 8000624:	2200      	movs	r2, #0
 8000626:	75da      	strb	r2, [r3, #23]
 8000628:	4b9e      	ldr	r3, [pc, #632]	; (80008a4 <main+0x440>)
 800062a:	2200      	movs	r2, #0
 800062c:	77da      	strb	r2, [r3, #31]
    build_buffer();
 800062e:	f7ff fdf5 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000632:	206e      	movs	r0, #110	; 0x6e
 8000634:	f000 ff44 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000010;buff_data[24]=0b00000000;
 8000638:	4b9a      	ldr	r3, [pc, #616]	; (80008a4 <main+0x440>)
 800063a:	2220      	movs	r2, #32
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	4b99      	ldr	r3, [pc, #612]	; (80008a4 <main+0x440>)
 8000640:	2210      	movs	r2, #16
 8000642:	721a      	strb	r2, [r3, #8]
 8000644:	4b97      	ldr	r3, [pc, #604]	; (80008a4 <main+0x440>)
 8000646:	2202      	movs	r2, #2
 8000648:	741a      	strb	r2, [r3, #16]
 800064a:	4b96      	ldr	r3, [pc, #600]	; (80008a4 <main+0x440>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b10000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000650:	4b94      	ldr	r3, [pc, #592]	; (80008a4 <main+0x440>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	705a      	strb	r2, [r3, #1]
 8000656:	4b93      	ldr	r3, [pc, #588]	; (80008a4 <main+0x440>)
 8000658:	2210      	movs	r2, #16
 800065a:	725a      	strb	r2, [r3, #9]
 800065c:	4b91      	ldr	r3, [pc, #580]	; (80008a4 <main+0x440>)
 800065e:	2200      	movs	r2, #0
 8000660:	745a      	strb	r2, [r3, #17]
 8000662:	4b90      	ldr	r3, [pc, #576]	; (80008a4 <main+0x440>)
 8000664:	2200      	movs	r2, #0
 8000666:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 8000668:	4b8e      	ldr	r3, [pc, #568]	; (80008a4 <main+0x440>)
 800066a:	2200      	movs	r2, #0
 800066c:	709a      	strb	r2, [r3, #2]
 800066e:	4b8d      	ldr	r3, [pc, #564]	; (80008a4 <main+0x440>)
 8000670:	2210      	movs	r2, #16
 8000672:	729a      	strb	r2, [r3, #10]
 8000674:	4b8b      	ldr	r3, [pc, #556]	; (80008a4 <main+0x440>)
 8000676:	2200      	movs	r2, #0
 8000678:	749a      	strb	r2, [r3, #18]
 800067a:	4b8a      	ldr	r3, [pc, #552]	; (80008a4 <main+0x440>)
 800067c:	2200      	movs	r2, #0
 800067e:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00010000;buff_data[27]=0b00011000;
 8000680:	4b88      	ldr	r3, [pc, #544]	; (80008a4 <main+0x440>)
 8000682:	2200      	movs	r2, #0
 8000684:	70da      	strb	r2, [r3, #3]
 8000686:	4b87      	ldr	r3, [pc, #540]	; (80008a4 <main+0x440>)
 8000688:	2210      	movs	r2, #16
 800068a:	72da      	strb	r2, [r3, #11]
 800068c:	4b85      	ldr	r3, [pc, #532]	; (80008a4 <main+0x440>)
 800068e:	2210      	movs	r2, #16
 8000690:	74da      	strb	r2, [r3, #19]
 8000692:	4b84      	ldr	r3, [pc, #528]	; (80008a4 <main+0x440>)
 8000694:	2218      	movs	r2, #24
 8000696:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00010000;buff_data[28]=0b00011000;
 8000698:	4b82      	ldr	r3, [pc, #520]	; (80008a4 <main+0x440>)
 800069a:	2200      	movs	r2, #0
 800069c:	711a      	strb	r2, [r3, #4]
 800069e:	4b81      	ldr	r3, [pc, #516]	; (80008a4 <main+0x440>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	731a      	strb	r2, [r3, #12]
 80006a4:	4b7f      	ldr	r3, [pc, #508]	; (80008a4 <main+0x440>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	751a      	strb	r2, [r3, #20]
 80006aa:	4b7e      	ldr	r3, [pc, #504]	; (80008a4 <main+0x440>)
 80006ac:	2218      	movs	r2, #24
 80006ae:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 80006b0:	4b7c      	ldr	r3, [pc, #496]	; (80008a4 <main+0x440>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	715a      	strb	r2, [r3, #5]
 80006b6:	4b7b      	ldr	r3, [pc, #492]	; (80008a4 <main+0x440>)
 80006b8:	2210      	movs	r2, #16
 80006ba:	735a      	strb	r2, [r3, #13]
 80006bc:	4b79      	ldr	r3, [pc, #484]	; (80008a4 <main+0x440>)
 80006be:	2200      	movs	r2, #0
 80006c0:	755a      	strb	r2, [r3, #21]
 80006c2:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <main+0x440>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 80006c8:	4b76      	ldr	r3, [pc, #472]	; (80008a4 <main+0x440>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	719a      	strb	r2, [r3, #6]
 80006ce:	4b75      	ldr	r3, [pc, #468]	; (80008a4 <main+0x440>)
 80006d0:	2210      	movs	r2, #16
 80006d2:	739a      	strb	r2, [r3, #14]
 80006d4:	4b73      	ldr	r3, [pc, #460]	; (80008a4 <main+0x440>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	759a      	strb	r2, [r3, #22]
 80006da:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <main+0x440>)
 80006dc:	2200      	movs	r2, #0
 80006de:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80006e0:	4b70      	ldr	r3, [pc, #448]	; (80008a4 <main+0x440>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	71da      	strb	r2, [r3, #7]
 80006e6:	4b6f      	ldr	r3, [pc, #444]	; (80008a4 <main+0x440>)
 80006e8:	2210      	movs	r2, #16
 80006ea:	73da      	strb	r2, [r3, #15]
 80006ec:	4b6d      	ldr	r3, [pc, #436]	; (80008a4 <main+0x440>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	75da      	strb	r2, [r3, #23]
 80006f2:	4b6c      	ldr	r3, [pc, #432]	; (80008a4 <main+0x440>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80006f8:	f7ff fd90 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 80006fc:	206e      	movs	r0, #110	; 0x6e
 80006fe:	f000 fedf 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000100;buff_data[24]=0b00000000;
 8000702:	4b68      	ldr	r3, [pc, #416]	; (80008a4 <main+0x440>)
 8000704:	2220      	movs	r2, #32
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	4b66      	ldr	r3, [pc, #408]	; (80008a4 <main+0x440>)
 800070a:	2210      	movs	r2, #16
 800070c:	721a      	strb	r2, [r3, #8]
 800070e:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <main+0x440>)
 8000710:	2204      	movs	r2, #4
 8000712:	741a      	strb	r2, [r3, #16]
 8000714:	4b63      	ldr	r3, [pc, #396]	; (80008a4 <main+0x440>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 800071a:	4b62      	ldr	r3, [pc, #392]	; (80008a4 <main+0x440>)
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
 8000720:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <main+0x440>)
 8000722:	2210      	movs	r2, #16
 8000724:	725a      	strb	r2, [r3, #9]
 8000726:	4b5f      	ldr	r3, [pc, #380]	; (80008a4 <main+0x440>)
 8000728:	2200      	movs	r2, #0
 800072a:	745a      	strb	r2, [r3, #17]
 800072c:	4b5d      	ldr	r3, [pc, #372]	; (80008a4 <main+0x440>)
 800072e:	2200      	movs	r2, #0
 8000730:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 8000732:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <main+0x440>)
 8000734:	2200      	movs	r2, #0
 8000736:	709a      	strb	r2, [r3, #2]
 8000738:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <main+0x440>)
 800073a:	2210      	movs	r2, #16
 800073c:	729a      	strb	r2, [r3, #10]
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <main+0x440>)
 8000740:	2200      	movs	r2, #0
 8000742:	749a      	strb	r2, [r3, #18]
 8000744:	4b57      	ldr	r3, [pc, #348]	; (80008a4 <main+0x440>)
 8000746:	2200      	movs	r2, #0
 8000748:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b00010000;buff_data[19]=0b00100000;buff_data[27]=0b00011000;
 800074a:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <main+0x440>)
 800074c:	2202      	movs	r2, #2
 800074e:	70da      	strb	r2, [r3, #3]
 8000750:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <main+0x440>)
 8000752:	2210      	movs	r2, #16
 8000754:	72da      	strb	r2, [r3, #11]
 8000756:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <main+0x440>)
 8000758:	2220      	movs	r2, #32
 800075a:	74da      	strb	r2, [r3, #19]
 800075c:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <main+0x440>)
 800075e:	2218      	movs	r2, #24
 8000760:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00100000;buff_data[28]=0b00011000;
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <main+0x440>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
 8000768:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <main+0x440>)
 800076a:	2210      	movs	r2, #16
 800076c:	731a      	strb	r2, [r3, #12]
 800076e:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <main+0x440>)
 8000770:	2220      	movs	r2, #32
 8000772:	751a      	strb	r2, [r3, #20]
 8000774:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <main+0x440>)
 8000776:	2218      	movs	r2, #24
 8000778:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 800077a:	4b4a      	ldr	r3, [pc, #296]	; (80008a4 <main+0x440>)
 800077c:	2208      	movs	r2, #8
 800077e:	715a      	strb	r2, [r3, #5]
 8000780:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <main+0x440>)
 8000782:	2210      	movs	r2, #16
 8000784:	735a      	strb	r2, [r3, #13]
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <main+0x440>)
 8000788:	2200      	movs	r2, #0
 800078a:	755a      	strb	r2, [r3, #21]
 800078c:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <main+0x440>)
 800078e:	2200      	movs	r2, #0
 8000790:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <main+0x440>)
 8000794:	220c      	movs	r2, #12
 8000796:	719a      	strb	r2, [r3, #6]
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <main+0x440>)
 800079a:	2210      	movs	r2, #16
 800079c:	739a      	strb	r2, [r3, #14]
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <main+0x440>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	759a      	strb	r2, [r3, #22]
 80007a4:	4b3f      	ldr	r3, [pc, #252]	; (80008a4 <main+0x440>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <main+0x440>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	71da      	strb	r2, [r3, #7]
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <main+0x440>)
 80007b2:	2210      	movs	r2, #16
 80007b4:	73da      	strb	r2, [r3, #15]
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <main+0x440>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	75da      	strb	r2, [r3, #23]
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <main+0x440>)
 80007be:	2200      	movs	r2, #0
 80007c0:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80007c2:	f7ff fd2b 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 80007c6:	206e      	movs	r0, #110	; 0x6e
 80007c8:	f000 fe7a 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00000000;buff_data[8] =0b00010000;buff_data[16]=0b00001000;buff_data[24]=0b00000000;
 80007cc:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <main+0x440>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <main+0x440>)
 80007d4:	2210      	movs	r2, #16
 80007d6:	721a      	strb	r2, [r3, #8]
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <main+0x440>)
 80007da:	2208      	movs	r2, #8
 80007dc:	741a      	strb	r2, [r3, #16]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <main+0x440>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <main+0x440>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	705a      	strb	r2, [r3, #1]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <main+0x440>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	725a      	strb	r2, [r3, #9]
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <main+0x440>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	745a      	strb	r2, [r3, #17]
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <main+0x440>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00100000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <main+0x440>)
 80007fe:	2220      	movs	r2, #32
 8000800:	709a      	strb	r2, [r3, #2]
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <main+0x440>)
 8000804:	2210      	movs	r2, #16
 8000806:	729a      	strb	r2, [r3, #10]
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <main+0x440>)
 800080a:	2200      	movs	r2, #0
 800080c:	749a      	strb	r2, [r3, #18]
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <main+0x440>)
 8000810:	2200      	movs	r2, #0
 8000812:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100001;buff_data[27]=0b00011000;
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <main+0x440>)
 8000816:	2200      	movs	r2, #0
 8000818:	70da      	strb	r2, [r3, #3]
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <main+0x440>)
 800081c:	2210      	movs	r2, #16
 800081e:	72da      	strb	r2, [r3, #11]
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <main+0x440>)
 8000822:	2221      	movs	r2, #33	; 0x21
 8000824:	74da      	strb	r2, [r3, #19]
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <main+0x440>)
 8000828:	2218      	movs	r2, #24
 800082a:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00100001;buff_data[28]=0b00011000;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <main+0x440>)
 800082e:	2200      	movs	r2, #0
 8000830:	711a      	strb	r2, [r3, #4]
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <main+0x440>)
 8000834:	2210      	movs	r2, #16
 8000836:	731a      	strb	r2, [r3, #12]
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <main+0x440>)
 800083a:	2221      	movs	r2, #33	; 0x21
 800083c:	751a      	strb	r2, [r3, #20]
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <main+0x440>)
 8000840:	2218      	movs	r2, #24
 8000842:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001100;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <main+0x440>)
 8000846:	220c      	movs	r2, #12
 8000848:	715a      	strb	r2, [r3, #5]
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x440>)
 800084c:	2210      	movs	r2, #16
 800084e:	735a      	strb	r2, [r3, #13]
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <main+0x440>)
 8000852:	2200      	movs	r2, #0
 8000854:	755a      	strb	r2, [r3, #21]
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <main+0x440>)
 8000858:	2200      	movs	r2, #0
 800085a:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <main+0x440>)
 800085e:	220c      	movs	r2, #12
 8000860:	719a      	strb	r2, [r3, #6]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <main+0x440>)
 8000864:	2210      	movs	r2, #16
 8000866:	739a      	strb	r2, [r3, #14]
 8000868:	e01e      	b.n	80008a8 <main+0x444>
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000
 8000870:	fffff0c3 	.word	0xfffff0c3
 8000874:	fffff7ff 	.word	0xfffff7ff
 8000878:	ff00000f 	.word	0xff00000f
 800087c:	40020008 	.word	0x40020008
 8000880:	ffff80be 	.word	0xffff80be
 8000884:	000025b0 	.word	0x000025b0
 8000888:	40020800 	.word	0x40020800
 800088c:	20000028 	.word	0x20000028
 8000890:	4001300c 	.word	0x4001300c
 8000894:	40013000 	.word	0x40013000
 8000898:	00004004 	.word	0x00004004
 800089c:	fffff0ff 	.word	0xfffff0ff
 80008a0:	00000f0e 	.word	0x00000f0e
 80008a4:	20000068 	.word	0x20000068
 80008a8:	4bfe      	ldr	r3, [pc, #1016]	; (8000ca4 <main+0x840>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	759a      	strb	r2, [r3, #22]
 80008ae:	4bfd      	ldr	r3, [pc, #1012]	; (8000ca4 <main+0x840>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80008b4:	4bfb      	ldr	r3, [pc, #1004]	; (8000ca4 <main+0x840>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	71da      	strb	r2, [r3, #7]
 80008ba:	4bfa      	ldr	r3, [pc, #1000]	; (8000ca4 <main+0x840>)
 80008bc:	2210      	movs	r2, #16
 80008be:	73da      	strb	r2, [r3, #15]
 80008c0:	4bf8      	ldr	r3, [pc, #992]	; (8000ca4 <main+0x840>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	75da      	strb	r2, [r3, #23]
 80008c6:	4bf7      	ldr	r3, [pc, #988]	; (8000ca4 <main+0x840>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80008cc:	f7ff fca6 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 80008d0:	206e      	movs	r0, #110	; 0x6e
 80008d2:	f000 fdf5 	bl	80014c0 <HAL_Delay>

    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b00100000;buff_data[24]=0b00000000;
 80008d6:	4bf3      	ldr	r3, [pc, #972]	; (8000ca4 <main+0x840>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	4bf1      	ldr	r3, [pc, #964]	; (8000ca4 <main+0x840>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	721a      	strb	r2, [r3, #8]
 80008e2:	4bf0      	ldr	r3, [pc, #960]	; (8000ca4 <main+0x840>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	741a      	strb	r2, [r3, #16]
 80008e8:	4bee      	ldr	r3, [pc, #952]	; (8000ca4 <main+0x840>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 80008ee:	4bed      	ldr	r3, [pc, #948]	; (8000ca4 <main+0x840>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	705a      	strb	r2, [r3, #1]
 80008f4:	4beb      	ldr	r3, [pc, #940]	; (8000ca4 <main+0x840>)
 80008f6:	2240      	movs	r2, #64	; 0x40
 80008f8:	725a      	strb	r2, [r3, #9]
 80008fa:	4bea      	ldr	r3, [pc, #936]	; (8000ca4 <main+0x840>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	745a      	strb	r2, [r3, #17]
 8000900:	4be8      	ldr	r3, [pc, #928]	; (8000ca4 <main+0x840>)
 8000902:	2200      	movs	r2, #0
 8000904:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000906:	4be7      	ldr	r3, [pc, #924]	; (8000ca4 <main+0x840>)
 8000908:	2200      	movs	r2, #0
 800090a:	709a      	strb	r2, [r3, #2]
 800090c:	4be5      	ldr	r3, [pc, #916]	; (8000ca4 <main+0x840>)
 800090e:	2220      	movs	r2, #32
 8000910:	729a      	strb	r2, [r3, #10]
 8000912:	4be4      	ldr	r3, [pc, #912]	; (8000ca4 <main+0x840>)
 8000914:	2200      	movs	r2, #0
 8000916:	749a      	strb	r2, [r3, #18]
 8000918:	4be2      	ldr	r3, [pc, #904]	; (8000ca4 <main+0x840>)
 800091a:	223c      	movs	r2, #60	; 0x3c
 800091c:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100010;buff_data[27]=0b00100100;
 800091e:	4be1      	ldr	r3, [pc, #900]	; (8000ca4 <main+0x840>)
 8000920:	2200      	movs	r2, #0
 8000922:	70da      	strb	r2, [r3, #3]
 8000924:	4bdf      	ldr	r3, [pc, #892]	; (8000ca4 <main+0x840>)
 8000926:	2210      	movs	r2, #16
 8000928:	72da      	strb	r2, [r3, #11]
 800092a:	4bde      	ldr	r3, [pc, #888]	; (8000ca4 <main+0x840>)
 800092c:	2222      	movs	r2, #34	; 0x22
 800092e:	74da      	strb	r2, [r3, #19]
 8000930:	4bdc      	ldr	r3, [pc, #880]	; (8000ca4 <main+0x840>)
 8000932:	2224      	movs	r2, #36	; 0x24
 8000934:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00100010;buff_data[28]=0b00100100;
 8000936:	4bdb      	ldr	r3, [pc, #876]	; (8000ca4 <main+0x840>)
 8000938:	2200      	movs	r2, #0
 800093a:	711a      	strb	r2, [r3, #4]
 800093c:	4bd9      	ldr	r3, [pc, #868]	; (8000ca4 <main+0x840>)
 800093e:	2208      	movs	r2, #8
 8000940:	731a      	strb	r2, [r3, #12]
 8000942:	4bd8      	ldr	r3, [pc, #864]	; (8000ca4 <main+0x840>)
 8000944:	2222      	movs	r2, #34	; 0x22
 8000946:	751a      	strb	r2, [r3, #20]
 8000948:	4bd6      	ldr	r3, [pc, #856]	; (8000ca4 <main+0x840>)
 800094a:	2224      	movs	r2, #36	; 0x24
 800094c:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 800094e:	4bd5      	ldr	r3, [pc, #852]	; (8000ca4 <main+0x840>)
 8000950:	2200      	movs	r2, #0
 8000952:	715a      	strb	r2, [r3, #5]
 8000954:	4bd3      	ldr	r3, [pc, #844]	; (8000ca4 <main+0x840>)
 8000956:	2204      	movs	r2, #4
 8000958:	735a      	strb	r2, [r3, #13]
 800095a:	4bd2      	ldr	r3, [pc, #840]	; (8000ca4 <main+0x840>)
 800095c:	2200      	movs	r2, #0
 800095e:	755a      	strb	r2, [r3, #21]
 8000960:	4bd0      	ldr	r3, [pc, #832]	; (8000ca4 <main+0x840>)
 8000962:	223c      	movs	r2, #60	; 0x3c
 8000964:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000966:	4bcf      	ldr	r3, [pc, #828]	; (8000ca4 <main+0x840>)
 8000968:	2200      	movs	r2, #0
 800096a:	719a      	strb	r2, [r3, #6]
 800096c:	4bcd      	ldr	r3, [pc, #820]	; (8000ca4 <main+0x840>)
 800096e:	2202      	movs	r2, #2
 8000970:	739a      	strb	r2, [r3, #14]
 8000972:	4bcc      	ldr	r3, [pc, #816]	; (8000ca4 <main+0x840>)
 8000974:	2200      	movs	r2, #0
 8000976:	759a      	strb	r2, [r3, #22]
 8000978:	4bca      	ldr	r3, [pc, #808]	; (8000ca4 <main+0x840>)
 800097a:	2200      	movs	r2, #0
 800097c:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 800097e:	4bc9      	ldr	r3, [pc, #804]	; (8000ca4 <main+0x840>)
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	71da      	strb	r2, [r3, #7]
 8000984:	4bc7      	ldr	r3, [pc, #796]	; (8000ca4 <main+0x840>)
 8000986:	2201      	movs	r2, #1
 8000988:	73da      	strb	r2, [r3, #15]
 800098a:	4bc6      	ldr	r3, [pc, #792]	; (8000ca4 <main+0x840>)
 800098c:	2200      	movs	r2, #0
 800098e:	75da      	strb	r2, [r3, #23]
 8000990:	4bc4      	ldr	r3, [pc, #784]	; (8000ca4 <main+0x840>)
 8000992:	2200      	movs	r2, #0
 8000994:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000996:	f7ff fc41 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 800099a:	206e      	movs	r0, #110	; 0x6e
 800099c:	f000 fd90 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b01000001;buff_data[24]=0b00000000;
 80009a0:	4bc0      	ldr	r3, [pc, #768]	; (8000ca4 <main+0x840>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	4bbf      	ldr	r3, [pc, #764]	; (8000ca4 <main+0x840>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	721a      	strb	r2, [r3, #8]
 80009ac:	4bbd      	ldr	r3, [pc, #756]	; (8000ca4 <main+0x840>)
 80009ae:	2241      	movs	r2, #65	; 0x41
 80009b0:	741a      	strb	r2, [r3, #16]
 80009b2:	4bbc      	ldr	r3, [pc, #752]	; (8000ca4 <main+0x840>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 80009b8:	4bba      	ldr	r3, [pc, #744]	; (8000ca4 <main+0x840>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	705a      	strb	r2, [r3, #1]
 80009be:	4bb9      	ldr	r3, [pc, #740]	; (8000ca4 <main+0x840>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	725a      	strb	r2, [r3, #9]
 80009c4:	4bb7      	ldr	r3, [pc, #732]	; (8000ca4 <main+0x840>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	745a      	strb	r2, [r3, #17]
 80009ca:	4bb6      	ldr	r3, [pc, #728]	; (8000ca4 <main+0x840>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 80009d0:	4bb4      	ldr	r3, [pc, #720]	; (8000ca4 <main+0x840>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
 80009d6:	4bb3      	ldr	r3, [pc, #716]	; (8000ca4 <main+0x840>)
 80009d8:	2220      	movs	r2, #32
 80009da:	729a      	strb	r2, [r3, #10]
 80009dc:	4bb1      	ldr	r3, [pc, #708]	; (8000ca4 <main+0x840>)
 80009de:	2200      	movs	r2, #0
 80009e0:	749a      	strb	r2, [r3, #18]
 80009e2:	4bb0      	ldr	r3, [pc, #704]	; (8000ca4 <main+0x840>)
 80009e4:	223c      	movs	r2, #60	; 0x3c
 80009e6:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100100;buff_data[27]=0b00100100;
 80009e8:	4bae      	ldr	r3, [pc, #696]	; (8000ca4 <main+0x840>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	70da      	strb	r2, [r3, #3]
 80009ee:	4bad      	ldr	r3, [pc, #692]	; (8000ca4 <main+0x840>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	72da      	strb	r2, [r3, #11]
 80009f4:	4bab      	ldr	r3, [pc, #684]	; (8000ca4 <main+0x840>)
 80009f6:	2224      	movs	r2, #36	; 0x24
 80009f8:	74da      	strb	r2, [r3, #19]
 80009fa:	4baa      	ldr	r3, [pc, #680]	; (8000ca4 <main+0x840>)
 80009fc:	2224      	movs	r2, #36	; 0x24
 80009fe:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00100000;buff_data[12]=0b00001000;buff_data[20]=0b00100100;buff_data[28]=0b00100100;
 8000a00:	4ba8      	ldr	r3, [pc, #672]	; (8000ca4 <main+0x840>)
 8000a02:	2220      	movs	r2, #32
 8000a04:	711a      	strb	r2, [r3, #4]
 8000a06:	4ba7      	ldr	r3, [pc, #668]	; (8000ca4 <main+0x840>)
 8000a08:	2208      	movs	r2, #8
 8000a0a:	731a      	strb	r2, [r3, #12]
 8000a0c:	4ba5      	ldr	r3, [pc, #660]	; (8000ca4 <main+0x840>)
 8000a0e:	2224      	movs	r2, #36	; 0x24
 8000a10:	751a      	strb	r2, [r3, #20]
 8000a12:	4ba4      	ldr	r3, [pc, #656]	; (8000ca4 <main+0x840>)
 8000a14:	2224      	movs	r2, #36	; 0x24
 8000a16:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000a18:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <main+0x840>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	715a      	strb	r2, [r3, #5]
 8000a1e:	4ba1      	ldr	r3, [pc, #644]	; (8000ca4 <main+0x840>)
 8000a20:	2204      	movs	r2, #4
 8000a22:	735a      	strb	r2, [r3, #13]
 8000a24:	4b9f      	ldr	r3, [pc, #636]	; (8000ca4 <main+0x840>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	755a      	strb	r2, [r3, #21]
 8000a2a:	4b9e      	ldr	r3, [pc, #632]	; (8000ca4 <main+0x840>)
 8000a2c:	223c      	movs	r2, #60	; 0x3c
 8000a2e:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000a30:	4b9c      	ldr	r3, [pc, #624]	; (8000ca4 <main+0x840>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	719a      	strb	r2, [r3, #6]
 8000a36:	4b9b      	ldr	r3, [pc, #620]	; (8000ca4 <main+0x840>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	739a      	strb	r2, [r3, #14]
 8000a3c:	4b99      	ldr	r3, [pc, #612]	; (8000ca4 <main+0x840>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	759a      	strb	r2, [r3, #22]
 8000a42:	4b98      	ldr	r3, [pc, #608]	; (8000ca4 <main+0x840>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000a48:	4b96      	ldr	r3, [pc, #600]	; (8000ca4 <main+0x840>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	71da      	strb	r2, [r3, #7]
 8000a4e:	4b95      	ldr	r3, [pc, #596]	; (8000ca4 <main+0x840>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	73da      	strb	r2, [r3, #15]
 8000a54:	4b93      	ldr	r3, [pc, #588]	; (8000ca4 <main+0x840>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	75da      	strb	r2, [r3, #23]
 8000a5a:	4b92      	ldr	r3, [pc, #584]	; (8000ca4 <main+0x840>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000a60:	f7ff fbdc 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000a64:	206e      	movs	r0, #110	; 0x6e
 8000a66:	f000 fd2b 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00100000;buff_data[8] =0b10000000;buff_data[16]=0b01000010;buff_data[24]=0b00000000;
 8000a6a:	4b8e      	ldr	r3, [pc, #568]	; (8000ca4 <main+0x840>)
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	4b8c      	ldr	r3, [pc, #560]	; (8000ca4 <main+0x840>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	721a      	strb	r2, [r3, #8]
 8000a76:	4b8b      	ldr	r3, [pc, #556]	; (8000ca4 <main+0x840>)
 8000a78:	2242      	movs	r2, #66	; 0x42
 8000a7a:	741a      	strb	r2, [r3, #16]
 8000a7c:	4b89      	ldr	r3, [pc, #548]	; (8000ca4 <main+0x840>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000a82:	4b88      	ldr	r3, [pc, #544]	; (8000ca4 <main+0x840>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	705a      	strb	r2, [r3, #1]
 8000a88:	4b86      	ldr	r3, [pc, #536]	; (8000ca4 <main+0x840>)
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	725a      	strb	r2, [r3, #9]
 8000a8e:	4b85      	ldr	r3, [pc, #532]	; (8000ca4 <main+0x840>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	745a      	strb	r2, [r3, #17]
 8000a94:	4b83      	ldr	r3, [pc, #524]	; (8000ca4 <main+0x840>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000a9a:	4b82      	ldr	r3, [pc, #520]	; (8000ca4 <main+0x840>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	709a      	strb	r2, [r3, #2]
 8000aa0:	4b80      	ldr	r3, [pc, #512]	; (8000ca4 <main+0x840>)
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	729a      	strb	r2, [r3, #10]
 8000aa6:	4b7f      	ldr	r3, [pc, #508]	; (8000ca4 <main+0x840>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	749a      	strb	r2, [r3, #18]
 8000aac:	4b7d      	ldr	r3, [pc, #500]	; (8000ca4 <main+0x840>)
 8000aae:	223c      	movs	r2, #60	; 0x3c
 8000ab0:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b00010000;buff_data[19]=0b00101000;buff_data[27]=0b00100100;
 8000ab2:	4b7c      	ldr	r3, [pc, #496]	; (8000ca4 <main+0x840>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	70da      	strb	r2, [r3, #3]
 8000ab8:	4b7a      	ldr	r3, [pc, #488]	; (8000ca4 <main+0x840>)
 8000aba:	2210      	movs	r2, #16
 8000abc:	72da      	strb	r2, [r3, #11]
 8000abe:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <main+0x840>)
 8000ac0:	2228      	movs	r2, #40	; 0x28
 8000ac2:	74da      	strb	r2, [r3, #19]
 8000ac4:	4b77      	ldr	r3, [pc, #476]	; (8000ca4 <main+0x840>)
 8000ac6:	2224      	movs	r2, #36	; 0x24
 8000ac8:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00101000;buff_data[28]=0b00100100;
 8000aca:	4b76      	ldr	r3, [pc, #472]	; (8000ca4 <main+0x840>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	711a      	strb	r2, [r3, #4]
 8000ad0:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <main+0x840>)
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	731a      	strb	r2, [r3, #12]
 8000ad6:	4b73      	ldr	r3, [pc, #460]	; (8000ca4 <main+0x840>)
 8000ad8:	2228      	movs	r2, #40	; 0x28
 8000ada:	751a      	strb	r2, [r3, #20]
 8000adc:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <main+0x840>)
 8000ade:	2224      	movs	r2, #36	; 0x24
 8000ae0:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000ae2:	4b70      	ldr	r3, [pc, #448]	; (8000ca4 <main+0x840>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	715a      	strb	r2, [r3, #5]
 8000ae8:	4b6e      	ldr	r3, [pc, #440]	; (8000ca4 <main+0x840>)
 8000aea:	2204      	movs	r2, #4
 8000aec:	735a      	strb	r2, [r3, #13]
 8000aee:	4b6d      	ldr	r3, [pc, #436]	; (8000ca4 <main+0x840>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	755a      	strb	r2, [r3, #21]
 8000af4:	4b6b      	ldr	r3, [pc, #428]	; (8000ca4 <main+0x840>)
 8000af6:	223c      	movs	r2, #60	; 0x3c
 8000af8:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b00000010;buff_data[22]=0b00100000;buff_data[30]=0b00000000;
 8000afa:	4b6a      	ldr	r3, [pc, #424]	; (8000ca4 <main+0x840>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	719a      	strb	r2, [r3, #6]
 8000b00:	4b68      	ldr	r3, [pc, #416]	; (8000ca4 <main+0x840>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	739a      	strb	r2, [r3, #14]
 8000b06:	4b67      	ldr	r3, [pc, #412]	; (8000ca4 <main+0x840>)
 8000b08:	2220      	movs	r2, #32
 8000b0a:	759a      	strb	r2, [r3, #22]
 8000b0c:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <main+0x840>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <main+0x840>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	71da      	strb	r2, [r3, #7]
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <main+0x840>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	73da      	strb	r2, [r3, #15]
 8000b1e:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <main+0x840>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	75da      	strb	r2, [r3, #23]
 8000b24:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <main+0x840>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000b2a:	f7ff fb77 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000b2e:	206e      	movs	r0, #110	; 0x6e
 8000b30:	f000 fcc6 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b01000100;buff_data[24]=0b00000000;
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <main+0x840>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <main+0x840>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	721a      	strb	r2, [r3, #8]
 8000b40:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <main+0x840>)
 8000b42:	2244      	movs	r2, #68	; 0x44
 8000b44:	741a      	strb	r2, [r3, #16]
 8000b46:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <main+0x840>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000b4c:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <main+0x840>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	705a      	strb	r2, [r3, #1]
 8000b52:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <main+0x840>)
 8000b54:	2240      	movs	r2, #64	; 0x40
 8000b56:	725a      	strb	r2, [r3, #9]
 8000b58:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <main+0x840>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	745a      	strb	r2, [r3, #17]
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <main+0x840>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00100000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000b64:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <main+0x840>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	709a      	strb	r2, [r3, #2]
 8000b6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ca4 <main+0x840>)
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	729a      	strb	r2, [r3, #10]
 8000b70:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <main+0x840>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	749a      	strb	r2, [r3, #18]
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <main+0x840>)
 8000b78:	223c      	movs	r2, #60	; 0x3c
 8000b7a:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00110000;buff_data[27]=0b00100100;
 8000b7c:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <main+0x840>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	70da      	strb	r2, [r3, #3]
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <main+0x840>)
 8000b84:	2210      	movs	r2, #16
 8000b86:	72da      	strb	r2, [r3, #11]
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <main+0x840>)
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	74da      	strb	r2, [r3, #19]
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <main+0x840>)
 8000b90:	2224      	movs	r2, #36	; 0x24
 8000b92:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00110000;buff_data[28]=0b00100100;
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <main+0x840>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	711a      	strb	r2, [r3, #4]
 8000b9a:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <main+0x840>)
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	731a      	strb	r2, [r3, #12]
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <main+0x840>)
 8000ba2:	2230      	movs	r2, #48	; 0x30
 8000ba4:	751a      	strb	r2, [r3, #20]
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <main+0x840>)
 8000ba8:	2224      	movs	r2, #36	; 0x24
 8000baa:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <main+0x840>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	715a      	strb	r2, [r3, #5]
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <main+0x840>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	735a      	strb	r2, [r3, #13]
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <main+0x840>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	755a      	strb	r2, [r3, #21]
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <main+0x840>)
 8000bc0:	223c      	movs	r2, #60	; 0x3c
 8000bc2:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <main+0x840>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	719a      	strb	r2, [r3, #6]
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <main+0x840>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	739a      	strb	r2, [r3, #14]
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <main+0x840>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	759a      	strb	r2, [r3, #22]
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <main+0x840>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <main+0x840>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	71da      	strb	r2, [r3, #7]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <main+0x840>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	73da      	strb	r2, [r3, #15]
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x840>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	75da      	strb	r2, [r3, #23]
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <main+0x840>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000bf4:	f7ff fb12 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000bf8:	206e      	movs	r0, #110	; 0x6e
 8000bfa:	f000 fc61 	bl	80014c0 <HAL_Delay>


    buff_data[0]=0b00000000;buff_data[8] =0b00000000;buff_data[16]=0b01001000;buff_data[24]=0b00000000;
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <main+0x840>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <main+0x840>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	721a      	strb	r2, [r3, #8]
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <main+0x840>)
 8000c0c:	2248      	movs	r2, #72	; 0x48
 8000c0e:	741a      	strb	r2, [r3, #16]
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <main+0x840>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <main+0x840>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	705a      	strb	r2, [r3, #1]
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <main+0x840>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	725a      	strb	r2, [r3, #9]
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <main+0x840>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	745a      	strb	r2, [r3, #17]
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <main+0x840>)
 8000c2a:	227e      	movs	r2, #126	; 0x7e
 8000c2c:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <main+0x840>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	709a      	strb	r2, [r3, #2]
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <main+0x840>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	729a      	strb	r2, [r3, #10]
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <main+0x840>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	749a      	strb	r2, [r3, #18]
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <main+0x840>)
 8000c42:	2242      	movs	r2, #66	; 0x42
 8000c44:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b00000000;buff_data[27]=0b01000010;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <main+0x840>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	70da      	strb	r2, [r3, #3]
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <main+0x840>)
 8000c4e:	22ff      	movs	r2, #255	; 0xff
 8000c50:	72da      	strb	r2, [r3, #11]
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <main+0x840>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	74da      	strb	r2, [r3, #19]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <main+0x840>)
 8000c5a:	2242      	movs	r2, #66	; 0x42
 8000c5c:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00000000;buff_data[28]=0b01000010;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <main+0x840>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <main+0x840>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	731a      	strb	r2, [r3, #12]
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <main+0x840>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	751a      	strb	r2, [r3, #20]
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <main+0x840>)
 8000c72:	2242      	movs	r2, #66	; 0x42
 8000c74:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <main+0x840>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	715a      	strb	r2, [r3, #5]
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <main+0x840>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	735a      	strb	r2, [r3, #13]
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <main+0x840>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	755a      	strb	r2, [r3, #21]
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <main+0x840>)
 8000c8a:	2242      	movs	r2, #66	; 0x42
 8000c8c:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <main+0x840>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	719a      	strb	r2, [r3, #6]
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <main+0x840>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	739a      	strb	r2, [r3, #14]
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <main+0x840>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	759a      	strb	r2, [r3, #22]
 8000ca0:	e002      	b.n	8000ca8 <main+0x844>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	20000068 	.word	0x20000068
 8000ca8:	4bfe      	ldr	r3, [pc, #1016]	; (80010a4 <main+0xc40>)
 8000caa:	227e      	movs	r2, #126	; 0x7e
 8000cac:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000001;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000cae:	4bfd      	ldr	r3, [pc, #1012]	; (80010a4 <main+0xc40>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	71da      	strb	r2, [r3, #7]
 8000cb4:	4bfb      	ldr	r3, [pc, #1004]	; (80010a4 <main+0xc40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	73da      	strb	r2, [r3, #15]
 8000cba:	4bfa      	ldr	r3, [pc, #1000]	; (80010a4 <main+0xc40>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	75da      	strb	r2, [r3, #23]
 8000cc0:	4bf8      	ldr	r3, [pc, #992]	; (80010a4 <main+0xc40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000cc6:	f7ff faa9 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000cca:	206e      	movs	r0, #110	; 0x6e
 8000ccc:	f000 fbf8 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00000000;buff_data[8] =0b00000000;buff_data[16]=0b01010000;buff_data[24]=0b00000000;
 8000cd0:	4bf4      	ldr	r3, [pc, #976]	; (80010a4 <main+0xc40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	4bf3      	ldr	r3, [pc, #972]	; (80010a4 <main+0xc40>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	721a      	strb	r2, [r3, #8]
 8000cdc:	4bf1      	ldr	r3, [pc, #964]	; (80010a4 <main+0xc40>)
 8000cde:	2250      	movs	r2, #80	; 0x50
 8000ce0:	741a      	strb	r2, [r3, #16]
 8000ce2:	4bf0      	ldr	r3, [pc, #960]	; (80010a4 <main+0xc40>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000ce8:	4bee      	ldr	r3, [pc, #952]	; (80010a4 <main+0xc40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	705a      	strb	r2, [r3, #1]
 8000cee:	4bed      	ldr	r3, [pc, #948]	; (80010a4 <main+0xc40>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	725a      	strb	r2, [r3, #9]
 8000cf4:	4beb      	ldr	r3, [pc, #940]	; (80010a4 <main+0xc40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	745a      	strb	r2, [r3, #17]
 8000cfa:	4bea      	ldr	r3, [pc, #936]	; (80010a4 <main+0xc40>)
 8000cfc:	227e      	movs	r2, #126	; 0x7e
 8000cfe:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000d00:	4be8      	ldr	r3, [pc, #928]	; (80010a4 <main+0xc40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	709a      	strb	r2, [r3, #2]
 8000d06:	4be7      	ldr	r3, [pc, #924]	; (80010a4 <main+0xc40>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	729a      	strb	r2, [r3, #10]
 8000d0c:	4be5      	ldr	r3, [pc, #916]	; (80010a4 <main+0xc40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	749a      	strb	r2, [r3, #18]
 8000d12:	4be4      	ldr	r3, [pc, #912]	; (80010a4 <main+0xc40>)
 8000d14:	2242      	movs	r2, #66	; 0x42
 8000d16:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b00100000;buff_data[27]=0b01000010;
 8000d18:	4be2      	ldr	r3, [pc, #904]	; (80010a4 <main+0xc40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	70da      	strb	r2, [r3, #3]
 8000d1e:	4be1      	ldr	r3, [pc, #900]	; (80010a4 <main+0xc40>)
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	72da      	strb	r2, [r3, #11]
 8000d24:	4bdf      	ldr	r3, [pc, #892]	; (80010a4 <main+0xc40>)
 8000d26:	2220      	movs	r2, #32
 8000d28:	74da      	strb	r2, [r3, #19]
 8000d2a:	4bde      	ldr	r3, [pc, #888]	; (80010a4 <main+0xc40>)
 8000d2c:	2242      	movs	r2, #66	; 0x42
 8000d2e:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00100000;buff_data[12]=0b00000000;buff_data[20]=0b00010000;buff_data[28]=0b01000010;
 8000d30:	4bdc      	ldr	r3, [pc, #880]	; (80010a4 <main+0xc40>)
 8000d32:	2220      	movs	r2, #32
 8000d34:	711a      	strb	r2, [r3, #4]
 8000d36:	4bdb      	ldr	r3, [pc, #876]	; (80010a4 <main+0xc40>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	731a      	strb	r2, [r3, #12]
 8000d3c:	4bd9      	ldr	r3, [pc, #868]	; (80010a4 <main+0xc40>)
 8000d3e:	2210      	movs	r2, #16
 8000d40:	751a      	strb	r2, [r3, #20]
 8000d42:	4bd8      	ldr	r3, [pc, #864]	; (80010a4 <main+0xc40>)
 8000d44:	2242      	movs	r2, #66	; 0x42
 8000d46:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000d48:	4bd6      	ldr	r3, [pc, #856]	; (80010a4 <main+0xc40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	715a      	strb	r2, [r3, #5]
 8000d4e:	4bd5      	ldr	r3, [pc, #852]	; (80010a4 <main+0xc40>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	735a      	strb	r2, [r3, #13]
 8000d54:	4bd3      	ldr	r3, [pc, #844]	; (80010a4 <main+0xc40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	755a      	strb	r2, [r3, #21]
 8000d5a:	4bd2      	ldr	r3, [pc, #840]	; (80010a4 <main+0xc40>)
 8000d5c:	2242      	movs	r2, #66	; 0x42
 8000d5e:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000d60:	4bd0      	ldr	r3, [pc, #832]	; (80010a4 <main+0xc40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	719a      	strb	r2, [r3, #6]
 8000d66:	4bcf      	ldr	r3, [pc, #828]	; (80010a4 <main+0xc40>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	739a      	strb	r2, [r3, #14]
 8000d6c:	4bcd      	ldr	r3, [pc, #820]	; (80010a4 <main+0xc40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	759a      	strb	r2, [r3, #22]
 8000d72:	4bcc      	ldr	r3, [pc, #816]	; (80010a4 <main+0xc40>)
 8000d74:	227e      	movs	r2, #126	; 0x7e
 8000d76:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000d78:	4bca      	ldr	r3, [pc, #808]	; (80010a4 <main+0xc40>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	71da      	strb	r2, [r3, #7]
 8000d7e:	4bc9      	ldr	r3, [pc, #804]	; (80010a4 <main+0xc40>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	73da      	strb	r2, [r3, #15]
 8000d84:	4bc7      	ldr	r3, [pc, #796]	; (80010a4 <main+0xc40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	75da      	strb	r2, [r3, #23]
 8000d8a:	4bc6      	ldr	r3, [pc, #792]	; (80010a4 <main+0xc40>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000d90:	f7ff fa44 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000d94:	206e      	movs	r0, #110	; 0x6e
 8000d96:	f000 fb93 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00110000;buff_data[8] =0b00000000;buff_data[16]=0b01100000;buff_data[24]=0b00000000;
 8000d9a:	4bc2      	ldr	r3, [pc, #776]	; (80010a4 <main+0xc40>)
 8000d9c:	2230      	movs	r2, #48	; 0x30
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	4bc0      	ldr	r3, [pc, #768]	; (80010a4 <main+0xc40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	721a      	strb	r2, [r3, #8]
 8000da6:	4bbf      	ldr	r3, [pc, #764]	; (80010a4 <main+0xc40>)
 8000da8:	2260      	movs	r2, #96	; 0x60
 8000daa:	741a      	strb	r2, [r3, #16]
 8000dac:	4bbd      	ldr	r3, [pc, #756]	; (80010a4 <main+0xc40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000db2:	4bbc      	ldr	r3, [pc, #752]	; (80010a4 <main+0xc40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	705a      	strb	r2, [r3, #1]
 8000db8:	4bba      	ldr	r3, [pc, #744]	; (80010a4 <main+0xc40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	725a      	strb	r2, [r3, #9]
 8000dbe:	4bb9      	ldr	r3, [pc, #740]	; (80010a4 <main+0xc40>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	745a      	strb	r2, [r3, #17]
 8000dc4:	4bb7      	ldr	r3, [pc, #732]	; (80010a4 <main+0xc40>)
 8000dc6:	227e      	movs	r2, #126	; 0x7e
 8000dc8:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000dca:	4bb6      	ldr	r3, [pc, #728]	; (80010a4 <main+0xc40>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]
 8000dd0:	4bb4      	ldr	r3, [pc, #720]	; (80010a4 <main+0xc40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	729a      	strb	r2, [r3, #10]
 8000dd6:	4bb3      	ldr	r3, [pc, #716]	; (80010a4 <main+0xc40>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	749a      	strb	r2, [r3, #18]
 8000ddc:	4bb1      	ldr	r3, [pc, #708]	; (80010a4 <main+0xc40>)
 8000dde:	2242      	movs	r2, #66	; 0x42
 8000de0:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b11111111;buff_data[19]=0b01100000;buff_data[27]=0b01000010;
 8000de2:	4bb0      	ldr	r3, [pc, #704]	; (80010a4 <main+0xc40>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	70da      	strb	r2, [r3, #3]
 8000de8:	4bae      	ldr	r3, [pc, #696]	; (80010a4 <main+0xc40>)
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	72da      	strb	r2, [r3, #11]
 8000dee:	4bad      	ldr	r3, [pc, #692]	; (80010a4 <main+0xc40>)
 8000df0:	2260      	movs	r2, #96	; 0x60
 8000df2:	74da      	strb	r2, [r3, #19]
 8000df4:	4bab      	ldr	r3, [pc, #684]	; (80010a4 <main+0xc40>)
 8000df6:	2242      	movs	r2, #66	; 0x42
 8000df8:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00011000;buff_data[28]=0b01000010;
 8000dfa:	4baa      	ldr	r3, [pc, #680]	; (80010a4 <main+0xc40>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
 8000e00:	4ba8      	ldr	r3, [pc, #672]	; (80010a4 <main+0xc40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	731a      	strb	r2, [r3, #12]
 8000e06:	4ba7      	ldr	r3, [pc, #668]	; (80010a4 <main+0xc40>)
 8000e08:	2218      	movs	r2, #24
 8000e0a:	751a      	strb	r2, [r3, #20]
 8000e0c:	4ba5      	ldr	r3, [pc, #660]	; (80010a4 <main+0xc40>)
 8000e0e:	2242      	movs	r2, #66	; 0x42
 8000e10:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000e12:	4ba4      	ldr	r3, [pc, #656]	; (80010a4 <main+0xc40>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	715a      	strb	r2, [r3, #5]
 8000e18:	4ba2      	ldr	r3, [pc, #648]	; (80010a4 <main+0xc40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	735a      	strb	r2, [r3, #13]
 8000e1e:	4ba1      	ldr	r3, [pc, #644]	; (80010a4 <main+0xc40>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	755a      	strb	r2, [r3, #21]
 8000e24:	4b9f      	ldr	r3, [pc, #636]	; (80010a4 <main+0xc40>)
 8000e26:	2242      	movs	r2, #66	; 0x42
 8000e28:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000e2a:	4b9e      	ldr	r3, [pc, #632]	; (80010a4 <main+0xc40>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	719a      	strb	r2, [r3, #6]
 8000e30:	4b9c      	ldr	r3, [pc, #624]	; (80010a4 <main+0xc40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	739a      	strb	r2, [r3, #14]
 8000e36:	4b9b      	ldr	r3, [pc, #620]	; (80010a4 <main+0xc40>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	759a      	strb	r2, [r3, #22]
 8000e3c:	4b99      	ldr	r3, [pc, #612]	; (80010a4 <main+0xc40>)
 8000e3e:	227e      	movs	r2, #126	; 0x7e
 8000e40:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000e42:	4b98      	ldr	r3, [pc, #608]	; (80010a4 <main+0xc40>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	71da      	strb	r2, [r3, #7]
 8000e48:	4b96      	ldr	r3, [pc, #600]	; (80010a4 <main+0xc40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	73da      	strb	r2, [r3, #15]
 8000e4e:	4b95      	ldr	r3, [pc, #596]	; (80010a4 <main+0xc40>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	75da      	strb	r2, [r3, #23]
 8000e54:	4b93      	ldr	r3, [pc, #588]	; (80010a4 <main+0xc40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000e5a:	f7ff f9df 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000e5e:	206e      	movs	r0, #110	; 0x6e
 8000e60:	f000 fb2e 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00010000;buff_data[8] =0b00000000;buff_data[16]=0b01100001;buff_data[24]=0b00000000;
 8000e64:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <main+0xc40>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <main+0xc40>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	721a      	strb	r2, [r3, #8]
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <main+0xc40>)
 8000e72:	2261      	movs	r2, #97	; 0x61
 8000e74:	741a      	strb	r2, [r3, #16]
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <main+0xc40>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000e7c:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <main+0xc40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	705a      	strb	r2, [r3, #1]
 8000e82:	4b88      	ldr	r3, [pc, #544]	; (80010a4 <main+0xc40>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	725a      	strb	r2, [r3, #9]
 8000e88:	4b86      	ldr	r3, [pc, #536]	; (80010a4 <main+0xc40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	745a      	strb	r2, [r3, #17]
 8000e8e:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <main+0xc40>)
 8000e90:	227e      	movs	r2, #126	; 0x7e
 8000e92:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000e94:	4b83      	ldr	r3, [pc, #524]	; (80010a4 <main+0xc40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	709a      	strb	r2, [r3, #2]
 8000e9a:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <main+0xc40>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	729a      	strb	r2, [r3, #10]
 8000ea0:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <main+0xc40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	749a      	strb	r2, [r3, #18]
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	; (80010a4 <main+0xc40>)
 8000ea8:	2242      	movs	r2, #66	; 0x42
 8000eaa:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b11100000;buff_data[27]=0b01000010;
 8000eac:	4b7d      	ldr	r3, [pc, #500]	; (80010a4 <main+0xc40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	70da      	strb	r2, [r3, #3]
 8000eb2:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <main+0xc40>)
 8000eb4:	22ff      	movs	r2, #255	; 0xff
 8000eb6:	72da      	strb	r2, [r3, #11]
 8000eb8:	4b7a      	ldr	r3, [pc, #488]	; (80010a4 <main+0xc40>)
 8000eba:	22e0      	movs	r2, #224	; 0xe0
 8000ebc:	74da      	strb	r2, [r3, #19]
 8000ebe:	4b79      	ldr	r3, [pc, #484]	; (80010a4 <main+0xc40>)
 8000ec0:	2242      	movs	r2, #66	; 0x42
 8000ec2:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00011100;buff_data[28]=0b01000010;
 8000ec4:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <main+0xc40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	711a      	strb	r2, [r3, #4]
 8000eca:	4b76      	ldr	r3, [pc, #472]	; (80010a4 <main+0xc40>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	731a      	strb	r2, [r3, #12]
 8000ed0:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <main+0xc40>)
 8000ed2:	221c      	movs	r2, #28
 8000ed4:	751a      	strb	r2, [r3, #20]
 8000ed6:	4b73      	ldr	r3, [pc, #460]	; (80010a4 <main+0xc40>)
 8000ed8:	2242      	movs	r2, #66	; 0x42
 8000eda:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000edc:	4b71      	ldr	r3, [pc, #452]	; (80010a4 <main+0xc40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	715a      	strb	r2, [r3, #5]
 8000ee2:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <main+0xc40>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	735a      	strb	r2, [r3, #13]
 8000ee8:	4b6e      	ldr	r3, [pc, #440]	; (80010a4 <main+0xc40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	755a      	strb	r2, [r3, #21]
 8000eee:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <main+0xc40>)
 8000ef0:	2242      	movs	r2, #66	; 0x42
 8000ef2:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000ef4:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <main+0xc40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	719a      	strb	r2, [r3, #6]
 8000efa:	4b6a      	ldr	r3, [pc, #424]	; (80010a4 <main+0xc40>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	739a      	strb	r2, [r3, #14]
 8000f00:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <main+0xc40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	759a      	strb	r2, [r3, #22]
 8000f06:	4b67      	ldr	r3, [pc, #412]	; (80010a4 <main+0xc40>)
 8000f08:	227e      	movs	r2, #126	; 0x7e
 8000f0a:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00010000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000f0c:	4b65      	ldr	r3, [pc, #404]	; (80010a4 <main+0xc40>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	71da      	strb	r2, [r3, #7]
 8000f12:	4b64      	ldr	r3, [pc, #400]	; (80010a4 <main+0xc40>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	73da      	strb	r2, [r3, #15]
 8000f18:	4b62      	ldr	r3, [pc, #392]	; (80010a4 <main+0xc40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	75da      	strb	r2, [r3, #23]
 8000f1e:	4b61      	ldr	r3, [pc, #388]	; (80010a4 <main+0xc40>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000f24:	f7ff f97a 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000f28:	206e      	movs	r0, #110	; 0x6e
 8000f2a:	f000 fac9 	bl	80014c0 <HAL_Delay>


    buff_data[0]=0b00000000;buff_data[8] =0b00000001;buff_data[16]=0b01100010;buff_data[24]=0b11111111;
 8000f2e:	4b5d      	ldr	r3, [pc, #372]	; (80010a4 <main+0xc40>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	4b5b      	ldr	r3, [pc, #364]	; (80010a4 <main+0xc40>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	721a      	strb	r2, [r3, #8]
 8000f3a:	4b5a      	ldr	r3, [pc, #360]	; (80010a4 <main+0xc40>)
 8000f3c:	2262      	movs	r2, #98	; 0x62
 8000f3e:	741a      	strb	r2, [r3, #16]
 8000f40:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <main+0xc40>)
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <main+0xc40>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	705a      	strb	r2, [r3, #1]
 8000f4c:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <main+0xc40>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	725a      	strb	r2, [r3, #9]
 8000f52:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <main+0xc40>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	745a      	strb	r2, [r3, #17]
 8000f58:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <main+0xc40>)
 8000f5a:	2281      	movs	r2, #129	; 0x81
 8000f5c:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00010000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <main+0xc40>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	709a      	strb	r2, [r3, #2]
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <main+0xc40>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	729a      	strb	r2, [r3, #10]
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <main+0xc40>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	749a      	strb	r2, [r3, #18]
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <main+0xc40>)
 8000f72:	2281      	movs	r2, #129	; 0x81
 8000f74:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b11100000;buff_data[27]=0b10000001;
 8000f76:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <main+0xc40>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	70da      	strb	r2, [r3, #3]
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <main+0xc40>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	72da      	strb	r2, [r3, #11]
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <main+0xc40>)
 8000f84:	22e0      	movs	r2, #224	; 0xe0
 8000f86:	74da      	strb	r2, [r3, #19]
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <main+0xc40>)
 8000f8a:	2281      	movs	r2, #129	; 0x81
 8000f8c:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00011110;buff_data[28]=0b10000001;
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <main+0xc40>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	711a      	strb	r2, [r3, #4]
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <main+0xc40>)
 8000f96:	2210      	movs	r2, #16
 8000f98:	731a      	strb	r2, [r3, #12]
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <main+0xc40>)
 8000f9c:	221e      	movs	r2, #30
 8000f9e:	751a      	strb	r2, [r3, #20]
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <main+0xc40>)
 8000fa2:	2281      	movs	r2, #129	; 0x81
 8000fa4:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <main+0xc40>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	715a      	strb	r2, [r3, #5]
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <main+0xc40>)
 8000fae:	2220      	movs	r2, #32
 8000fb0:	735a      	strb	r2, [r3, #13]
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <main+0xc40>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	755a      	strb	r2, [r3, #21]
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <main+0xc40>)
 8000fba:	2281      	movs	r2, #129	; 0x81
 8000fbc:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8000fbe:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <main+0xc40>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	719a      	strb	r2, [r3, #6]
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <main+0xc40>)
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	739a      	strb	r2, [r3, #14]
 8000fca:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <main+0xc40>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	759a      	strb	r2, [r3, #22]
 8000fd0:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <main+0xc40>)
 8000fd2:	2281      	movs	r2, #129	; 0x81
 8000fd4:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000001;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <main+0xc40>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	71da      	strb	r2, [r3, #7]
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <main+0xc40>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	73da      	strb	r2, [r3, #15]
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <main+0xc40>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	75da      	strb	r2, [r3, #23]
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <main+0xc40>)
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000fee:	f7ff f915 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8000ff2:	206e      	movs	r0, #110	; 0x6e
 8000ff4:	f000 fa64 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00000000;buff_data[8] =0b00000001;buff_data[16]=0b01100100;buff_data[24]=0b11111111;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <main+0xc40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <main+0xc40>)
 8001000:	2201      	movs	r2, #1
 8001002:	721a      	strb	r2, [r3, #8]
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <main+0xc40>)
 8001006:	2264      	movs	r2, #100	; 0x64
 8001008:	741a      	strb	r2, [r3, #16]
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <main+0xc40>)
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <main+0xc40>)
 8001012:	2200      	movs	r2, #0
 8001014:	705a      	strb	r2, [r3, #1]
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <main+0xc40>)
 8001018:	2202      	movs	r2, #2
 800101a:	725a      	strb	r2, [r3, #9]
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <main+0xc40>)
 800101e:	2200      	movs	r2, #0
 8001020:	745a      	strb	r2, [r3, #17]
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <main+0xc40>)
 8001024:	2281      	movs	r2, #129	; 0x81
 8001026:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <main+0xc40>)
 800102a:	2200      	movs	r2, #0
 800102c:	709a      	strb	r2, [r3, #2]
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <main+0xc40>)
 8001030:	2204      	movs	r2, #4
 8001032:	729a      	strb	r2, [r3, #10]
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <main+0xc40>)
 8001036:	2200      	movs	r2, #0
 8001038:	749a      	strb	r2, [r3, #18]
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <main+0xc40>)
 800103c:	2281      	movs	r2, #129	; 0x81
 800103e:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b11100000;buff_data[27]=0b10000001;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <main+0xc40>)
 8001042:	2200      	movs	r2, #0
 8001044:	70da      	strb	r2, [r3, #3]
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <main+0xc40>)
 8001048:	2208      	movs	r2, #8
 800104a:	72da      	strb	r2, [r3, #11]
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <main+0xc40>)
 800104e:	22e0      	movs	r2, #224	; 0xe0
 8001050:	74da      	strb	r2, [r3, #19]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <main+0xc40>)
 8001054:	2281      	movs	r2, #129	; 0x81
 8001056:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00111000;buff_data[12]=0b00010000;buff_data[20]=0b00011111;buff_data[28]=0b10000001;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <main+0xc40>)
 800105a:	2238      	movs	r2, #56	; 0x38
 800105c:	711a      	strb	r2, [r3, #4]
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0xc40>)
 8001060:	2210      	movs	r2, #16
 8001062:	731a      	strb	r2, [r3, #12]
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <main+0xc40>)
 8001066:	221f      	movs	r2, #31
 8001068:	751a      	strb	r2, [r3, #20]
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <main+0xc40>)
 800106c:	2281      	movs	r2, #129	; 0x81
 800106e:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <main+0xc40>)
 8001072:	2200      	movs	r2, #0
 8001074:	715a      	strb	r2, [r3, #5]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <main+0xc40>)
 8001078:	2220      	movs	r2, #32
 800107a:	735a      	strb	r2, [r3, #13]
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <main+0xc40>)
 800107e:	2200      	movs	r2, #0
 8001080:	755a      	strb	r2, [r3, #21]
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <main+0xc40>)
 8001084:	2281      	movs	r2, #129	; 0x81
 8001086:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <main+0xc40>)
 800108a:	2200      	movs	r2, #0
 800108c:	719a      	strb	r2, [r3, #6]
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <main+0xc40>)
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	739a      	strb	r2, [r3, #14]
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <main+0xc40>)
 8001096:	2200      	movs	r2, #0
 8001098:	759a      	strb	r2, [r3, #22]
 800109a:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <main+0xc40>)
 800109c:	2281      	movs	r2, #129	; 0x81
 800109e:	779a      	strb	r2, [r3, #30]
 80010a0:	e002      	b.n	80010a8 <main+0xc44>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000068 	.word	0x20000068
    buff_data[7]=0b10000000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 80010a8:	4b6e      	ldr	r3, [pc, #440]	; (8001264 <main+0xe00>)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	71da      	strb	r2, [r3, #7]
 80010ae:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <main+0xe00>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	73da      	strb	r2, [r3, #15]
 80010b4:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <main+0xe00>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	75da      	strb	r2, [r3, #23]
 80010ba:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <main+0xe00>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80010c0:	f7ff f8ac 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 80010c4:	206e      	movs	r0, #110	; 0x6e
 80010c6:	f000 f9fb 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00110000;buff_data[8] =0b00000001;buff_data[16]=0b01101000;buff_data[24]=0b11111111;
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <main+0xe00>)
 80010cc:	2230      	movs	r2, #48	; 0x30
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	4b64      	ldr	r3, [pc, #400]	; (8001264 <main+0xe00>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	721a      	strb	r2, [r3, #8]
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <main+0xe00>)
 80010d8:	2268      	movs	r2, #104	; 0x68
 80010da:	741a      	strb	r2, [r3, #16]
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <main+0xe00>)
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 80010e2:	4b60      	ldr	r3, [pc, #384]	; (8001264 <main+0xe00>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	705a      	strb	r2, [r3, #1]
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <main+0xe00>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	725a      	strb	r2, [r3, #9]
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <main+0xe00>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	745a      	strb	r2, [r3, #17]
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <main+0xe00>)
 80010f6:	2281      	movs	r2, #129	; 0x81
 80010f8:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 80010fa:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <main+0xe00>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	709a      	strb	r2, [r3, #2]
 8001100:	4b58      	ldr	r3, [pc, #352]	; (8001264 <main+0xe00>)
 8001102:	2204      	movs	r2, #4
 8001104:	729a      	strb	r2, [r3, #10]
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <main+0xe00>)
 8001108:	2200      	movs	r2, #0
 800110a:	749a      	strb	r2, [r3, #18]
 800110c:	4b55      	ldr	r3, [pc, #340]	; (8001264 <main+0xe00>)
 800110e:	2281      	movs	r2, #129	; 0x81
 8001110:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b01100000;buff_data[27]=0b10000001;
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <main+0xe00>)
 8001114:	2200      	movs	r2, #0
 8001116:	70da      	strb	r2, [r3, #3]
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <main+0xe00>)
 800111a:	2208      	movs	r2, #8
 800111c:	72da      	strb	r2, [r3, #11]
 800111e:	4b51      	ldr	r3, [pc, #324]	; (8001264 <main+0xe00>)
 8001120:	2260      	movs	r2, #96	; 0x60
 8001122:	74da      	strb	r2, [r3, #19]
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <main+0xe00>)
 8001126:	2281      	movs	r2, #129	; 0x81
 8001128:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00110000;buff_data[12]=0b00010000;buff_data[20]=0b00011110;buff_data[28]=0b10000001;
 800112a:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <main+0xe00>)
 800112c:	2230      	movs	r2, #48	; 0x30
 800112e:	711a      	strb	r2, [r3, #4]
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <main+0xe00>)
 8001132:	2210      	movs	r2, #16
 8001134:	731a      	strb	r2, [r3, #12]
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <main+0xe00>)
 8001138:	221e      	movs	r2, #30
 800113a:	751a      	strb	r2, [r3, #20]
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <main+0xe00>)
 800113e:	2281      	movs	r2, #129	; 0x81
 8001140:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <main+0xe00>)
 8001144:	2200      	movs	r2, #0
 8001146:	715a      	strb	r2, [r3, #5]
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <main+0xe00>)
 800114a:	2220      	movs	r2, #32
 800114c:	735a      	strb	r2, [r3, #13]
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <main+0xe00>)
 8001150:	2200      	movs	r2, #0
 8001152:	755a      	strb	r2, [r3, #21]
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <main+0xe00>)
 8001156:	2281      	movs	r2, #129	; 0x81
 8001158:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <main+0xe00>)
 800115c:	2204      	movs	r2, #4
 800115e:	719a      	strb	r2, [r3, #6]
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <main+0xe00>)
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	739a      	strb	r2, [r3, #14]
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <main+0xe00>)
 8001168:	2200      	movs	r2, #0
 800116a:	759a      	strb	r2, [r3, #22]
 800116c:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <main+0xe00>)
 800116e:	2281      	movs	r2, #129	; 0x81
 8001170:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <main+0xe00>)
 8001174:	2200      	movs	r2, #0
 8001176:	71da      	strb	r2, [r3, #7]
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <main+0xe00>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	73da      	strb	r2, [r3, #15]
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <main+0xe00>)
 8001180:	2200      	movs	r2, #0
 8001182:	75da      	strb	r2, [r3, #23]
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <main+0xe00>)
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	77da      	strb	r2, [r3, #31]
    build_buffer();
 800118a:	f7ff f847 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 800118e:	206e      	movs	r0, #110	; 0x6e
 8001190:	f000 f996 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00111000;buff_data[8] =0b00000001;buff_data[16]=0b01110000;buff_data[24]=0b11111111;
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <main+0xe00>)
 8001196:	2238      	movs	r2, #56	; 0x38
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <main+0xe00>)
 800119c:	2201      	movs	r2, #1
 800119e:	721a      	strb	r2, [r3, #8]
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <main+0xe00>)
 80011a2:	2270      	movs	r2, #112	; 0x70
 80011a4:	741a      	strb	r2, [r3, #16]
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <main+0xe00>)
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00001000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <main+0xe00>)
 80011ae:	2208      	movs	r2, #8
 80011b0:	705a      	strb	r2, [r3, #1]
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <main+0xe00>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	725a      	strb	r2, [r3, #9]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <main+0xe00>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	745a      	strb	r2, [r3, #17]
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <main+0xe00>)
 80011c0:	2281      	movs	r2, #129	; 0x81
 80011c2:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <main+0xe00>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	709a      	strb	r2, [r3, #2]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <main+0xe00>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	729a      	strb	r2, [r3, #10]
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <main+0xe00>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	749a      	strb	r2, [r3, #18]
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <main+0xe00>)
 80011d8:	2281      	movs	r2, #129	; 0x81
 80011da:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b00100000;buff_data[27]=0b10000001;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <main+0xe00>)
 80011de:	2200      	movs	r2, #0
 80011e0:	70da      	strb	r2, [r3, #3]
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <main+0xe00>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	72da      	strb	r2, [r3, #11]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <main+0xe00>)
 80011ea:	2220      	movs	r2, #32
 80011ec:	74da      	strb	r2, [r3, #19]
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <main+0xe00>)
 80011f0:	2281      	movs	r2, #129	; 0x81
 80011f2:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00011000;buff_data[12]=0b00010000;buff_data[20]=0b00011100;buff_data[28]=0b10000001;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0xe00>)
 80011f6:	2218      	movs	r2, #24
 80011f8:	711a      	strb	r2, [r3, #4]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <main+0xe00>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	731a      	strb	r2, [r3, #12]
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <main+0xe00>)
 8001202:	221c      	movs	r2, #28
 8001204:	751a      	strb	r2, [r3, #20]
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <main+0xe00>)
 8001208:	2281      	movs	r2, #129	; 0x81
 800120a:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0xe00>)
 800120e:	2208      	movs	r2, #8
 8001210:	715a      	strb	r2, [r3, #5]
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <main+0xe00>)
 8001214:	2220      	movs	r2, #32
 8001216:	735a      	strb	r2, [r3, #13]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <main+0xe00>)
 800121a:	2200      	movs	r2, #0
 800121c:	755a      	strb	r2, [r3, #21]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <main+0xe00>)
 8001220:	2281      	movs	r2, #129	; 0x81
 8001222:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <main+0xe00>)
 8001226:	2200      	movs	r2, #0
 8001228:	719a      	strb	r2, [r3, #6]
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <main+0xe00>)
 800122c:	2240      	movs	r2, #64	; 0x40
 800122e:	739a      	strb	r2, [r3, #14]
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <main+0xe00>)
 8001232:	2200      	movs	r2, #0
 8001234:	759a      	strb	r2, [r3, #22]
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <main+0xe00>)
 8001238:	2281      	movs	r2, #129	; 0x81
 800123a:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00010000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <main+0xe00>)
 800123e:	2210      	movs	r2, #16
 8001240:	71da      	strb	r2, [r3, #7]
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <main+0xe00>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	73da      	strb	r2, [r3, #15]
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <main+0xe00>)
 800124a:	2200      	movs	r2, #0
 800124c:	75da      	strb	r2, [r3, #23]
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <main+0xe00>)
 8001250:	22ff      	movs	r2, #255	; 0xff
 8001252:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8001254:	f7fe ffe2 	bl	800021c <build_buffer>
    HAL_Delay(ANIMDELAY);
 8001258:	206e      	movs	r0, #110	; 0x6e
 800125a:	f000 f931 	bl	80014c0 <HAL_Delay>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000001;buff_data[24]=0b00000000;
 800125e:	f7ff f986 	bl	800056e <main+0x10a>
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000068 	.word	0x20000068

08001268 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b093      	sub	sp, #76	; 0x4c
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	2410      	movs	r4, #16
 8001270:	193b      	adds	r3, r7, r4
 8001272:	0018      	movs	r0, r3
 8001274:	2338      	movs	r3, #56	; 0x38
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f000 ff05 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127e:	003b      	movs	r3, r7
 8001280:	0018      	movs	r0, r3
 8001282:	2310      	movs	r3, #16
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f000 fefe 	bl	8002088 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	0018      	movs	r0, r3
 8001292:	f000 f9eb 	bl	800166c <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001296:	193b      	adds	r3, r7, r4
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	193b      	adds	r3, r7, r4
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	2240      	movs	r2, #64	; 0x40
 80012ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 fa17 	bl	80016ec <HAL_RCC_OscConfig>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012c2:	f000 f819 	bl	80012f8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 80012c6:	003b      	movs	r3, r7
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012cc:	003b      	movs	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	003b      	movs	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	003b      	movs	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012de:	003b      	movs	r3, r7
 80012e0:	2100      	movs	r1, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fd22 	bl	8001d2c <HAL_RCC_ClockConfig>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80012ec:	f000 f804 	bl	80012f8 <Error_Handler>
  }
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b013      	add	sp, #76	; 0x4c
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <Error_Handler>:



void Error_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <HardFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 f8af 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <SystemInit+0x14>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	0512      	lsls	r2, r2, #20
 800134a:	609a      	str	r2, [r3, #8]
#endif
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800135a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800135c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800135e:	e003      	b.n	8001368 <LoopCopyDataInit>

08001360 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001362:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001364:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001366:	3104      	adds	r1, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopForever+0xa>)
  ldr r3, =_edata
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopForever+0xe>)
  adds r2, r0, r1
 800136c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001370:	d3f6      	bcc.n	8001360 <CopyDataInit>
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopForever+0x12>)
  b LoopFillZerobss
 8001374:	e002      	b.n	800137c <LoopFillZerobss>

08001376 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  str  r3, [r2]
 8001378:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137a:	3204      	adds	r2, #4

0800137c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <LoopForever+0x16>)
  cmp r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001380:	d3f9      	bcc.n	8001376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001382:	f7ff ffdd 	bl	8001340 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001386:	f000 fe5b 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138a:	f7ff f86b 	bl	8000464 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   r0, =_estack
 8001390:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001394:	080020f8 	.word	0x080020f8
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800139c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013a4:	2000008c 	.word	0x2000008c

080013a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_COMP_IRQHandler>
	...

080013ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_Init+0x3c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Init+0x3c>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	0049      	lsls	r1, r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	2003      	movs	r0, #3
 80013c8:	f000 f816 	bl	80013f8 <HAL_InitTick>
 80013cc:	1e03      	subs	r3, r0, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e001      	b.n	80013dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f000 f808 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40022000 	.word	0x40022000

080013ec <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	230f      	movs	r3, #15
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_InitTick+0x88>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d02b      	beq.n	8001468 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0x8c>)
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_InitTick+0x88>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0019      	movs	r1, r3
 800141a:	23fa      	movs	r3, #250	; 0xfa
 800141c:	0098      	lsls	r0, r3, #2
 800141e:	f7fe fe71 	bl	8000104 <__udivsi3>
 8001422:	0003      	movs	r3, r0
 8001424:	0019      	movs	r1, r3
 8001426:	0020      	movs	r0, r4
 8001428:	f7fe fe6c 	bl	8000104 <__udivsi3>
 800142c:	0003      	movs	r3, r0
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f90f 	bl	8001652 <HAL_SYSTICK_Config>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d112      	bne.n	800145e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d80a      	bhi.n	8001454 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2301      	movs	r3, #1
 8001442:	425b      	negs	r3, r3
 8001444:	2200      	movs	r2, #0
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f8ee 	bl	8001628 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_InitTick+0x90>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e00d      	b.n	8001470 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001454:	230f      	movs	r3, #15
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e008      	b.n	8001470 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145e:	230f      	movs	r3, #15
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	e003      	b.n	8001470 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001468:	230f      	movs	r3, #15
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001470:	230f      	movs	r3, #15
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b005      	add	sp, #20
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000008 	.word	0x20000008
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_IncTick+0x18>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_IncTick+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	18d2      	adds	r2, r2, r3
 800149a:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_IncTick+0x18>)
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000088 	.word	0x20000088
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	20000088 	.word	0x20000088

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fff0 	bl	80014ac <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	d004      	beq.n	80014e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_Delay+0x40>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	18d3      	adds	r3, r2, r3
 80014e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	f7ff ffe1 	bl	80014ac <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d8f7      	bhi.n	80014e6 <HAL_Delay+0x26>
  {
  }
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	20000008 	.word	0x20000008

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b7f      	cmp	r3, #127	; 0x7f
 8001518:	d828      	bhi.n	800156c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	33c0      	adds	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	589b      	ldr	r3, [r3, r2]
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0011      	movs	r1, r2
 8001530:	2203      	movs	r2, #3
 8001532:	400a      	ands	r2, r1
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	401a      	ands	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	2303      	movs	r3, #3
 8001552:	4003      	ands	r3, r0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	430a      	orrs	r2, r1
 8001564:	33c0      	adds	r3, #192	; 0xc0
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800156a:	e031      	b.n	80015d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <__NVIC_SetPriority+0xd8>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0019      	movs	r1, r3
 8001574:	230f      	movs	r3, #15
 8001576:	400b      	ands	r3, r1
 8001578:	3b08      	subs	r3, #8
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3306      	adds	r3, #6
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	0011      	movs	r1, r2
 800158c:	2203      	movs	r2, #3
 800158e:	400a      	ands	r2, r1
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	21ff      	movs	r1, #255	; 0xff
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	401a      	ands	r2, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	2303      	movs	r3, #3
 80015ae:	4003      	ands	r3, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	001c      	movs	r4, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	4023      	ands	r3, r4
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	430a      	orrs	r2, r1
 80015c6:	3306      	adds	r3, #6
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	18c3      	adds	r3, r0, r3
 80015cc:	3304      	adds	r3, #4
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b003      	add	sp, #12
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <SysTick_Config+0x40>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e010      	b.n	8001618 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <SysTick_Config+0x44>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	3a01      	subs	r2, #1
 80015fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	2301      	movs	r3, #1
 8001600:	425b      	negs	r3, r3
 8001602:	2103      	movs	r1, #3
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff7d 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SysTick_Config+0x44>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x44>)
 8001612:	2207      	movs	r2, #7
 8001614:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}
 8001620:	00ffffff 	.word	0x00ffffff
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	210f      	movs	r1, #15
 8001634:	187b      	adds	r3, r7, r1
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	187b      	adds	r3, r7, r1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	0011      	movs	r1, r2
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ffbf 	bl	80015e0 <SysTick_Config>
 8001662:	0003      	movs	r3, r0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800167a:	4013      	ands	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d11f      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	0013      	movs	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	189b      	adds	r3, r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4912      	ldr	r1, [pc, #72]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f7fe fd30 	bl	8000104 <__udivsi3>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016aa:	e008      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e001      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e009      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	401a      	ands	r2, r3
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d0ed      	beq.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40007000 	.word	0x40007000
 80016e0:	fffff9ff 	.word	0xfffff9ff
 80016e4:	20000000 	.word	0x20000000
 80016e8:	000f4240 	.word	0x000f4240

080016ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e304      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x1e>
 8001708:	e07c      	b.n	8001804 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4bc3      	ldr	r3, [pc, #780]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2238      	movs	r2, #56	; 0x38
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001714:	4bc0      	ldr	r3, [pc, #768]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2203      	movs	r2, #3
 800171a:	4013      	ands	r3, r2
 800171c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b10      	cmp	r3, #16
 8001722:	d102      	bne.n	800172a <HAL_RCC_OscConfig+0x3e>
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d002      	beq.n	8001730 <HAL_RCC_OscConfig+0x44>
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d10b      	bne.n	8001748 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	4bb9      	ldr	r3, [pc, #740]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d062      	beq.n	8001802 <HAL_RCC_OscConfig+0x116>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d15e      	bne.n	8001802 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e2df      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
 8001754:	4bb0      	ldr	r3, [pc, #704]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4baf      	ldr	r3, [pc, #700]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0249      	lsls	r1, r1, #9
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e020      	b.n	80017a6 <HAL_RCC_OscConfig+0xba>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	23a0      	movs	r3, #160	; 0xa0
 800176a:	02db      	lsls	r3, r3, #11
 800176c:	429a      	cmp	r2, r3
 800176e:	d10e      	bne.n	800178e <HAL_RCC_OscConfig+0xa2>
 8001770:	4ba9      	ldr	r3, [pc, #676]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4ba8      	ldr	r3, [pc, #672]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	02c9      	lsls	r1, r1, #11
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	4ba6      	ldr	r3, [pc, #664]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4ba5      	ldr	r3, [pc, #660]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0249      	lsls	r1, r1, #9
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e00b      	b.n	80017a6 <HAL_RCC_OscConfig+0xba>
 800178e:	4ba2      	ldr	r3, [pc, #648]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4ba1      	ldr	r3, [pc, #644]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001794:	49a1      	ldr	r1, [pc, #644]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001796:	400a      	ands	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	4b9f      	ldr	r3, [pc, #636]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b9e      	ldr	r3, [pc, #632]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	499f      	ldr	r1, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x334>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d014      	beq.n	80017d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff fe7d 	bl	80014ac <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fe78 	bl	80014ac <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e29e      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ca:	4b93      	ldr	r3, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 80017d6:	e015      	b.n	8001804 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fe68 	bl	80014ac <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e2:	f7ff fe63 	bl	80014ac <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e289      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f4:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0xf6>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d100      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
 800180e:	e099      	b.n	8001944 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001810:	4b81      	ldr	r3, [pc, #516]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2238      	movs	r2, #56	; 0x38
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0x144>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d002      	beq.n	8001836 <HAL_RCC_OscConfig+0x14a>
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d135      	bne.n	80018a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001836:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4013      	ands	r3, r2
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x162>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e25c      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a74      	ldr	r2, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x338>)
 8001854:	4013      	ands	r3, r2
 8001856:	0019      	movs	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	021a      	lsls	r2, r3, #8
 800185e:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800186a:	4b6b      	ldr	r3, [pc, #428]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x33c>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800187e:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0adb      	lsrs	r3, r3, #11
 8001884:	2207      	movs	r2, #7
 8001886:	4013      	ands	r3, r2
 8001888:	4a68      	ldr	r2, [pc, #416]	; (8001a2c <HAL_RCC_OscConfig+0x340>)
 800188a:	40da      	lsrs	r2, r3
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x344>)
 800188e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001890:	4b68      	ldr	r3, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x348>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fdaf 	bl	80013f8 <HAL_InitTick>
 800189a:	1e03      	subs	r3, r0, #0
 800189c:	d051      	beq.n	8001942 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e232      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d030      	beq.n	800190c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5e      	ldr	r2, [pc, #376]	; (8001a28 <HAL_RCC_OscConfig+0x33c>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018be:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0049      	lsls	r1, r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fdee 	bl	80014ac <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fde9 	bl	80014ac <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e20f      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x338>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	021a      	lsls	r2, r3, #8
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	e01b      	b.n	8001944 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001912:	4949      	ldr	r1, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x34c>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fdc8 	bl	80014ac <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fdc3 	bl	80014ac <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1e9      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4013      	ands	r3, r2
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x236>
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001942:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2208      	movs	r2, #8
 800194a:	4013      	ands	r3, r2
 800194c:	d047      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2238      	movs	r2, #56	; 0x38
 8001954:	4013      	ands	r3, r2
 8001956:	2b18      	cmp	r3, #24
 8001958:	d10a      	bne.n	8001970 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	2202      	movs	r2, #2
 8001960:	4013      	ands	r3, r2
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d138      	bne.n	80019de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e1cb      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800197a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fd92 	bl	80014ac <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fd8d 	bl	80014ac <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1b3      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x2a2>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fd78 	bl	80014ac <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fd73 	bl	80014ac <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e199      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x2fe>
 80019e8:	e0c6      	b.n	8001b78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	231f      	movs	r3, #31
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2238      	movs	r2, #56	; 0x38
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d11e      	bne.n	8001a3c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2202      	movs	r2, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31e>
 8001a08:	e0b6      	b.n	8001b78 <HAL_RCC_OscConfig+0x48c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d000      	beq.n	8001a14 <HAL_RCC_OscConfig+0x328>
 8001a12:	e0b1      	b.n	8001b78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e177      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffeffff 	.word	0xfffeffff
 8001a20:	fffbffff 	.word	0xfffbffff
 8001a24:	ffff80ff 	.word	0xffff80ff
 8001a28:	ffffc7ff 	.word	0xffffc7ff
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004
 8001a38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a3c:	4bb4      	ldr	r3, [pc, #720]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x360>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x362>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d011      	beq.n	8001a76 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4baf      	ldr	r3, [pc, #700]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a56:	4bae      	ldr	r3, [pc, #696]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0549      	lsls	r1, r1, #21
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a60:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	055b      	lsls	r3, r3, #21
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a6e:	231f      	movs	r3, #31
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4ba7      	ldr	r3, [pc, #668]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a82:	4ba4      	ldr	r3, [pc, #656]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0049      	lsls	r1, r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fd0c 	bl	80014ac <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff fd07 	bl	80014ac <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e12d      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	4b99      	ldr	r3, [pc, #612]	; (8001d14 <HAL_RCC_OscConfig+0x628>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x3e2>
 8001ac0:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x404>
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ada:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001adc:	2104      	movs	r1, #4
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ae4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae6:	4b8a      	ldr	r3, [pc, #552]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
 8001af0:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af4:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	438a      	bics	r2, r1
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001afc:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001afe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b00:	4b83      	ldr	r3, [pc, #524]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b02:	2104      	movs	r1, #4
 8001b04:	438a      	bics	r2, r1
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d014      	beq.n	8001b3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fccc 	bl	80014ac <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fcc7 	bl	80014ac <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a7c      	ldr	r2, [pc, #496]	; (8001d18 <HAL_RCC_OscConfig+0x62c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0ec      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x42e>
 8001b38:	e013      	b.n	8001b62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fcb7 	bl	80014ac <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b42:	e009      	b.n	8001b58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff fcb2 	bl	80014ac <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	4a72      	ldr	r2, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x62c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e0d7      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b58:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b62:	231f      	movs	r3, #31
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b72:	496a      	ldr	r1, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x630>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_OscConfig+0x496>
 8001b80:	e0c1      	b.n	8001d06 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2238      	movs	r2, #56	; 0x38
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d100      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4a4>
 8001b8e:	e081      	b.n	8001c94 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d156      	bne.n	8001c46 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b5c      	ldr	r3, [pc, #368]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001b9e:	4960      	ldr	r1, [pc, #384]	; (8001d20 <HAL_RCC_OscConfig+0x634>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc82 	bl	80014ac <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fc7d 	bl	80014ac <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0a3      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	049b      	lsls	r3, r3, #18
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_RCC_OscConfig+0x638>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	4b45      	ldr	r3, [pc, #276]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0449      	lsls	r1, r1, #17
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc46 	bl	80014ac <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fc41 	bl	80014ac <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e067      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	049b      	lsls	r3, r3, #18
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x53a>
 8001c44:	e05f      	b.n	8001d06 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c4c:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCC_OscConfig+0x634>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c52:	4b2f      	ldr	r3, [pc, #188]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c58:	2103      	movs	r1, #3
 8001c5a:	438a      	bics	r2, r1
 8001c5c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c64:	4930      	ldr	r1, [pc, #192]	; (8001d28 <HAL_RCC_OscConfig+0x63c>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fc1f 	bl	80014ac <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff fc1a 	bl	80014ac <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e040      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	049b      	lsls	r3, r3, #18
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x588>
 8001c92:	e038      	b.n	8001d06 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e033      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x624>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d126      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2270      	movs	r2, #112	; 0x70
 8001cb8:	401a      	ands	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d11f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	23fe      	movs	r3, #254	; 0xfe
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	401a      	ands	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	23f8      	movs	r3, #248	; 0xf8
 8001cd8:	039b      	lsls	r3, r3, #14
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10e      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	23e0      	movs	r3, #224	; 0xe0
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	0f5b      	lsrs	r3, r3, #29
 8001cf8:	075a      	lsls	r2, r3, #29
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b008      	add	sp, #32
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	00001388 	.word	0x00001388
 8001d1c:	efffffff 	.word	0xefffffff
 8001d20:	feffffff 	.word	0xfeffffff
 8001d24:	11c1808c 	.word	0x11c1808c
 8001d28:	eefeffff 	.word	0xeefeffff

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0e9      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2207      	movs	r2, #7
 8001d46:	4013      	ands	r3, r2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d91e      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2207      	movs	r2, #7
 8001d54:	4393      	bics	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fba4 	bl	80014ac <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d68:	e009      	b.n	8001d7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff fb9f 	bl	80014ac <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_RCC_ClockConfig+0x1f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0ca      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2207      	movs	r2, #7
 8001d84:	4013      	ands	r3, r2
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d006      	beq.n	8001dae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001da0:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001da6:	21e0      	movs	r1, #224	; 0xe0
 8001da8:	01c9      	lsls	r1, r1, #7
 8001daa:	430a      	orrs	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_ClockConfig+0x1fc>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d057      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d12b      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e097      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	049b      	lsls	r3, r3, #18
 8001df4:	4013      	ands	r3, r2
 8001df6:	d11f      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e08b      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d113      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e07f      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1c:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e074      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e06d      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4393      	bics	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fb2e 	bl	80014ac <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7ff fb29 	bl	80014ac <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_RCC_ClockConfig+0x1f4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e054      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2238      	movs	r2, #56	; 0x38
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1ec      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2207      	movs	r2, #7
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d21e      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2207      	movs	r2, #7
 8001e90:	4393      	bics	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff fb06 	bl	80014ac <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea4:	e009      	b.n	8001eba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f7ff fb01 	bl	80014ac <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_RCC_ClockConfig+0x1f4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e02c      	b.n	8001f14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_RCC_ClockConfig+0x200>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ee6:	f000 f829 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001eea:	0001      	movs	r1, r0
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_RCC_ClockConfig+0x204>)
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	58d3      	ldr	r3, [r2, r3]
 8001efc:	221f      	movs	r2, #31
 8001efe:	4013      	ands	r3, r2
 8001f00:	000a      	movs	r2, r1
 8001f02:	40da      	lsrs	r2, r3
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x208>)
 8001f06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x20c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fa73 	bl	80013f8 <HAL_InitTick>
 8001f12:	0003      	movs	r3, r0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	00001388 	.word	0x00001388
 8001f24:	40021000 	.word	0x40021000
 8001f28:	fffff0ff 	.word	0xfffff0ff
 8001f2c:	ffff8fff 	.word	0xffff8fff
 8001f30:	080020b0 	.word	0x080020b0
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d10f      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f4c:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0adb      	lsrs	r3, r3, #11
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	4835      	ldr	r0, [pc, #212]	; (8002038 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f62:	f7fe f8cf 	bl	8000104 <__udivsi3>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e05d      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f6c:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2238      	movs	r2, #56	; 0x38
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_GetSysClockFreq+0x100>)
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e054      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d138      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4824      	ldr	r0, [pc, #144]	; (800203c <HAL_RCC_GetSysClockFreq+0x100>)
 8001fac:	f7fe f8aa 	bl	8000104 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	227f      	movs	r2, #127	; 0x7f
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	434b      	muls	r3, r1
 8001fc0:	617b      	str	r3, [r7, #20]
        break;
 8001fc2:	e00d      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	481c      	ldr	r0, [pc, #112]	; (8002038 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fc8:	f7fe f89c 	bl	8000104 <__udivsi3>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	0019      	movs	r1, r3
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	227f      	movs	r2, #127	; 0x7f
 8001fd8:	4013      	ands	r3, r2
 8001fda:	434b      	muls	r3, r1
 8001fdc:	617b      	str	r3, [r7, #20]
        break;
 8001fde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0f5b      	lsrs	r3, r3, #29
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	f7fe f887 	bl	8000104 <__udivsi3>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e015      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2238      	movs	r2, #56	; 0x38
 8002002:	4013      	ands	r3, r2
 8002004:	2b20      	cmp	r3, #32
 8002006:	d103      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2238      	movs	r2, #56	; 0x38
 8002016:	4013      	ands	r3, r2
 8002018:	2b18      	cmp	r3, #24
 800201a:	d103      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800201c:	23fa      	movs	r3, #250	; 0xfa
 800201e:	01db      	lsls	r3, r3, #7
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e001      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002028:	693b      	ldr	r3, [r7, #16]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b006      	add	sp, #24
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	00f42400 	.word	0x00f42400
 800203c:	007a1200 	.word	0x007a1200

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	2600      	movs	r6, #0
 8002044:	4d0c      	ldr	r5, [pc, #48]	; (8002078 <__libc_init_array+0x38>)
 8002046:	4c0d      	ldr	r4, [pc, #52]	; (800207c <__libc_init_array+0x3c>)
 8002048:	1b64      	subs	r4, r4, r5
 800204a:	10a4      	asrs	r4, r4, #2
 800204c:	42a6      	cmp	r6, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	2600      	movs	r6, #0
 8002052:	f000 f821 	bl	8002098 <_init>
 8002056:	4d0a      	ldr	r5, [pc, #40]	; (8002080 <__libc_init_array+0x40>)
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <__libc_init_array+0x44>)
 800205a:	1b64      	subs	r4, r4, r5
 800205c:	10a4      	asrs	r4, r4, #2
 800205e:	42a6      	cmp	r6, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	00b3      	lsls	r3, r6, #2
 8002066:	58eb      	ldr	r3, [r5, r3]
 8002068:	4798      	blx	r3
 800206a:	3601      	adds	r6, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	00b3      	lsls	r3, r6, #2
 8002070:	58eb      	ldr	r3, [r5, r3]
 8002072:	4798      	blx	r3
 8002074:	3601      	adds	r6, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	080020f0 	.word	0x080020f0
 800207c:	080020f0 	.word	0x080020f0
 8002080:	080020f0 	.word	0x080020f0
 8002084:	080020f4 	.word	0x080020f4

08002088 <memset>:
 8002088:	0003      	movs	r3, r0
 800208a:	1812      	adds	r2, r2, r0
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	7019      	strb	r1, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr

080020a4 <_fini>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr
