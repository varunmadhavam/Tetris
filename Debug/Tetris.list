
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e0  080018e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e4  080018e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080018f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080018f4  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c67  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013e0  00000000  00000000  00024c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  00026080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000480  00000000  00000000  000265c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015fe6  00000000  00000000  00026a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005bd1  00000000  00000000  0003ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008941d  00000000  00000000  000425ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cba1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001048  00000000  00000000  000cba98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001888 	.word	0x08001888

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001888 	.word	0x08001888

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <printBuffer>:
#include "ascii.h"
#include <string.h>

uint8_t max_7219_buffer[MAX_DEVICES][8];

void printBuffer(void) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
	uint16_t data[MAX_DEVICES];
	for(uint8_t i=1;i<=8;i++){
 8000222:	230f      	movs	r3, #15
 8000224:	18fb      	adds	r3, r7, r3
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e030      	b.n	800028e <printBuffer+0x72>
		for(uint8_t j=0;j<MAX_DEVICES;j++){
 800022c:	230e      	movs	r3, #14
 800022e:	18fb      	adds	r3, r7, r3
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	e01c      	b.n	8000270 <printBuffer+0x54>
			data[j]=((uint16_t)(i<<8))|(max_7219_buffer[j][i-1]);
 8000236:	200f      	movs	r0, #15
 8000238:	183b      	adds	r3, r7, r0
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b29b      	uxth	r3, r3
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	b299      	uxth	r1, r3
 8000242:	240e      	movs	r4, #14
 8000244:	193b      	adds	r3, r7, r4
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	183b      	adds	r3, r7, r0
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <printBuffer+0x84>)
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	1882      	adds	r2, r0, r2
 8000254:	5cd3      	ldrb	r3, [r2, r3]
 8000256:	b29b      	uxth	r3, r3
 8000258:	193a      	adds	r2, r7, r4
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	430b      	orrs	r3, r1
 800025e:	b299      	uxth	r1, r3
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	0052      	lsls	r2, r2, #1
 8000264:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++){
 8000266:	193b      	adds	r3, r7, r4
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	193b      	adds	r3, r7, r4
 800026c:	3201      	adds	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	230e      	movs	r3, #14
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b03      	cmp	r3, #3
 8000278:	d9dd      	bls.n	8000236 <printBuffer+0x1a>
		}
		max_send_data_r(data);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f9cd 	bl	800061c <max_send_data_r>
	for(uint8_t i=1;i<=8;i++){
 8000282:	210f      	movs	r1, #15
 8000284:	187b      	adds	r3, r7, r1
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	187b      	adds	r3, r7, r1
 800028a:	3201      	adds	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	230f      	movs	r3, #15
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b08      	cmp	r3, #8
 8000296:	d9c9      	bls.n	800022c <printBuffer+0x10>
	}
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b005      	add	sp, #20
 800029e:	bd90      	pop	{r4, r7, pc}
 80002a0:	2000002c 	.word	0x2000002c

080002a4 <updateBuffer>:

void updateBuffer(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	initBuffer();
 80002a8:	f000 f854 	bl	8000354 <initBuffer>
	max_7219_buffer[i][0]=0b11000000;
 80002ac:	4b27      	ldr	r3, [pc, #156]	; (800034c <updateBuffer+0xa8>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	001a      	movs	r2, r3
 80002b2:	4b27      	ldr	r3, [pc, #156]	; (8000350 <updateBuffer+0xac>)
 80002b4:	00d2      	lsls	r2, r2, #3
 80002b6:	21c0      	movs	r1, #192	; 0xc0
 80002b8:	54d1      	strb	r1, [r2, r3]
	max_7219_buffer[i][1]=0b11000000;
 80002ba:	4b24      	ldr	r3, [pc, #144]	; (800034c <updateBuffer+0xa8>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4a24      	ldr	r2, [pc, #144]	; (8000350 <updateBuffer+0xac>)
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	18d3      	adds	r3, r2, r3
 80002c4:	3301      	adds	r3, #1
 80002c6:	22c0      	movs	r2, #192	; 0xc0
 80002c8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][2]=0b11000000;
 80002ca:	4b20      	ldr	r3, [pc, #128]	; (800034c <updateBuffer+0xa8>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4a20      	ldr	r2, [pc, #128]	; (8000350 <updateBuffer+0xac>)
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	18d3      	adds	r3, r2, r3
 80002d4:	3302      	adds	r3, #2
 80002d6:	22c0      	movs	r2, #192	; 0xc0
 80002d8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][3]=0b11000000;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <updateBuffer+0xa8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <updateBuffer+0xac>)
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	18d3      	adds	r3, r2, r3
 80002e4:	3303      	adds	r3, #3
 80002e6:	22c0      	movs	r2, #192	; 0xc0
 80002e8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][4]=0b11111100;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <updateBuffer+0xa8>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4a18      	ldr	r2, [pc, #96]	; (8000350 <updateBuffer+0xac>)
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	18d3      	adds	r3, r2, r3
 80002f4:	3304      	adds	r3, #4
 80002f6:	22fc      	movs	r2, #252	; 0xfc
 80002f8:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][5]=0b11000010;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <updateBuffer+0xa8>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <updateBuffer+0xac>)
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	18d3      	adds	r3, r2, r3
 8000304:	3305      	adds	r3, #5
 8000306:	22c2      	movs	r2, #194	; 0xc2
 8000308:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][6]=0b11000010;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <updateBuffer+0xa8>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4a10      	ldr	r2, [pc, #64]	; (8000350 <updateBuffer+0xac>)
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3306      	adds	r3, #6
 8000316:	22c2      	movs	r2, #194	; 0xc2
 8000318:	701a      	strb	r2, [r3, #0]
	max_7219_buffer[i][7]=0b11111100;
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <updateBuffer+0xa8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <updateBuffer+0xac>)
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	18d3      	adds	r3, r2, r3
 8000324:	3307      	adds	r3, #7
 8000326:	22fc      	movs	r2, #252	; 0xfc
 8000328:	701a      	strb	r2, [r3, #0]
	i++;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <updateBuffer+0xa8>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <updateBuffer+0xa8>)
 8000334:	701a      	strb	r2, [r3, #0]
	if(i==4)
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <updateBuffer+0xa8>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d102      	bne.n	8000344 <updateBuffer+0xa0>
		i=0;
 800033e:	4b03      	ldr	r3, [pc, #12]	; (800034c <updateBuffer+0xa8>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	20000028 	.word	0x20000028
 8000350:	2000002c 	.word	0x2000002c

08000354 <initBuffer>:

void initBuffer(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<MAX_DEVICES;i++) {
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
 8000360:	e01a      	b.n	8000398 <initBuffer+0x44>
		for(uint8_t j=0;j<8;j++){
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
 8000368:	e00d      	b.n	8000386 <initBuffer+0x32>
			max_7219_buffer[i][j]=0b00000000;
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	490e      	ldr	r1, [pc, #56]	; (80003ac <initBuffer+0x58>)
 8000374:	00d2      	lsls	r2, r2, #3
 8000376:	188a      	adds	r2, r1, r2
 8000378:	2100      	movs	r1, #0
 800037a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j=0;j<8;j++){
 800037c:	1dbb      	adds	r3, r7, #6
 800037e:	781a      	ldrb	r2, [r3, #0]
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	3201      	adds	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b07      	cmp	r3, #7
 800038c:	d9ed      	bls.n	800036a <initBuffer+0x16>
	for(uint8_t i=0;i<MAX_DEVICES;i++) {
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	3201      	adds	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d9e0      	bls.n	8000362 <initBuffer+0xe>
		}
	}
	printBuffer();
 80003a0:	f7ff ff3c 	bl	800021c <printBuffer>
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <main>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  HAL_Init();
 80003b4:	f000 fa60 	bl	8000878 <HAL_Init>
  SystemClock_Config();
 80003b8:	f000 f80c 	bl	80003d4 <SystemClock_Config>
  MX_GPIO_Init();
 80003bc:	f000 f852 	bl	8000464 <MX_GPIO_Init>
  max_init();
 80003c0:	f000 f88e 	bl	80004e0 <max_init>
  while(1)
  {
	  updateBuffer();
 80003c4:	f7ff ff6e 	bl	80002a4 <updateBuffer>
	  printBuffer();
 80003c8:	f7ff ff28 	bl	800021c <printBuffer>
	  HAL_Delay(80);
 80003cc:	2050      	movs	r0, #80	; 0x50
 80003ce:	f000 fad7 	bl	8000980 <HAL_Delay>
	  updateBuffer();
 80003d2:	e7f7      	b.n	80003c4 <main+0x14>

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b093      	sub	sp, #76	; 0x4c
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	2410      	movs	r4, #16
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	2338      	movs	r3, #56	; 0x38
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f001 fa47 	bl	8001878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ea:	003b      	movs	r3, r7
 80003ec:	0018      	movs	r0, r3
 80003ee:	2310      	movs	r3, #16
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f001 fa40 	bl	8001878 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fd2d 	bl	8000e5c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000402:	193b      	adds	r3, r7, r4
 8000404:	2202      	movs	r2, #2
 8000406:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	193b      	adds	r3, r7, r4
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000410:	193b      	adds	r3, r7, r4
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	193b      	adds	r3, r7, r4
 8000418:	2240      	movs	r2, #64	; 0x40
 800041a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041c:	193b      	adds	r3, r7, r4
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	193b      	adds	r3, r7, r4
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fd59 	bl	8000edc <HAL_RCC_OscConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800042e:	f000 f851 	bl	80004d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	003b      	movs	r3, r7
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	003b      	movs	r3, r7
 800044c:	2100      	movs	r1, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f001 f864 	bl	800151c <HAL_RCC_ClockConfig>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000458:	f000 f83c 	bl	80004d4 <Error_Handler>
  }
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b013      	add	sp, #76	; 0x4c
 8000462:	bd90      	pop	{r4, r7, pc}

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	2314      	movs	r3, #20
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f001 fa00 	bl	8001878 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_GPIO_Init+0x64>)
 800047a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_GPIO_Init+0x64>)
 800047e:	2102      	movs	r1, #2
 8000480:	430a      	orrs	r2, r1
 8000482:	635a      	str	r2, [r3, #52]	; 0x34
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_GPIO_Init+0x64>)
 8000486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000488:	2202      	movs	r2, #2
 800048a:	4013      	ands	r3, r2
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 8000490:	490e      	ldr	r1, [pc, #56]	; (80004cc <MX_GPIO_Init+0x68>)
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0x6c>)
 8000494:	2200      	movs	r2, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fcc2 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_6;
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <MX_GPIO_Init+0x68>)
 80004a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2201      	movs	r2, #1
 80004a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2202      	movs	r2, #2
 80004ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <MX_GPIO_Init+0x6c>)
 80004b8:	0019      	movs	r1, r3
 80004ba:	0010      	movs	r0, r2
 80004bc:	f000 fb4c 	bl	8000b58 <HAL_GPIO_Init>

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b006      	add	sp, #24
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	00008440 	.word	0x00008440
 80004d0:	50000400 	.word	0x50000400

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <max_init>:
#include "configs.h"
#include "shifter.h"
#include "max7219.h"


void max_init(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	uint16_t serialData[MAX_DEVICES];
	init_shifter();
 80004e6:	f000 f8a9 	bl	800063c <init_shifter>
	for(uint8_t i=0;i<15;i++){
 80004ea:	230f      	movs	r3, #15
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	e024      	b.n	800053e <max_init+0x5e>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80004f4:	230e      	movs	r3, #14
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	e010      	b.n	8000520 <max_init+0x40>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x0000);
 80004fe:	230f      	movs	r3, #15
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	200e      	movs	r0, #14
 8000508:	183a      	adds	r2, r7, r0
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	021b      	lsls	r3, r3, #8
 800050e:	b299      	uxth	r1, r3
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000516:	183b      	adds	r3, r7, r0
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	183b      	adds	r3, r7, r0
 800051c:	3201      	adds	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	230e      	movs	r3, #14
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b03      	cmp	r3, #3
 8000528:	d9e9      	bls.n	80004fe <max_init+0x1e>
		}
		max_send_data(serialData);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	0018      	movs	r0, r3
 800052e:	f000 f865 	bl	80005fc <max_send_data>
	for(uint8_t i=0;i<15;i++){
 8000532:	210f      	movs	r1, #15
 8000534:	187b      	adds	r3, r7, r1
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	187b      	adds	r3, r7, r1
 800053a:	3201      	adds	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b0e      	cmp	r3, #14
 8000546:	d9d5      	bls.n	80004f4 <max_init+0x14>
	}

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000548:	230d      	movs	r3, #13
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e00b      	b.n	800056a <max_init+0x8a>
				serialData[j]=0x0B07;
 8000552:	200d      	movs	r0, #13
 8000554:	183b      	adds	r3, r7, r0
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	0052      	lsls	r2, r2, #1
 800055c:	4916      	ldr	r1, [pc, #88]	; (80005b8 <max_init+0xd8>)
 800055e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000560:	183b      	adds	r3, r7, r0
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	183b      	adds	r3, r7, r0
 8000566:	3201      	adds	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	230d      	movs	r3, #13
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d9ee      	bls.n	8000552 <max_init+0x72>
			}
	max_send_data(serialData);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f840 	bl	80005fc <max_send_data>

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 800057c:	230c      	movs	r3, #12
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	e00b      	b.n	800059e <max_init+0xbe>
				serialData[j]=0x0C01;
 8000586:	200c      	movs	r0, #12
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	0052      	lsls	r2, r2, #1
 8000590:	490a      	ldr	r1, [pc, #40]	; (80005bc <max_init+0xdc>)
 8000592:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000594:	183b      	adds	r3, r7, r0
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	183b      	adds	r3, r7, r0
 800059a:	3201      	adds	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	230c      	movs	r3, #12
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d9ee      	bls.n	8000586 <max_init+0xa6>
			}
	max_send_data(serialData);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f826 	bl	80005fc <max_send_data>
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	00000b07 	.word	0x00000b07
 80005bc:	00000c01 	.word	0x00000c01

080005c0 <max_load_low>:

void max_load_low(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	LOADR -> ODR &= ~LOADP;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <max_load_low+0x18>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <max_load_low+0x18>)
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <max_load_low+0x1c>)
 80005cc:	400a      	ands	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	50000400 	.word	0x50000400
 80005dc:	fffffbff 	.word	0xfffffbff

080005e0 <max_load_high>:

void max_load_high(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LOADR -> ODR |=  LOADP;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <max_load_high+0x18>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <max_load_high+0x18>)
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	00c9      	lsls	r1, r1, #3
 80005ee:	430a      	orrs	r2, r1
 80005f0:	615a      	str	r2, [r3, #20]
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	50000400 	.word	0x50000400

080005fc <max_send_data>:

void max_send_data(uint16_t data[]) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	max_load_low();
 8000604:	f7ff ffdc 	bl	80005c0 <max_load_low>
	shiftout(data);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f834 	bl	8000678 <shiftout>
	max_load_high();
 8000610:	f7ff ffe6 	bl	80005e0 <max_load_high>
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}

0800061c <max_send_data_r>:

void max_send_data_r(uint16_t data[]) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	max_load_low();
 8000624:	f7ff ffcc 	bl	80005c0 <max_load_low>
	shiftout_r(data);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f000 f868 	bl	8000700 <shiftout_r>
	max_load_high();
 8000630:	f7ff ffd6 	bl	80005e0 <max_load_high>
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}

0800063c <init_shifter>:
#include "stm32g0xx_hal.h"
#include "configs.h"
#include "shifter.h"

void init_shifter(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	DATAR -> ODR &= ~DATAP;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <init_shifter+0x30>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <init_shifter+0x30>)
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	438a      	bics	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
	CLKR  -> ODR &= ~CLKP;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <init_shifter+0x30>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <init_shifter+0x30>)
 8000652:	4907      	ldr	r1, [pc, #28]	; (8000670 <init_shifter+0x34>)
 8000654:	400a      	ands	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
	LOADR -> ODR &= ~LOADP;
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <init_shifter+0x30>)
 800065a:	695a      	ldr	r2, [r3, #20]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <init_shifter+0x30>)
 800065e:	4905      	ldr	r1, [pc, #20]	; (8000674 <init_shifter+0x38>)
 8000660:	400a      	ands	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	50000400 	.word	0x50000400
 8000670:	ffff7fff 	.word	0xffff7fff
 8000674:	fffffbff 	.word	0xfffffbff

08000678 <shiftout>:

void shiftout(uint16_t data[]) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	for(int j=0;j<MAX_DEVICES;j++) {
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e031      	b.n	80006ea <shiftout+0x72>
		for(int i=15;i>=0;i--) {
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	e028      	b.n	80006de <shiftout+0x66>
			if((data[j]>>i)&1) {
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	001a      	movs	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	411a      	asrs	r2, r3
 800069c:	0013      	movs	r3, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	d006      	beq.n	80006b2 <shiftout+0x3a>
				DATAR -> ODR |=  DATAP;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <shiftout+0x80>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <shiftout+0x80>)
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	e005      	b.n	80006be <shiftout+0x46>
			}
			else {
				DATAR -> ODR &= ~DATAP;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <shiftout+0x80>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <shiftout+0x80>)
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	438a      	bics	r2, r1
 80006bc:	615a      	str	r2, [r3, #20]
			}
			CLKR -> ODR |=  CLKP;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <shiftout+0x80>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <shiftout+0x80>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0209      	lsls	r1, r1, #8
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
			CLKR -> ODR &= ~CLKP;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <shiftout+0x80>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <shiftout+0x80>)
 80006d2:	490a      	ldr	r1, [pc, #40]	; (80006fc <shiftout+0x84>)
 80006d4:	400a      	ands	r2, r1
 80006d6:	615a      	str	r2, [r3, #20]
		for(int i=15;i>=0;i--) {
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3b01      	subs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad3      	bge.n	800068c <shiftout+0x14>
	for(int j=0;j<MAX_DEVICES;j++) {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	ddca      	ble.n	8000686 <shiftout+0xe>
		}
	}
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b004      	add	sp, #16
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	50000400 	.word	0x50000400
 80006fc:	ffff7fff 	.word	0xffff7fff

08000700 <shiftout_r>:

void shiftout_r(uint16_t data[]) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	for(int j=MAX_DEVICES-1;j>=0;j--) {
 8000708:	2303      	movs	r3, #3
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e031      	b.n	8000772 <shiftout_r+0x72>
		for(int i=15;i>=0;i--) {
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	e028      	b.n	8000766 <shiftout_r+0x66>
			if((data[j]>>i)&1) {
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	001a      	movs	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	411a      	asrs	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	d006      	beq.n	800073a <shiftout_r+0x3a>
				DATAR -> ODR |=  DATAP;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <shiftout_r+0x80>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <shiftout_r+0x80>)
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	430a      	orrs	r2, r1
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	e005      	b.n	8000746 <shiftout_r+0x46>
			}
			else {
				DATAR -> ODR &= ~DATAP;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <shiftout_r+0x80>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <shiftout_r+0x80>)
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	438a      	bics	r2, r1
 8000744:	615a      	str	r2, [r3, #20]
			}
			CLKR -> ODR |=  CLKP;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <shiftout_r+0x80>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <shiftout_r+0x80>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0209      	lsls	r1, r1, #8
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
			CLKR -> ODR &= ~CLKP;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <shiftout_r+0x80>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <shiftout_r+0x80>)
 800075a:	490a      	ldr	r1, [pc, #40]	; (8000784 <shiftout_r+0x84>)
 800075c:	400a      	ands	r2, r1
 800075e:	615a      	str	r2, [r3, #20]
		for(int i=15;i>=0;i--) {
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3b01      	subs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b00      	cmp	r3, #0
 800076a:	dad3      	bge.n	8000714 <shiftout_r+0x14>
	for(int j=MAX_DEVICES-1;j>=0;j--) {
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3b01      	subs	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	daca      	bge.n	800070e <shiftout_r+0xe>
		}
	}
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bd80      	pop	{r7, pc}
 8000780:	50000400 	.word	0x50000400
 8000784:	ffff7fff 	.word	0xffff7fff

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_MspInit+0x4c>)
 8000790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_MspInit+0x4c>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	641a      	str	r2, [r3, #64]	; 0x40
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_MspInit+0x4c>)
 80007a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_MspInit+0x4c>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0549      	lsls	r1, r1, #21
 80007b0:	430a      	orrs	r2, r1
 80007b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	055b      	lsls	r3, r3, #21
 80007bc:	4013      	ands	r3, r2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f8fc 	bl	80009c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f8a4 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SystemInit+0x14>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	0512      	lsls	r2, r2, #20
 8000816:	609a      	str	r2, [r3, #8]
#endif
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000828:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800082a:	e003      	b.n	8000834 <LoopCopyDataInit>

0800082c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800082e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000830:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000832:	3104      	adds	r1, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <LoopForever+0xa>)
  ldr r3, =_edata
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <LoopForever+0xe>)
  adds r2, r0, r1
 8000838:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800083c:	d3f6      	bcc.n	800082c <CopyDataInit>
  ldr r2, =_sbss
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <LoopForever+0x12>)
  b LoopFillZerobss
 8000840:	e002      	b.n	8000848 <LoopFillZerobss>

08000842 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  str  r3, [r2]
 8000844:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000846:	3204      	adds	r2, #4

08000848 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <LoopForever+0x16>)
  cmp r2, r3
 800084a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800084c:	d3f9      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800084e:	f7ff ffdd 	bl	800080c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000852:	f000 ffed 	bl	8001830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fdab 	bl	80003b0 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000860:	080018e8 	.word	0x080018e8
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800086c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000870:	20000050 	.word	0x20000050

08000874 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_COMP_IRQHandler>
	...

08000878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_Init+0x3c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_Init+0x3c>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0049      	lsls	r1, r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f810 	bl	80008b8 <HAL_InitTick>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d003      	beq.n	80008a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e001      	b.n	80008a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff ff70 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_InitTick+0x88>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d02b      	beq.n	8000928 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_InitTick+0x8c>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_InitTick+0x88>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	0019      	movs	r1, r3
 80008da:	23fa      	movs	r3, #250	; 0xfa
 80008dc:	0098      	lsls	r0, r3, #2
 80008de:	f7ff fc11 	bl	8000104 <__udivsi3>
 80008e2:	0003      	movs	r3, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	0020      	movs	r0, r4
 80008e8:	f7ff fc0c 	bl	8000104 <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f925 	bl	8000b3e <HAL_SYSTICK_Config>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d112      	bne.n	800091e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d80a      	bhi.n	8000914 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f904 	bl	8000b14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_InitTick+0x90>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e00d      	b.n	8000930 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	230f      	movs	r3, #15
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e008      	b.n	8000930 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	230f      	movs	r3, #15
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e003      	b.n	8000930 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000930:	230f      	movs	r3, #15
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b005      	add	sp, #20
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <HAL_IncTick+0x18>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_IncTick+0x1c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	18d2      	adds	r2, r2, r3
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_IncTick+0x18>)
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000004c 	.word	0x2000004c
 8000968:	20000008 	.word	0x20000008

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000004c 	.word	0x2000004c

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	0003      	movs	r3, r0
 800098e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	d004      	beq.n	80009a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_Delay+0x40>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	f7ff ffe1 	bl	800096c <HAL_GetTick>
 80009aa:	0002      	movs	r2, r0
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d8f7      	bhi.n	80009a6 <HAL_Delay+0x26>
  {
  }
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008

080009c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80009d2:	4013      	ands	r3, r2
 80009d4:	0019      	movs	r1, r3
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40010000 	.word	0x40010000
 80009ec:	fffff9ff 	.word	0xfffff9ff

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b7f      	cmp	r3, #127	; 0x7f
 8000a04:	d828      	bhi.n	8000a58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a06:	4a2f      	ldr	r2, [pc, #188]	; (8000ac4 <__NVIC_SetPriority+0xd4>)
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	33c0      	adds	r3, #192	; 0xc0
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	589b      	ldr	r3, [r3, r2]
 8000a16:	1dfa      	adds	r2, r7, #7
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	400a      	ands	r2, r1
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	43d2      	mvns	r2, r2
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	401a      	ands	r2, r3
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	481f      	ldr	r0, [pc, #124]	; (8000ac4 <__NVIC_SetPriority+0xd4>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	33c0      	adds	r3, #192	; 0xc0
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a56:	e031      	b.n	8000abc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <__NVIC_SetPriority+0xd8>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	0019      	movs	r1, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	400b      	ands	r3, r1
 8000a64:	3b08      	subs	r3, #8
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3306      	adds	r3, #6
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	3304      	adds	r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1dfa      	adds	r2, r7, #7
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	0011      	movs	r1, r2
 8000a78:	2203      	movs	r2, #3
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	00d2      	lsls	r2, r2, #3
 8000a7e:	21ff      	movs	r1, #255	; 0xff
 8000a80:	4091      	lsls	r1, r2
 8000a82:	000a      	movs	r2, r1
 8000a84:	43d2      	mvns	r2, r2
 8000a86:	401a      	ands	r2, r3
 8000a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	22ff      	movs	r2, #255	; 0xff
 8000a90:	401a      	ands	r2, r3
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	0018      	movs	r0, r3
 8000a98:	2303      	movs	r3, #3
 8000a9a:	4003      	ands	r3, r0
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <__NVIC_SetPriority+0xd8>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	001c      	movs	r4, r3
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4023      	ands	r3, r4
 8000aac:	3b08      	subs	r3, #8
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	3306      	adds	r3, #6
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	18c3      	adds	r3, r0, r3
 8000ab8:	3304      	adds	r3, #4
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <SysTick_Config+0x40>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d901      	bls.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e010      	b.n	8000b04 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <SysTick_Config+0x44>)
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	3a01      	subs	r2, #1
 8000ae8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	2301      	movs	r3, #1
 8000aec:	425b      	negs	r3, r3
 8000aee:	2103      	movs	r1, #3
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ff7d 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SysTick_Config+0x44>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x44>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	00ffffff 	.word	0x00ffffff
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	210f      	movs	r1, #15
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	1c02      	adds	r2, r0, #0
 8000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ffbf 	bl	8000acc <SysTick_Config>
 8000b4e:	0003      	movs	r3, r0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e147      	b.n	8000df8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d100      	bne.n	8000b80 <HAL_GPIO_Init+0x28>
 8000b7e:	e138      	b.n	8000df2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x38>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d123      	bne.n	8000bd8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	08da      	lsrs	r2, r3, #3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3208      	adds	r2, #8
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	58d3      	ldr	r3, [r2, r3]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2107      	movs	r1, #7
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3208      	adds	r2, #8
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d00b      	beq.n	8000c2c <HAL_GPIO_Init+0xd4>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c20:	2b11      	cmp	r3, #17
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b12      	cmp	r3, #18
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	055b      	lsls	r3, r3, #21
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d100      	bne.n	8000ccc <HAL_GPIO_Init+0x174>
 8000cca:	e092      	b.n	8000df2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	589b      	ldr	r3, [r3, r2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	43da      	mvns	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d013      	beq.n	8000d22 <HAL_GPIO_Init+0x1ca>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <HAL_GPIO_Init+0x2bc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00d      	beq.n	8000d1e <HAL_GPIO_Init+0x1c6>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <HAL_GPIO_Init+0x2c0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d007      	beq.n	8000d1a <HAL_GPIO_Init+0x1c2>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a43      	ldr	r2, [pc, #268]	; (8000e1c <HAL_GPIO_Init+0x2c4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_GPIO_Init+0x1be>
 8000d12:	2303      	movs	r3, #3
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x1cc>
 8000d16:	2305      	movs	r3, #5
 8000d18:	e004      	b.n	8000d24 <HAL_GPIO_Init+0x1cc>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_Init+0x1cc>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x1cc>
 8000d22:	2300      	movs	r3, #0
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	2103      	movs	r1, #3
 8000d28:	400a      	ands	r2, r1
 8000d2a:	00d2      	lsls	r2, r2, #3
 8000d2c:	4093      	lsls	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d34:	4936      	ldr	r1, [pc, #216]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d42:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	58d3      	ldr	r3, [r2, r3]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d68:	4929      	ldr	r1, [pc, #164]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000d70:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000d72:	2384      	movs	r3, #132	; 0x84
 8000d74:	58d3      	ldr	r3, [r2, r3]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	029b      	lsls	r3, r3, #10
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d96:	491e      	ldr	r1, [pc, #120]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000d98:	2284      	movs	r2, #132	; 0x84
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	035b      	lsls	r3, r3, #13
 8000db6:	4013      	ands	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	039b      	lsls	r3, r3, #14
 8000de0:	4013      	ands	r3, r2
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_GPIO_Init+0x2b8>)
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	1e13      	subs	r3, r2, #0
 8000e02:	d000      	beq.n	8000e06 <HAL_GPIO_Init+0x2ae>
 8000e04:	e6b0      	b.n	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b006      	add	sp, #24
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021800 	.word	0x40021800
 8000e14:	50000400 	.word	0x50000400
 8000e18:	50000800 	.word	0x50000800
 8000e1c:	50000c00 	.word	0x50000c00

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	0008      	movs	r0, r1
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	1cbb      	adds	r3, r7, #2
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	1c7b      	adds	r3, r7, #1
 8000e34:	1c0a      	adds	r2, r1, #0
 8000e36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e38:	1c7b      	adds	r3, r7, #1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e40:	1cbb      	adds	r3, r7, #2
 8000e42:	881a      	ldrh	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d11f      	bne.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	0013      	movs	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	189b      	adds	r3, r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4912      	ldr	r1, [pc, #72]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff f938 	bl	8000104 <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e9a:	e008      	b.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e001      	b.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e009      	b.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	2380      	movs	r3, #128	; 0x80
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d0ed      	beq.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40007000 	.word	0x40007000
 8000ed0:	fffff9ff 	.word	0xfffff9ff
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	000f4240 	.word	0x000f4240

08000edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e304      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_OscConfig+0x1e>
 8000ef8:	e07c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efa:	4bc3      	ldr	r3, [pc, #780]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2238      	movs	r2, #56	; 0x38
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f04:	4bc0      	ldr	r3, [pc, #768]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d102      	bne.n	8000f1a <HAL_RCC_OscConfig+0x3e>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d002      	beq.n	8000f20 <HAL_RCC_OscConfig+0x44>
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d10b      	bne.n	8000f38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	4bb9      	ldr	r3, [pc, #740]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	029b      	lsls	r3, r3, #10
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d062      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x116>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d15e      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e2df      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d107      	bne.n	8000f54 <HAL_RCC_OscConfig+0x78>
 8000f44:	4bb0      	ldr	r3, [pc, #704]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4baf      	ldr	r3, [pc, #700]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e020      	b.n	8000f96 <HAL_RCC_OscConfig+0xba>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	02db      	lsls	r3, r3, #11
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d10e      	bne.n	8000f7e <HAL_RCC_OscConfig+0xa2>
 8000f60:	4ba9      	ldr	r3, [pc, #676]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4ba8      	ldr	r3, [pc, #672]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	02c9      	lsls	r1, r1, #11
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4ba6      	ldr	r3, [pc, #664]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4ba5      	ldr	r3, [pc, #660]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0249      	lsls	r1, r1, #9
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e00b      	b.n	8000f96 <HAL_RCC_OscConfig+0xba>
 8000f7e:	4ba2      	ldr	r3, [pc, #648]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4ba1      	ldr	r3, [pc, #644]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f84:	49a1      	ldr	r1, [pc, #644]	; (800120c <HAL_RCC_OscConfig+0x330>)
 8000f86:	400a      	ands	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4b9f      	ldr	r3, [pc, #636]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b9e      	ldr	r3, [pc, #632]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	499f      	ldr	r1, [pc, #636]	; (8001210 <HAL_RCC_OscConfig+0x334>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d014      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fce5 	bl	800096c <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fce0 	bl	800096c <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e29e      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fba:	4b93      	ldr	r3, [pc, #588]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	029b      	lsls	r3, r3, #10
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xcc>
 8000fc6:	e015      	b.n	8000ff4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcd0 	bl	800096c <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fccb 	bl	800096c <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e289      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe4:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	029b      	lsls	r3, r3, #10
 8000fec:	4013      	ands	r3, r2
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0xf6>
 8000ff0:	e000      	b.n	8000ff4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_RCC_OscConfig+0x124>
 8000ffe:	e099      	b.n	8001134 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2238      	movs	r2, #56	; 0x38
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800100a:	4b7f      	ldr	r3, [pc, #508]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2203      	movs	r2, #3
 8001010:	4013      	ands	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0x144>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d002      	beq.n	8001026 <HAL_RCC_OscConfig+0x14a>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d135      	bne.n	8001092 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001026:	4b78      	ldr	r3, [pc, #480]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4013      	ands	r3, r2
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x162>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e25c      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b72      	ldr	r3, [pc, #456]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a74      	ldr	r2, [pc, #464]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 8001044:	4013      	ands	r3, r2
 8001046:	0019      	movs	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	021a      	lsls	r2, r3, #8
 800104e:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001050:	430a      	orrs	r2, r1
 8001052:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d112      	bne.n	8001080 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800105a:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6e      	ldr	r2, [pc, #440]	; (8001218 <HAL_RCC_OscConfig+0x33c>)
 8001060:	4013      	ands	r3, r2
 8001062:	0019      	movs	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0adb      	lsrs	r3, r3, #11
 8001074:	2207      	movs	r2, #7
 8001076:	4013      	ands	r3, r2
 8001078:	4a68      	ldr	r2, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x340>)
 800107a:	40da      	lsrs	r2, r3
 800107c:	4b68      	ldr	r3, [pc, #416]	; (8001220 <HAL_RCC_OscConfig+0x344>)
 800107e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x348>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fc17 	bl	80008b8 <HAL_InitTick>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d051      	beq.n	8001132 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e232      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d030      	beq.n	80010fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a5e      	ldr	r2, [pc, #376]	; (8001218 <HAL_RCC_OscConfig+0x33c>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	0019      	movs	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	4b57      	ldr	r3, [pc, #348]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010ae:	4b56      	ldr	r3, [pc, #344]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0049      	lsls	r1, r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc56 	bl	800096c <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fc51 	bl	800096c <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e20f      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4013      	ands	r3, r2
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b48      	ldr	r3, [pc, #288]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_RCC_OscConfig+0x338>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	021a      	lsls	r2, r3, #8
 80010f4:	4b44      	ldr	r3, [pc, #272]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	e01b      	b.n	8001134 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001102:	4949      	ldr	r1, [pc, #292]	; (8001228 <HAL_RCC_OscConfig+0x34c>)
 8001104:	400a      	ands	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fc30 	bl	800096c <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc2b 	bl	800096c <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1e9      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4013      	ands	r3, r2
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x236>
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001132:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2208      	movs	r2, #8
 800113a:	4013      	ands	r3, r2
 800113c:	d047      	beq.n	80011ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2238      	movs	r2, #56	; 0x38
 8001144:	4013      	ands	r3, r2
 8001146:	2b18      	cmp	r3, #24
 8001148:	d10a      	bne.n	8001160 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d03c      	beq.n	80011ce <HAL_RCC_OscConfig+0x2f2>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d138      	bne.n	80011ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e1cb      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d019      	beq.n	800119c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800116a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fbfa 	bl	800096c <HAL_GetTick>
 8001178:	0003      	movs	r3, r0
 800117a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff fbf5 	bl	800096c <HAL_GetTick>
 8001182:	0002      	movs	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e1b3      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d0f1      	beq.n	800117e <HAL_RCC_OscConfig+0x2a2>
 800119a:	e018      	b.n	80011ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 800119e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	438a      	bics	r2, r1
 80011a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fbe0 	bl	800096c <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b2:	f7ff fbdb 	bl	800096c <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e199      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f1      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
 80011d6:	d100      	bne.n	80011da <HAL_RCC_OscConfig+0x2fe>
 80011d8:	e0c6      	b.n	8001368 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	231f      	movs	r3, #31
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2238      	movs	r2, #56	; 0x38
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d11e      	bne.n	800122c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d100      	bne.n	80011fa <HAL_RCC_OscConfig+0x31e>
 80011f8:	e0b6      	b.n	8001368 <HAL_RCC_OscConfig+0x48c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d000      	beq.n	8001204 <HAL_RCC_OscConfig+0x328>
 8001202:	e0b1      	b.n	8001368 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e177      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
 8001208:	40021000 	.word	0x40021000
 800120c:	fffeffff 	.word	0xfffeffff
 8001210:	fffbffff 	.word	0xfffbffff
 8001214:	ffff80ff 	.word	0xffff80ff
 8001218:	ffffc7ff 	.word	0xffffc7ff
 800121c:	00f42400 	.word	0x00f42400
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004
 8001228:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800122c:	4bb4      	ldr	r3, [pc, #720]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800122e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	055b      	lsls	r3, r3, #21
 8001234:	4013      	ands	r3, r2
 8001236:	d101      	bne.n	800123c <HAL_RCC_OscConfig+0x360>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x362>
 800123c:	2300      	movs	r3, #0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d011      	beq.n	8001266 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4baf      	ldr	r3, [pc, #700]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001246:	4bae      	ldr	r3, [pc, #696]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0549      	lsls	r1, r1, #21
 800124c:	430a      	orrs	r2, r1
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001250:	4bab      	ldr	r3, [pc, #684]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800125e:	231f      	movs	r3, #31
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001266:	4ba7      	ldr	r3, [pc, #668]	; (8001504 <HAL_RCC_OscConfig+0x628>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4013      	ands	r3, r2
 8001270:	d11a      	bne.n	80012a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001272:	4ba4      	ldr	r3, [pc, #656]	; (8001504 <HAL_RCC_OscConfig+0x628>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4ba3      	ldr	r3, [pc, #652]	; (8001504 <HAL_RCC_OscConfig+0x628>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001280:	f7ff fb74 	bl	800096c <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128a:	f7ff fb6f 	bl	800096c <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e12d      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129c:	4b99      	ldr	r3, [pc, #612]	; (8001504 <HAL_RCC_OscConfig+0x628>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d106      	bne.n	80012be <HAL_RCC_OscConfig+0x3e2>
 80012b0:	4b93      	ldr	r3, [pc, #588]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012b4:	4b92      	ldr	r3, [pc, #584]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80012bc:	e01c      	b.n	80012f8 <HAL_RCC_OscConfig+0x41c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x404>
 80012c6:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ca:	4b8d      	ldr	r3, [pc, #564]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012cc:	2104      	movs	r1, #4
 80012ce:	430a      	orrs	r2, r1
 80012d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d6:	4b8a      	ldr	r3, [pc, #552]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012d8:	2101      	movs	r1, #1
 80012da:	430a      	orrs	r2, r1
 80012dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0x41c>
 80012e0:	4b87      	ldr	r3, [pc, #540]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012e4:	4b86      	ldr	r3, [pc, #536]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	438a      	bics	r2, r1
 80012ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ec:	4b84      	ldr	r3, [pc, #528]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f0:	4b83      	ldr	r3, [pc, #524]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80012f2:	2104      	movs	r1, #4
 80012f4:	438a      	bics	r2, r1
 80012f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d014      	beq.n	800132a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fb34 	bl	800096c <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001308:	e009      	b.n	800131e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fb2f 	bl	800096c <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a7c      	ldr	r2, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x62c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e0ec      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131e:	4b78      	ldr	r3, [pc, #480]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x42e>
 8001328:	e013      	b.n	8001352 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132a:	f7ff fb1f 	bl	800096c <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001332:	e009      	b.n	8001348 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff fb1a 	bl	800096c <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a72      	ldr	r2, [pc, #456]	; (8001508 <HAL_RCC_OscConfig+0x62c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0d7      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001348:	4b6d      	ldr	r3, [pc, #436]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001352:	231f      	movs	r3, #31
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800135c:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800135e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001360:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001362:	496a      	ldr	r1, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x630>)
 8001364:	400a      	ands	r2, r1
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x496>
 8001370:	e0c1      	b.n	80014f6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2238      	movs	r2, #56	; 0x38
 8001378:	4013      	ands	r3, r2
 800137a:	2b10      	cmp	r3, #16
 800137c:	d100      	bne.n	8001380 <HAL_RCC_OscConfig+0x4a4>
 800137e:	e081      	b.n	8001484 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d156      	bne.n	8001436 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001388:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800138e:	4960      	ldr	r1, [pc, #384]	; (8001510 <HAL_RCC_OscConfig+0x634>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff faea 	bl	800096c <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fae5 	bl	800096c <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0a3      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	4b53      	ldr	r3, [pc, #332]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	049b      	lsls	r3, r3, #18
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_RCC_OscConfig+0x638>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	431a      	orrs	r2, r3
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0449      	lsls	r1, r1, #17
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0549      	lsls	r1, r1, #21
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff faae 	bl	800096c <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff faa9 	bl	800096c <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e067      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	049b      	lsls	r3, r3, #18
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x53a>
 8001434:	e05f      	b.n	80014f6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 800143c:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x634>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001448:	2103      	movs	r1, #3
 800144a:	438a      	bics	r2, r1
 800144c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001454:	4930      	ldr	r1, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x63c>)
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fa87 	bl	800096c <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fa82 	bl	800096c <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e040      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	049b      	lsls	r3, r3, #18
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x588>
 8001482:	e038      	b.n	80014f6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e033      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x624>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2203      	movs	r2, #3
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d126      	bne.n	80014f2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2270      	movs	r2, #112	; 0x70
 80014a8:	401a      	ands	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d11f      	bne.n	80014f2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	23fe      	movs	r3, #254	; 0xfe
 80014b6:	01db      	lsls	r3, r3, #7
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	039b      	lsls	r3, r3, #14
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	23e0      	movs	r3, #224	; 0xe0
 80014d8:	051b      	lsls	r3, r3, #20
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	0f5b      	lsrs	r3, r3, #29
 80014e8:	075a      	lsls	r2, r3, #29
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b008      	add	sp, #32
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	40007000 	.word	0x40007000
 8001508:	00001388 	.word	0x00001388
 800150c:	efffffff 	.word	0xefffffff
 8001510:	feffffff 	.word	0xfeffffff
 8001514:	11c1808c 	.word	0x11c1808c
 8001518:	eefeffff 	.word	0xeefeffff

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0e9      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2207      	movs	r2, #7
 8001536:	4013      	ands	r3, r2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d91e      	bls.n	800157c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2207      	movs	r2, #7
 8001544:	4393      	bics	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001550:	f7ff fa0c 	bl	800096c <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001558:	e009      	b.n	800156e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff fa07 	bl	800096c <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0ca      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d015      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d006      	beq.n	800159e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001590:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001596:	21e0      	movs	r1, #224	; 0xe0
 8001598:	01c9      	lsls	r1, r1, #7
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <HAL_RCC_ClockConfig+0x1fc>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d057      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d12b      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e097      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d107      	bne.n	80015ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	049b      	lsls	r3, r3, #18
 80015e4:	4013      	ands	r3, r2
 80015e6:	d11f      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e08b      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	d113      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e07f      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d106      	bne.n	800161a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d108      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e074      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e06d      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2207      	movs	r2, #7
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800163c:	f7ff f996 	bl	800096c <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001644:	e009      	b.n	800165a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff f991 	bl	800096c <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e054      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2238      	movs	r2, #56	; 0x38
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	429a      	cmp	r2, r3
 800166a:	d1ec      	bne.n	8001646 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2207      	movs	r2, #7
 8001672:	4013      	ands	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d21e      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2207      	movs	r2, #7
 8001680:	4393      	bics	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800168c:	f7ff f96e 	bl	800096c <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001694:	e009      	b.n	80016aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	f7ff f969 	bl	800096c <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e02c      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2207      	movs	r2, #7
 80016b0:	4013      	ands	r3, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_RCC_ClockConfig+0x200>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016d6:	f000 f829 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016da:	0001      	movs	r1, r0
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	220f      	movs	r2, #15
 80016e4:	401a      	ands	r2, r3
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x204>)
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	58d3      	ldr	r3, [r2, r3]
 80016ec:	221f      	movs	r2, #31
 80016ee:	4013      	ands	r3, r2
 80016f0:	000a      	movs	r2, r1
 80016f2:	40da      	lsrs	r2, r3
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x208>)
 80016f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x20c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff f8db 	bl	80008b8 <HAL_InitTick>
 8001702:	0003      	movs	r3, r0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000
 8001710:	00001388 	.word	0x00001388
 8001714:	40021000 	.word	0x40021000
 8001718:	fffff0ff 	.word	0xfffff0ff
 800171c:	ffff8fff 	.word	0xffff8fff
 8001720:	080018a0 	.word	0x080018a0
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0adb      	lsrs	r3, r3, #11
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	4835      	ldr	r0, [pc, #212]	; (8001828 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001752:	f7fe fcd7 	bl	8000104 <__udivsi3>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e05d      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2238      	movs	r2, #56	; 0x38
 8001762:	4013      	ands	r3, r2
 8001764:	2b08      	cmp	r3, #8
 8001766:	d102      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_GetSysClockFreq+0x100>)
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e054      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2238      	movs	r2, #56	; 0x38
 8001774:	4013      	ands	r3, r2
 8001776:	2b10      	cmp	r3, #16
 8001778:	d138      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2203      	movs	r2, #3
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	3301      	adds	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10d      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	4824      	ldr	r0, [pc, #144]	; (800182c <HAL_RCC_GetSysClockFreq+0x100>)
 800179c:	f7fe fcb2 	bl	8000104 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	227f      	movs	r2, #127	; 0x7f
 80017ac:	4013      	ands	r3, r2
 80017ae:	434b      	muls	r3, r1
 80017b0:	617b      	str	r3, [r7, #20]
        break;
 80017b2:	e00d      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b8:	f7fe fca4 	bl	8000104 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	0019      	movs	r1, r3
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	227f      	movs	r2, #127	; 0x7f
 80017c8:	4013      	ands	r3, r2
 80017ca:	434b      	muls	r3, r1
 80017cc:	617b      	str	r3, [r7, #20]
        break;
 80017ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0f5b      	lsrs	r3, r3, #29
 80017d6:	2207      	movs	r2, #7
 80017d8:	4013      	ands	r3, r2
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7fe fc8f 	bl	8000104 <__udivsi3>
 80017e6:	0003      	movs	r3, r0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	e015      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2238      	movs	r2, #56	; 0x38
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d103      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2238      	movs	r2, #56	; 0x38
 8001806:	4013      	ands	r3, r2
 8001808:	2b18      	cmp	r3, #24
 800180a:	d103      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800180c:	23fa      	movs	r3, #250	; 0xfa
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e001      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001818:	693b      	ldr	r3, [r7, #16]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200

08001830 <__libc_init_array>:
 8001830:	b570      	push	{r4, r5, r6, lr}
 8001832:	2600      	movs	r6, #0
 8001834:	4d0c      	ldr	r5, [pc, #48]	; (8001868 <__libc_init_array+0x38>)
 8001836:	4c0d      	ldr	r4, [pc, #52]	; (800186c <__libc_init_array+0x3c>)
 8001838:	1b64      	subs	r4, r4, r5
 800183a:	10a4      	asrs	r4, r4, #2
 800183c:	42a6      	cmp	r6, r4
 800183e:	d109      	bne.n	8001854 <__libc_init_array+0x24>
 8001840:	2600      	movs	r6, #0
 8001842:	f000 f821 	bl	8001888 <_init>
 8001846:	4d0a      	ldr	r5, [pc, #40]	; (8001870 <__libc_init_array+0x40>)
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <__libc_init_array+0x44>)
 800184a:	1b64      	subs	r4, r4, r5
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	42a6      	cmp	r6, r4
 8001850:	d105      	bne.n	800185e <__libc_init_array+0x2e>
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	00b3      	lsls	r3, r6, #2
 8001856:	58eb      	ldr	r3, [r5, r3]
 8001858:	4798      	blx	r3
 800185a:	3601      	adds	r6, #1
 800185c:	e7ee      	b.n	800183c <__libc_init_array+0xc>
 800185e:	00b3      	lsls	r3, r6, #2
 8001860:	58eb      	ldr	r3, [r5, r3]
 8001862:	4798      	blx	r3
 8001864:	3601      	adds	r6, #1
 8001866:	e7f2      	b.n	800184e <__libc_init_array+0x1e>
 8001868:	080018e0 	.word	0x080018e0
 800186c:	080018e0 	.word	0x080018e0
 8001870:	080018e0 	.word	0x080018e0
 8001874:	080018e4 	.word	0x080018e4

08001878 <memset>:
 8001878:	0003      	movs	r3, r0
 800187a:	1812      	adds	r2, r2, r0
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <memset+0xa>
 8001880:	4770      	bx	lr
 8001882:	7019      	strb	r1, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	e7f9      	b.n	800187c <memset+0x4>

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
