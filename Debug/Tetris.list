
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015ac  080015ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015ac  080015ac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080015ac  080015ac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015ac  080015ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015ac  080015ac  000115ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015b0  080015b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080015b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000004  080015b8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080015b8  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014d2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000060f  00000000  00000000  000214fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00021b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00021c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e04a  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001fbe  00000000  00000000  0002fd92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004ea1a  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008076a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e8  00000000  00000000  000807e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001594 	.word	0x08001594

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001594 	.word	0x08001594

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <DelayMS>:
#include "stm32g0xx.h"
#include "systick.h"


void DelayMS(uint32_t Delay)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = tick;
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <DelayMS+0x28>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	60fb      	str	r3, [r7, #12]
  while ((tick - tickstart) < Delay)
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <DelayMS+0x28>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	1ad3      	subs	r3, r2, r3
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	429a      	cmp	r2, r3
 8000238:	d8f8      	bhi.n	800022c <DelayMS+0x10>
  {
  }
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b004      	add	sp, #16
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	20000020 	.word	0x20000020

08000248 <build_buffer>:


uint16_t buff[MAX_DEVICES*8];
uint8_t buff_data[MAX_DEVICES*8];

void build_buffer(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	int k=0;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
	   for(int j=0;j<8;j++) {
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	e020      	b.n	800029a <build_buffer+0x52>
		   for(int i=0;i<MAX_DEVICES;i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	e017      	b.n	800028e <build_buffer+0x46>
		   buff[k++]=((uint16_t)((j+1)<<8))|((uint16_t)buff_data[(8*i)+j]);
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	b29b      	uxth	r3, r3
 8000262:	3301      	adds	r3, #1
 8000264:	b29b      	uxth	r3, r3
 8000266:	021b      	lsls	r3, r3, #8
 8000268:	b299      	uxth	r1, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	00da      	lsls	r2, r3, #3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	18d3      	adds	r3, r2, r3
 8000272:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <build_buffer+0x60>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	b29a      	uxth	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	1c58      	adds	r0, r3, #1
 800027c:	60f8      	str	r0, [r7, #12]
 800027e:	430a      	orrs	r2, r1
 8000280:	b291      	uxth	r1, r2
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <build_buffer+0x64>)
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	5299      	strh	r1, [r3, r2]
		   for(int i=0;i<MAX_DEVICES;i++) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b03      	cmp	r3, #3
 8000292:	dde4      	ble.n	800025e <build_buffer+0x16>
	   for(int j=0;j<8;j++) {
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	3301      	adds	r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b07      	cmp	r3, #7
 800029e:	dddb      	ble.n	8000258 <build_buffer+0x10>
	   }
   }
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b004      	add	sp, #16
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000064 	.word	0x20000064
 80002ac:	20000024 	.word	0x20000024

080002b0 <clear_buff>:
  {
	  asm( "NOP" );
  }
}

void clear_buff(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_DEVICES*8;i++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e007      	b.n	80002cc <clear_buff+0x1c>
		buff[i]=0x0000;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <clear_buff+0x2c>)
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	0052      	lsls	r2, r2, #1
 80002c2:	2100      	movs	r1, #0
 80002c4:	52d1      	strh	r1, [r2, r3]
	for(int i=0;i<MAX_DEVICES*8;i++)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b1f      	cmp	r3, #31
 80002d0:	ddf4      	ble.n	80002bc <clear_buff+0xc>
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b002      	add	sp, #8
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000024 	.word	0x20000024

080002e0 <spi_w16>:

void spi_w16( SPI_TypeDef *SPIx, uint16_t dat[] ) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e010      	b.n	8000312 <spi_w16+0x32>
	  while ( !( SPIx->SR & SPI_SR_TXE ) ) {};
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	2202      	movs	r2, #2
 80002f8:	4013      	ands	r3, r2
 80002fa:	d0fa      	beq.n	80002f2 <spi_w16+0x12>
	   *( uint16_t* )&( SPIx->DR ) = dat[i];
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	683a      	ldr	r2, [r7, #0]
 8000302:	18d2      	adds	r2, r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	330c      	adds	r3, #12
 8000308:	8812      	ldrh	r2, [r2, #0]
 800030a:	801a      	strh	r2, [r3, #0]
  for(int i=0;i<MAX_DEVICES;i++){
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3301      	adds	r3, #1
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b03      	cmp	r3, #3
 8000316:	ddeb      	ble.n	80002f0 <spi_w16+0x10>
  }

}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}

08000320 <init_max>:

void init_max(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<5);
 8000326:	23a0      	movs	r3, #160	; 0xa0
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	23a0      	movs	r3, #160	; 0xa0
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	2120      	movs	r1, #32
 8000332:	430a      	orrs	r2, r1
 8000334:	615a      	str	r2, [r3, #20]
	GPIOA->ODR &= ~(1<<5);
 8000336:	23a0      	movs	r3, #160	; 0xa0
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	23a0      	movs	r3, #160	; 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2120      	movs	r1, #32
 8000342:	438a      	bics	r2, r1
 8000344:	615a      	str	r2, [r3, #20]
	uint16_t serialData[MAX_DEVICES];
	for(uint8_t i=0;i<15;i++){
 8000346:	230f      	movs	r3, #15
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e026      	b.n	800039e <init_max+0x7e>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000350:	230e      	movs	r3, #14
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e010      	b.n	800037c <init_max+0x5c>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x00);
 800035a:	230f      	movs	r3, #15
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b29b      	uxth	r3, r3
 8000362:	200e      	movs	r0, #14
 8000364:	183a      	adds	r2, r7, r0
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	021b      	lsls	r3, r3, #8
 800036a:	b299      	uxth	r1, r3
 800036c:	003b      	movs	r3, r7
 800036e:	0052      	lsls	r2, r2, #1
 8000370:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000372:	183b      	adds	r3, r7, r0
 8000374:	781a      	ldrb	r2, [r3, #0]
 8000376:	183b      	adds	r3, r7, r0
 8000378:	3201      	adds	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	230e      	movs	r3, #14
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b03      	cmp	r3, #3
 8000384:	d9e9      	bls.n	800035a <init_max+0x3a>
		}
		spi_w16(SPI1,serialData);
 8000386:	003b      	movs	r3, r7
 8000388:	4a3e      	ldr	r2, [pc, #248]	; (8000484 <init_max+0x164>)
 800038a:	0019      	movs	r1, r3
 800038c:	0010      	movs	r0, r2
 800038e:	f7ff ffa7 	bl	80002e0 <spi_w16>
	for(uint8_t i=0;i<15;i++){
 8000392:	210f      	movs	r1, #15
 8000394:	187b      	adds	r3, r7, r1
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	187b      	adds	r3, r7, r1
 800039a:	3201      	adds	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	230f      	movs	r3, #15
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b0e      	cmp	r3, #14
 80003a6:	d9d3      	bls.n	8000350 <init_max+0x30>
	}

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003a8:	230d      	movs	r3, #13
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
 80003b0:	e00b      	b.n	80003ca <init_max+0xaa>
		serialData[j]=(0x0B07);
 80003b2:	200d      	movs	r0, #13
 80003b4:	183b      	adds	r3, r7, r0
 80003b6:	781a      	ldrb	r2, [r3, #0]
 80003b8:	003b      	movs	r3, r7
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	4932      	ldr	r1, [pc, #200]	; (8000488 <init_max+0x168>)
 80003be:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003c0:	183b      	adds	r3, r7, r0
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	183b      	adds	r3, r7, r0
 80003c6:	3201      	adds	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	230d      	movs	r3, #13
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d9ee      	bls.n	80003b2 <init_max+0x92>
	}
	spi_w16(SPI1,serialData);
 80003d4:	003b      	movs	r3, r7
 80003d6:	4a2b      	ldr	r2, [pc, #172]	; (8000484 <init_max+0x164>)
 80003d8:	0019      	movs	r1, r3
 80003da:	0010      	movs	r0, r2
 80003dc:	f7ff ff80 	bl	80002e0 <spi_w16>

	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003e0:	230c      	movs	r3, #12
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	e00b      	b.n	8000402 <init_max+0xe2>
		serialData[j]=(0x0C01);
 80003ea:	200c      	movs	r0, #12
 80003ec:	183b      	adds	r3, r7, r0
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	003b      	movs	r3, r7
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	4925      	ldr	r1, [pc, #148]	; (800048c <init_max+0x16c>)
 80003f6:	52d1      	strh	r1, [r2, r3]
	for(uint8_t j=0;j<MAX_DEVICES;j++) {
 80003f8:	183b      	adds	r3, r7, r0
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	183b      	adds	r3, r7, r0
 80003fe:	3201      	adds	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	230c      	movs	r3, #12
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d9ee      	bls.n	80003ea <init_max+0xca>
	}
	spi_w16(SPI1,serialData);
 800040c:	003b      	movs	r3, r7
 800040e:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <init_max+0x164>)
 8000410:	0019      	movs	r1, r3
 8000412:	0010      	movs	r0, r2
 8000414:	f7ff ff64 	bl	80002e0 <spi_w16>

	for(uint8_t i=1;i<=8;i++){
 8000418:	230b      	movs	r3, #11
 800041a:	18fb      	adds	r3, r7, r3
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
 8000420:	e026      	b.n	8000470 <init_max+0x150>
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000422:	230a      	movs	r3, #10
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e010      	b.n	800044e <init_max+0x12e>
			serialData[j]=(uint16_t)(i<<8)|((uint16_t)0x00);
 800042c:	230b      	movs	r3, #11
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b29b      	uxth	r3, r3
 8000434:	200a      	movs	r0, #10
 8000436:	183a      	adds	r2, r7, r0
 8000438:	7812      	ldrb	r2, [r2, #0]
 800043a:	021b      	lsls	r3, r3, #8
 800043c:	b299      	uxth	r1, r3
 800043e:	003b      	movs	r3, r7
 8000440:	0052      	lsls	r2, r2, #1
 8000442:	52d1      	strh	r1, [r2, r3]
		for(uint8_t j=0;j<MAX_DEVICES;j++) {
 8000444:	183b      	adds	r3, r7, r0
 8000446:	781a      	ldrb	r2, [r3, #0]
 8000448:	183b      	adds	r3, r7, r0
 800044a:	3201      	adds	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
 800044e:	230a      	movs	r3, #10
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	d9e9      	bls.n	800042c <init_max+0x10c>
		}
	spi_w16(SPI1,serialData);
 8000458:	003b      	movs	r3, r7
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <init_max+0x164>)
 800045c:	0019      	movs	r1, r3
 800045e:	0010      	movs	r0, r2
 8000460:	f7ff ff3e 	bl	80002e0 <spi_w16>
	for(uint8_t i=1;i<=8;i++){
 8000464:	210b      	movs	r1, #11
 8000466:	187b      	adds	r3, r7, r1
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	187b      	adds	r3, r7, r1
 800046c:	3201      	adds	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
 8000470:	230b      	movs	r3, #11
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b08      	cmp	r3, #8
 8000478:	d9d3      	bls.n	8000422 <init_max+0x102>
	}
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b004      	add	sp, #16
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40013000 	.word	0x40013000
 8000488:	00000b07 	.word	0x00000b07
 800048c:	00000c01 	.word	0x00000c01

08000490 <main>:

int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  sysclock_config();//call the system clock configuration function. Clock should be set to 64Mhz now.
 8000494:	f000 fefe 	bl	8001294 <sysclock_config>
  systick_enable();//set the systick timer to interrupt every 1ms.
 8000498:	f001 f816 	bl	80014c8 <systick_enable>

  //GPIOA configs

  RCC->IOPENR    |= RCC_IOPENR_GPIOAEN;
 800049c:	4bfe      	ldr	r3, [pc, #1016]	; (8000898 <main+0x408>)
 800049e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a0:	4bfd      	ldr	r3, [pc, #1012]	; (8000898 <main+0x408>)
 80004a2:	2101      	movs	r1, #1
 80004a4:	430a      	orrs	r2, r1
 80004a6:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->AHBENR    |= RCC_AHBENR_DMA1EN;
 80004a8:	4bfb      	ldr	r3, [pc, #1004]	; (8000898 <main+0x408>)
 80004aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004ac:	4bfa      	ldr	r3, [pc, #1000]	; (8000898 <main+0x408>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->APBENR2   |= RCC_APBENR2_SPI1EN;
 80004b4:	4bf8      	ldr	r3, [pc, #992]	; (8000898 <main+0x408>)
 80004b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004b8:	4bf7      	ldr	r3, [pc, #988]	; (8000898 <main+0x408>)
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	0149      	lsls	r1, r1, #5
 80004be:	430a      	orrs	r2, r1
 80004c0:	641a      	str	r2, [r3, #64]	; 0x40
  GPIOA->MODER   &= ~(0x3<<(1*2) | 0x3<<(2*2) | 0x3<<(4*2) | 0x3<<(5*2));
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	23a0      	movs	r3, #160	; 0xa0
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	49f3      	ldr	r1, [pc, #972]	; (800089c <main+0x40c>)
 80004ce:	400a      	ands	r2, r1
 80004d0:	601a      	str	r2, [r3, #0]
  GPIOA->MODER   |= (0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2) | 0x1<<(5*2));
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	21c5      	movs	r1, #197	; 0xc5
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	430a      	orrs	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
  //GPIOA->OTYPER  &= ~((0x1<<1) | (0x1<<2) | (0x1<<4));
  //GPIOA->OSPEEDR &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2) | 0x2<<(5*2));
  //GPIOA->PUPDR   &= ~(0x2<<(1*2) | 0x2<<(2*2) | 0x2<<(4*2));
  GPIOA->PUPDR   |= ~(0x2<<(5*2));
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	68da      	ldr	r2, [r3, #12]
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	49ec      	ldr	r1, [pc, #944]	; (80008a0 <main+0x410>)
 80004f0:	430a      	orrs	r2, r1
 80004f2:	60da      	str	r2, [r3, #12]
  GPIOA->AFR[0]  &= ~(0xff<<(1*4) | 0xff<<(2*4) | 0xff<<(4*4));
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	6a1a      	ldr	r2, [r3, #32]
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	49e9      	ldr	r1, [pc, #932]	; (80008a4 <main+0x414>)
 8000500:	400a      	ands	r2, r1
 8000502:	621a      	str	r2, [r3, #32]

  GPIOA->ODR &= ~(1<<5);
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	23a0      	movs	r3, #160	; 0xa0
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2120      	movs	r1, #32
 8000510:	438a      	bics	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
  //DMA configs

  DMA1_Channel1->CCR &= ~( DMA_CCR_MEM2MEM |
 8000514:	4be4      	ldr	r3, [pc, #912]	; (80008a8 <main+0x418>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4be3      	ldr	r3, [pc, #908]	; (80008a8 <main+0x418>)
 800051a:	49e4      	ldr	r1, [pc, #912]	; (80008ac <main+0x41c>)
 800051c:	400a      	ands	r2, r1
 800051e:	601a      	str	r2, [r3, #0]
                           DMA_CCR_PL |
                           DMA_CCR_MSIZE |
                           DMA_CCR_PSIZE |
                           DMA_CCR_PINC |
                           DMA_CCR_EN );
  DMA1_Channel1->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 8000520:	4be1      	ldr	r3, [pc, #900]	; (80008a8 <main+0x418>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4be0      	ldr	r3, [pc, #896]	; (80008a8 <main+0x418>)
 8000526:	49e2      	ldr	r1, [pc, #904]	; (80008b0 <main+0x420>)
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
                           DMA_CCR_MINC |
                           DMA_CCR_CIRC |
                           DMA_CCR_DIR );


  DMAMUX1_Channel0->CCR &= ~( DMAMUX_CxCR_DMAREQ_ID );
 800052c:	4be1      	ldr	r3, [pc, #900]	; (80008b4 <main+0x424>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4be0      	ldr	r3, [pc, #896]	; (80008b4 <main+0x424>)
 8000532:	21ff      	movs	r1, #255	; 0xff
 8000534:	438a      	bics	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
  DMAMUX1_Channel0->CCR |=  ( 17 << DMAMUX_CxCR_DMAREQ_ID_Pos );
 8000538:	4bde      	ldr	r3, [pc, #888]	; (80008b4 <main+0x424>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4bdd      	ldr	r3, [pc, #884]	; (80008b4 <main+0x424>)
 800053e:	2111      	movs	r1, #17
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]

  DMA1_Channel1->CMAR  = ( uint32_t )&buff;
 8000544:	4bd8      	ldr	r3, [pc, #864]	; (80008a8 <main+0x418>)
 8000546:	4adc      	ldr	r2, [pc, #880]	; (80008b8 <main+0x428>)
 8000548:	60da      	str	r2, [r3, #12]
  DMA1_Channel1->CPAR  = ( uint32_t )&(SPI1->DR);
 800054a:	4bd7      	ldr	r3, [pc, #860]	; (80008a8 <main+0x418>)
 800054c:	4adb      	ldr	r2, [pc, #876]	; (80008bc <main+0x42c>)
 800054e:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CNDTR = ( uint16_t )(MAX_DEVICES*8);
 8000550:	4bd5      	ldr	r3, [pc, #852]	; (80008a8 <main+0x418>)
 8000552:	2220      	movs	r2, #32
 8000554:	605a      	str	r2, [r3, #4]

  //SPI configs
  SPI1->CR1 |=  ( SPI_CR1_MSTR | (1<<SPI_CR1_BIDIOE_Pos) | (1<<4) );
 8000556:	4bda      	ldr	r3, [pc, #872]	; (80008c0 <main+0x430>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4bd9      	ldr	r3, [pc, #868]	; (80008c0 <main+0x430>)
 800055c:	49d9      	ldr	r1, [pc, #868]	; (80008c4 <main+0x434>)
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
  SPI1->CR2 &= ~( SPI_CR2_DS );
 8000562:	4bd7      	ldr	r3, [pc, #860]	; (80008c0 <main+0x430>)
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	4bd6      	ldr	r3, [pc, #856]	; (80008c0 <main+0x430>)
 8000568:	49d7      	ldr	r1, [pc, #860]	; (80008c8 <main+0x438>)
 800056a:	400a      	ands	r2, r1
 800056c:	605a      	str	r2, [r3, #4]
  SPI1->CR2 |=  ( 0xf << SPI_CR2_DS_Pos | SPI_CR2_TXDMAEN | 1<<SPI_CR2_NSSP_Pos | 1<<SPI_CR2_SSOE_Pos );
 800056e:	4bd4      	ldr	r3, [pc, #848]	; (80008c0 <main+0x430>)
 8000570:	685a      	ldr	r2, [r3, #4]
 8000572:	4bd3      	ldr	r3, [pc, #844]	; (80008c0 <main+0x430>)
 8000574:	49d5      	ldr	r1, [pc, #852]	; (80008cc <main+0x43c>)
 8000576:	430a      	orrs	r2, r1
 8000578:	605a      	str	r2, [r3, #4]

  SPI1->CR1 |=  ( SPI_CR1_SPE );
 800057a:	4bd1      	ldr	r3, [pc, #836]	; (80008c0 <main+0x430>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4bd0      	ldr	r3, [pc, #832]	; (80008c0 <main+0x430>)
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]
  init_max();
 8000586:	f7ff fecb 	bl	8000320 <init_max>

  //DelayMS(500);
  clear_buff();
 800058a:	f7ff fe91 	bl	80002b0 <clear_buff>

  DMA1_Channel1->CCR |= ( DMA_CCR_EN );
 800058e:	4bc6      	ldr	r3, [pc, #792]	; (80008a8 <main+0x418>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4bc5      	ldr	r3, [pc, #788]	; (80008a8 <main+0x418>)
 8000594:	2101      	movs	r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]

while(1) {

    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000001;buff_data[24]=0b00000000;
 800059a:	4bcd      	ldr	r3, [pc, #820]	; (80008d0 <main+0x440>)
 800059c:	2220      	movs	r2, #32
 800059e:	701a      	strb	r2, [r3, #0]
 80005a0:	4bcb      	ldr	r3, [pc, #812]	; (80008d0 <main+0x440>)
 80005a2:	2210      	movs	r2, #16
 80005a4:	721a      	strb	r2, [r3, #8]
 80005a6:	4bca      	ldr	r3, [pc, #808]	; (80008d0 <main+0x440>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	741a      	strb	r2, [r3, #16]
 80005ac:	4bc8      	ldr	r3, [pc, #800]	; (80008d0 <main+0x440>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 80005b2:	4bc7      	ldr	r3, [pc, #796]	; (80008d0 <main+0x440>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	705a      	strb	r2, [r3, #1]
 80005b8:	4bc5      	ldr	r3, [pc, #788]	; (80008d0 <main+0x440>)
 80005ba:	2210      	movs	r2, #16
 80005bc:	725a      	strb	r2, [r3, #9]
 80005be:	4bc4      	ldr	r3, [pc, #784]	; (80008d0 <main+0x440>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	745a      	strb	r2, [r3, #17]
 80005c4:	4bc2      	ldr	r3, [pc, #776]	; (80008d0 <main+0x440>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 80005ca:	4bc1      	ldr	r3, [pc, #772]	; (80008d0 <main+0x440>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	709a      	strb	r2, [r3, #2]
 80005d0:	4bbf      	ldr	r3, [pc, #764]	; (80008d0 <main+0x440>)
 80005d2:	2210      	movs	r2, #16
 80005d4:	729a      	strb	r2, [r3, #10]
 80005d6:	4bbe      	ldr	r3, [pc, #760]	; (80008d0 <main+0x440>)
 80005d8:	2200      	movs	r2, #0
 80005da:	749a      	strb	r2, [r3, #18]
 80005dc:	4bbc      	ldr	r3, [pc, #752]	; (80008d0 <main+0x440>)
 80005de:	2200      	movs	r2, #0
 80005e0:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00001000;buff_data[27]=0b00011000;
 80005e2:	4bbb      	ldr	r3, [pc, #748]	; (80008d0 <main+0x440>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	70da      	strb	r2, [r3, #3]
 80005e8:	4bb9      	ldr	r3, [pc, #740]	; (80008d0 <main+0x440>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	72da      	strb	r2, [r3, #11]
 80005ee:	4bb8      	ldr	r3, [pc, #736]	; (80008d0 <main+0x440>)
 80005f0:	2208      	movs	r2, #8
 80005f2:	74da      	strb	r2, [r3, #19]
 80005f4:	4bb6      	ldr	r3, [pc, #728]	; (80008d0 <main+0x440>)
 80005f6:	2218      	movs	r2, #24
 80005f8:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00001000;buff_data[28]=0b00011000;
 80005fa:	4bb5      	ldr	r3, [pc, #724]	; (80008d0 <main+0x440>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	711a      	strb	r2, [r3, #4]
 8000600:	4bb3      	ldr	r3, [pc, #716]	; (80008d0 <main+0x440>)
 8000602:	2210      	movs	r2, #16
 8000604:	731a      	strb	r2, [r3, #12]
 8000606:	4bb2      	ldr	r3, [pc, #712]	; (80008d0 <main+0x440>)
 8000608:	2208      	movs	r2, #8
 800060a:	751a      	strb	r2, [r3, #20]
 800060c:	4bb0      	ldr	r3, [pc, #704]	; (80008d0 <main+0x440>)
 800060e:	2218      	movs	r2, #24
 8000610:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 8000612:	4baf      	ldr	r3, [pc, #700]	; (80008d0 <main+0x440>)
 8000614:	2200      	movs	r2, #0
 8000616:	715a      	strb	r2, [r3, #5]
 8000618:	4bad      	ldr	r3, [pc, #692]	; (80008d0 <main+0x440>)
 800061a:	2210      	movs	r2, #16
 800061c:	735a      	strb	r2, [r3, #13]
 800061e:	4bac      	ldr	r3, [pc, #688]	; (80008d0 <main+0x440>)
 8000620:	2200      	movs	r2, #0
 8000622:	755a      	strb	r2, [r3, #21]
 8000624:	4baa      	ldr	r3, [pc, #680]	; (80008d0 <main+0x440>)
 8000626:	2200      	movs	r2, #0
 8000628:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001000;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 800062a:	4ba9      	ldr	r3, [pc, #676]	; (80008d0 <main+0x440>)
 800062c:	2208      	movs	r2, #8
 800062e:	719a      	strb	r2, [r3, #6]
 8000630:	4ba7      	ldr	r3, [pc, #668]	; (80008d0 <main+0x440>)
 8000632:	2210      	movs	r2, #16
 8000634:	739a      	strb	r2, [r3, #14]
 8000636:	4ba6      	ldr	r3, [pc, #664]	; (80008d0 <main+0x440>)
 8000638:	2200      	movs	r2, #0
 800063a:	759a      	strb	r2, [r3, #22]
 800063c:	4ba4      	ldr	r3, [pc, #656]	; (80008d0 <main+0x440>)
 800063e:	2200      	movs	r2, #0
 8000640:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000642:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <main+0x440>)
 8000644:	2200      	movs	r2, #0
 8000646:	71da      	strb	r2, [r3, #7]
 8000648:	4ba1      	ldr	r3, [pc, #644]	; (80008d0 <main+0x440>)
 800064a:	2210      	movs	r2, #16
 800064c:	73da      	strb	r2, [r3, #15]
 800064e:	4ba0      	ldr	r3, [pc, #640]	; (80008d0 <main+0x440>)
 8000650:	2200      	movs	r2, #0
 8000652:	75da      	strb	r2, [r3, #23]
 8000654:	4b9e      	ldr	r3, [pc, #632]	; (80008d0 <main+0x440>)
 8000656:	2200      	movs	r2, #0
 8000658:	77da      	strb	r2, [r3, #31]
    build_buffer();
 800065a:	f7ff fdf5 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 800065e:	206e      	movs	r0, #110	; 0x6e
 8000660:	f7ff fddc 	bl	800021c <DelayMS>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000010;buff_data[24]=0b00000000;
 8000664:	4b9a      	ldr	r3, [pc, #616]	; (80008d0 <main+0x440>)
 8000666:	2220      	movs	r2, #32
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	4b99      	ldr	r3, [pc, #612]	; (80008d0 <main+0x440>)
 800066c:	2210      	movs	r2, #16
 800066e:	721a      	strb	r2, [r3, #8]
 8000670:	4b97      	ldr	r3, [pc, #604]	; (80008d0 <main+0x440>)
 8000672:	2202      	movs	r2, #2
 8000674:	741a      	strb	r2, [r3, #16]
 8000676:	4b96      	ldr	r3, [pc, #600]	; (80008d0 <main+0x440>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b10000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 800067c:	4b94      	ldr	r3, [pc, #592]	; (80008d0 <main+0x440>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	705a      	strb	r2, [r3, #1]
 8000682:	4b93      	ldr	r3, [pc, #588]	; (80008d0 <main+0x440>)
 8000684:	2210      	movs	r2, #16
 8000686:	725a      	strb	r2, [r3, #9]
 8000688:	4b91      	ldr	r3, [pc, #580]	; (80008d0 <main+0x440>)
 800068a:	2200      	movs	r2, #0
 800068c:	745a      	strb	r2, [r3, #17]
 800068e:	4b90      	ldr	r3, [pc, #576]	; (80008d0 <main+0x440>)
 8000690:	2200      	movs	r2, #0
 8000692:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 8000694:	4b8e      	ldr	r3, [pc, #568]	; (80008d0 <main+0x440>)
 8000696:	2200      	movs	r2, #0
 8000698:	709a      	strb	r2, [r3, #2]
 800069a:	4b8d      	ldr	r3, [pc, #564]	; (80008d0 <main+0x440>)
 800069c:	2210      	movs	r2, #16
 800069e:	729a      	strb	r2, [r3, #10]
 80006a0:	4b8b      	ldr	r3, [pc, #556]	; (80008d0 <main+0x440>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	749a      	strb	r2, [r3, #18]
 80006a6:	4b8a      	ldr	r3, [pc, #552]	; (80008d0 <main+0x440>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00010000;buff_data[27]=0b00011000;
 80006ac:	4b88      	ldr	r3, [pc, #544]	; (80008d0 <main+0x440>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]
 80006b2:	4b87      	ldr	r3, [pc, #540]	; (80008d0 <main+0x440>)
 80006b4:	2210      	movs	r2, #16
 80006b6:	72da      	strb	r2, [r3, #11]
 80006b8:	4b85      	ldr	r3, [pc, #532]	; (80008d0 <main+0x440>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	74da      	strb	r2, [r3, #19]
 80006be:	4b84      	ldr	r3, [pc, #528]	; (80008d0 <main+0x440>)
 80006c0:	2218      	movs	r2, #24
 80006c2:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00010000;buff_data[28]=0b00011000;
 80006c4:	4b82      	ldr	r3, [pc, #520]	; (80008d0 <main+0x440>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	711a      	strb	r2, [r3, #4]
 80006ca:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <main+0x440>)
 80006cc:	2210      	movs	r2, #16
 80006ce:	731a      	strb	r2, [r3, #12]
 80006d0:	4b7f      	ldr	r3, [pc, #508]	; (80008d0 <main+0x440>)
 80006d2:	2210      	movs	r2, #16
 80006d4:	751a      	strb	r2, [r3, #20]
 80006d6:	4b7e      	ldr	r3, [pc, #504]	; (80008d0 <main+0x440>)
 80006d8:	2218      	movs	r2, #24
 80006da:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 80006dc:	4b7c      	ldr	r3, [pc, #496]	; (80008d0 <main+0x440>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
 80006e2:	4b7b      	ldr	r3, [pc, #492]	; (80008d0 <main+0x440>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	735a      	strb	r2, [r3, #13]
 80006e8:	4b79      	ldr	r3, [pc, #484]	; (80008d0 <main+0x440>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	755a      	strb	r2, [r3, #21]
 80006ee:	4b78      	ldr	r3, [pc, #480]	; (80008d0 <main+0x440>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 80006f4:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <main+0x440>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	719a      	strb	r2, [r3, #6]
 80006fa:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <main+0x440>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	739a      	strb	r2, [r3, #14]
 8000700:	4b73      	ldr	r3, [pc, #460]	; (80008d0 <main+0x440>)
 8000702:	2200      	movs	r2, #0
 8000704:	759a      	strb	r2, [r3, #22]
 8000706:	4b72      	ldr	r3, [pc, #456]	; (80008d0 <main+0x440>)
 8000708:	2200      	movs	r2, #0
 800070a:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 800070c:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <main+0x440>)
 800070e:	2200      	movs	r2, #0
 8000710:	71da      	strb	r2, [r3, #7]
 8000712:	4b6f      	ldr	r3, [pc, #444]	; (80008d0 <main+0x440>)
 8000714:	2210      	movs	r2, #16
 8000716:	73da      	strb	r2, [r3, #15]
 8000718:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <main+0x440>)
 800071a:	2200      	movs	r2, #0
 800071c:	75da      	strb	r2, [r3, #23]
 800071e:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <main+0x440>)
 8000720:	2200      	movs	r2, #0
 8000722:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000724:	f7ff fd90 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000728:	206e      	movs	r0, #110	; 0x6e
 800072a:	f7ff fd77 	bl	800021c <DelayMS>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000100;buff_data[24]=0b00000000;
 800072e:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <main+0x440>)
 8000730:	2220      	movs	r2, #32
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	4b66      	ldr	r3, [pc, #408]	; (80008d0 <main+0x440>)
 8000736:	2210      	movs	r2, #16
 8000738:	721a      	strb	r2, [r3, #8]
 800073a:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <main+0x440>)
 800073c:	2204      	movs	r2, #4
 800073e:	741a      	strb	r2, [r3, #16]
 8000740:	4b63      	ldr	r3, [pc, #396]	; (80008d0 <main+0x440>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000746:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <main+0x440>)
 8000748:	2200      	movs	r2, #0
 800074a:	705a      	strb	r2, [r3, #1]
 800074c:	4b60      	ldr	r3, [pc, #384]	; (80008d0 <main+0x440>)
 800074e:	2210      	movs	r2, #16
 8000750:	725a      	strb	r2, [r3, #9]
 8000752:	4b5f      	ldr	r3, [pc, #380]	; (80008d0 <main+0x440>)
 8000754:	2200      	movs	r2, #0
 8000756:	745a      	strb	r2, [r3, #17]
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <main+0x440>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 800075e:	4b5c      	ldr	r3, [pc, #368]	; (80008d0 <main+0x440>)
 8000760:	2200      	movs	r2, #0
 8000762:	709a      	strb	r2, [r3, #2]
 8000764:	4b5a      	ldr	r3, [pc, #360]	; (80008d0 <main+0x440>)
 8000766:	2210      	movs	r2, #16
 8000768:	729a      	strb	r2, [r3, #10]
 800076a:	4b59      	ldr	r3, [pc, #356]	; (80008d0 <main+0x440>)
 800076c:	2200      	movs	r2, #0
 800076e:	749a      	strb	r2, [r3, #18]
 8000770:	4b57      	ldr	r3, [pc, #348]	; (80008d0 <main+0x440>)
 8000772:	2200      	movs	r2, #0
 8000774:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b00010000;buff_data[19]=0b00100000;buff_data[27]=0b00011000;
 8000776:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <main+0x440>)
 8000778:	2202      	movs	r2, #2
 800077a:	70da      	strb	r2, [r3, #3]
 800077c:	4b54      	ldr	r3, [pc, #336]	; (80008d0 <main+0x440>)
 800077e:	2210      	movs	r2, #16
 8000780:	72da      	strb	r2, [r3, #11]
 8000782:	4b53      	ldr	r3, [pc, #332]	; (80008d0 <main+0x440>)
 8000784:	2220      	movs	r2, #32
 8000786:	74da      	strb	r2, [r3, #19]
 8000788:	4b51      	ldr	r3, [pc, #324]	; (80008d0 <main+0x440>)
 800078a:	2218      	movs	r2, #24
 800078c:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00100000;buff_data[28]=0b00011000;
 800078e:	4b50      	ldr	r3, [pc, #320]	; (80008d0 <main+0x440>)
 8000790:	2200      	movs	r2, #0
 8000792:	711a      	strb	r2, [r3, #4]
 8000794:	4b4e      	ldr	r3, [pc, #312]	; (80008d0 <main+0x440>)
 8000796:	2210      	movs	r2, #16
 8000798:	731a      	strb	r2, [r3, #12]
 800079a:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <main+0x440>)
 800079c:	2220      	movs	r2, #32
 800079e:	751a      	strb	r2, [r3, #20]
 80007a0:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <main+0x440>)
 80007a2:	2218      	movs	r2, #24
 80007a4:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001000;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <main+0x440>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	715a      	strb	r2, [r3, #5]
 80007ac:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <main+0x440>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	735a      	strb	r2, [r3, #13]
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <main+0x440>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	755a      	strb	r2, [r3, #21]
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <main+0x440>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <main+0x440>)
 80007c0:	220c      	movs	r2, #12
 80007c2:	719a      	strb	r2, [r3, #6]
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <main+0x440>)
 80007c6:	2210      	movs	r2, #16
 80007c8:	739a      	strb	r2, [r3, #14]
 80007ca:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <main+0x440>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	759a      	strb	r2, [r3, #22]
 80007d0:	4b3f      	ldr	r3, [pc, #252]	; (80008d0 <main+0x440>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80007d6:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <main+0x440>)
 80007d8:	2200      	movs	r2, #0
 80007da:	71da      	strb	r2, [r3, #7]
 80007dc:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <main+0x440>)
 80007de:	2210      	movs	r2, #16
 80007e0:	73da      	strb	r2, [r3, #15]
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <main+0x440>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	75da      	strb	r2, [r3, #23]
 80007e8:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <main+0x440>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80007ee:	f7ff fd2b 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 80007f2:	206e      	movs	r0, #110	; 0x6e
 80007f4:	f7ff fd12 	bl	800021c <DelayMS>
    buff_data[0]=0b00000000;buff_data[8] =0b00010000;buff_data[16]=0b00001000;buff_data[24]=0b00000000;
 80007f8:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <main+0x440>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <main+0x440>)
 8000800:	2210      	movs	r2, #16
 8000802:	721a      	strb	r2, [r3, #8]
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <main+0x440>)
 8000806:	2208      	movs	r2, #8
 8000808:	741a      	strb	r2, [r3, #16]
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <main+0x440>)
 800080c:	2200      	movs	r2, #0
 800080e:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00010000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <main+0x440>)
 8000812:	2200      	movs	r2, #0
 8000814:	705a      	strb	r2, [r3, #1]
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <main+0x440>)
 8000818:	2210      	movs	r2, #16
 800081a:	725a      	strb	r2, [r3, #9]
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <main+0x440>)
 800081e:	2200      	movs	r2, #0
 8000820:	745a      	strb	r2, [r3, #17]
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <main+0x440>)
 8000824:	2200      	movs	r2, #0
 8000826:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00100000;buff_data[10]=0b00010000;buff_data[18]=0b00000000;buff_data[26]=0b00000000;
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <main+0x440>)
 800082a:	2220      	movs	r2, #32
 800082c:	709a      	strb	r2, [r3, #2]
 800082e:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <main+0x440>)
 8000830:	2210      	movs	r2, #16
 8000832:	729a      	strb	r2, [r3, #10]
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <main+0x440>)
 8000836:	2200      	movs	r2, #0
 8000838:	749a      	strb	r2, [r3, #18]
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <main+0x440>)
 800083c:	2200      	movs	r2, #0
 800083e:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100001;buff_data[27]=0b00011000;
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <main+0x440>)
 8000842:	2200      	movs	r2, #0
 8000844:	70da      	strb	r2, [r3, #3]
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <main+0x440>)
 8000848:	2210      	movs	r2, #16
 800084a:	72da      	strb	r2, [r3, #11]
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <main+0x440>)
 800084e:	2221      	movs	r2, #33	; 0x21
 8000850:	74da      	strb	r2, [r3, #19]
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <main+0x440>)
 8000854:	2218      	movs	r2, #24
 8000856:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00100001;buff_data[28]=0b00011000;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <main+0x440>)
 800085a:	2200      	movs	r2, #0
 800085c:	711a      	strb	r2, [r3, #4]
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <main+0x440>)
 8000860:	2210      	movs	r2, #16
 8000862:	731a      	strb	r2, [r3, #12]
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <main+0x440>)
 8000866:	2221      	movs	r2, #33	; 0x21
 8000868:	751a      	strb	r2, [r3, #20]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <main+0x440>)
 800086c:	2218      	movs	r2, #24
 800086e:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001100;buff_data[13]=0b00010000;buff_data[21]=0b00000000;buff_data[29]=0b00000000;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <main+0x440>)
 8000872:	220c      	movs	r2, #12
 8000874:	715a      	strb	r2, [r3, #5]
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <main+0x440>)
 8000878:	2210      	movs	r2, #16
 800087a:	735a      	strb	r2, [r3, #13]
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <main+0x440>)
 800087e:	2200      	movs	r2, #0
 8000880:	755a      	strb	r2, [r3, #21]
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <main+0x440>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00010000;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <main+0x440>)
 800088a:	220c      	movs	r2, #12
 800088c:	719a      	strb	r2, [r3, #6]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <main+0x440>)
 8000890:	2210      	movs	r2, #16
 8000892:	739a      	strb	r2, [r3, #14]
 8000894:	e01e      	b.n	80008d4 <main+0x444>
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000
 800089c:	fffff0c3 	.word	0xfffff0c3
 80008a0:	fffff7ff 	.word	0xfffff7ff
 80008a4:	ff00000f 	.word	0xff00000f
 80008a8:	40020008 	.word	0x40020008
 80008ac:	ffff80be 	.word	0xffff80be
 80008b0:	000025b0 	.word	0x000025b0
 80008b4:	40020800 	.word	0x40020800
 80008b8:	20000024 	.word	0x20000024
 80008bc:	4001300c 	.word	0x4001300c
 80008c0:	40013000 	.word	0x40013000
 80008c4:	00004014 	.word	0x00004014
 80008c8:	fffff0ff 	.word	0xfffff0ff
 80008cc:	00000f0e 	.word	0x00000f0e
 80008d0:	20000064 	.word	0x20000064
 80008d4:	4bfe      	ldr	r3, [pc, #1016]	; (8000cd0 <main+0x840>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	759a      	strb	r2, [r3, #22]
 80008da:	4bfd      	ldr	r3, [pc, #1012]	; (8000cd0 <main+0x840>)
 80008dc:	2200      	movs	r2, #0
 80008de:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00010000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80008e0:	4bfb      	ldr	r3, [pc, #1004]	; (8000cd0 <main+0x840>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	71da      	strb	r2, [r3, #7]
 80008e6:	4bfa      	ldr	r3, [pc, #1000]	; (8000cd0 <main+0x840>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	73da      	strb	r2, [r3, #15]
 80008ec:	4bf8      	ldr	r3, [pc, #992]	; (8000cd0 <main+0x840>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	75da      	strb	r2, [r3, #23]
 80008f2:	4bf7      	ldr	r3, [pc, #988]	; (8000cd0 <main+0x840>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80008f8:	f7ff fca6 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 80008fc:	206e      	movs	r0, #110	; 0x6e
 80008fe:	f7ff fc8d 	bl	800021c <DelayMS>

    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b00100000;buff_data[24]=0b00000000;
 8000902:	4bf3      	ldr	r3, [pc, #972]	; (8000cd0 <main+0x840>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	4bf1      	ldr	r3, [pc, #964]	; (8000cd0 <main+0x840>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	721a      	strb	r2, [r3, #8]
 800090e:	4bf0      	ldr	r3, [pc, #960]	; (8000cd0 <main+0x840>)
 8000910:	2220      	movs	r2, #32
 8000912:	741a      	strb	r2, [r3, #16]
 8000914:	4bee      	ldr	r3, [pc, #952]	; (8000cd0 <main+0x840>)
 8000916:	2200      	movs	r2, #0
 8000918:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 800091a:	4bed      	ldr	r3, [pc, #948]	; (8000cd0 <main+0x840>)
 800091c:	2200      	movs	r2, #0
 800091e:	705a      	strb	r2, [r3, #1]
 8000920:	4beb      	ldr	r3, [pc, #940]	; (8000cd0 <main+0x840>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	725a      	strb	r2, [r3, #9]
 8000926:	4bea      	ldr	r3, [pc, #936]	; (8000cd0 <main+0x840>)
 8000928:	2200      	movs	r2, #0
 800092a:	745a      	strb	r2, [r3, #17]
 800092c:	4be8      	ldr	r3, [pc, #928]	; (8000cd0 <main+0x840>)
 800092e:	2200      	movs	r2, #0
 8000930:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000932:	4be7      	ldr	r3, [pc, #924]	; (8000cd0 <main+0x840>)
 8000934:	2200      	movs	r2, #0
 8000936:	709a      	strb	r2, [r3, #2]
 8000938:	4be5      	ldr	r3, [pc, #916]	; (8000cd0 <main+0x840>)
 800093a:	2220      	movs	r2, #32
 800093c:	729a      	strb	r2, [r3, #10]
 800093e:	4be4      	ldr	r3, [pc, #912]	; (8000cd0 <main+0x840>)
 8000940:	2200      	movs	r2, #0
 8000942:	749a      	strb	r2, [r3, #18]
 8000944:	4be2      	ldr	r3, [pc, #904]	; (8000cd0 <main+0x840>)
 8000946:	223c      	movs	r2, #60	; 0x3c
 8000948:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100010;buff_data[27]=0b00100100;
 800094a:	4be1      	ldr	r3, [pc, #900]	; (8000cd0 <main+0x840>)
 800094c:	2200      	movs	r2, #0
 800094e:	70da      	strb	r2, [r3, #3]
 8000950:	4bdf      	ldr	r3, [pc, #892]	; (8000cd0 <main+0x840>)
 8000952:	2210      	movs	r2, #16
 8000954:	72da      	strb	r2, [r3, #11]
 8000956:	4bde      	ldr	r3, [pc, #888]	; (8000cd0 <main+0x840>)
 8000958:	2222      	movs	r2, #34	; 0x22
 800095a:	74da      	strb	r2, [r3, #19]
 800095c:	4bdc      	ldr	r3, [pc, #880]	; (8000cd0 <main+0x840>)
 800095e:	2224      	movs	r2, #36	; 0x24
 8000960:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00100010;buff_data[28]=0b00100100;
 8000962:	4bdb      	ldr	r3, [pc, #876]	; (8000cd0 <main+0x840>)
 8000964:	2200      	movs	r2, #0
 8000966:	711a      	strb	r2, [r3, #4]
 8000968:	4bd9      	ldr	r3, [pc, #868]	; (8000cd0 <main+0x840>)
 800096a:	2208      	movs	r2, #8
 800096c:	731a      	strb	r2, [r3, #12]
 800096e:	4bd8      	ldr	r3, [pc, #864]	; (8000cd0 <main+0x840>)
 8000970:	2222      	movs	r2, #34	; 0x22
 8000972:	751a      	strb	r2, [r3, #20]
 8000974:	4bd6      	ldr	r3, [pc, #856]	; (8000cd0 <main+0x840>)
 8000976:	2224      	movs	r2, #36	; 0x24
 8000978:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 800097a:	4bd5      	ldr	r3, [pc, #852]	; (8000cd0 <main+0x840>)
 800097c:	2200      	movs	r2, #0
 800097e:	715a      	strb	r2, [r3, #5]
 8000980:	4bd3      	ldr	r3, [pc, #844]	; (8000cd0 <main+0x840>)
 8000982:	2204      	movs	r2, #4
 8000984:	735a      	strb	r2, [r3, #13]
 8000986:	4bd2      	ldr	r3, [pc, #840]	; (8000cd0 <main+0x840>)
 8000988:	2200      	movs	r2, #0
 800098a:	755a      	strb	r2, [r3, #21]
 800098c:	4bd0      	ldr	r3, [pc, #832]	; (8000cd0 <main+0x840>)
 800098e:	223c      	movs	r2, #60	; 0x3c
 8000990:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000992:	4bcf      	ldr	r3, [pc, #828]	; (8000cd0 <main+0x840>)
 8000994:	2200      	movs	r2, #0
 8000996:	719a      	strb	r2, [r3, #6]
 8000998:	4bcd      	ldr	r3, [pc, #820]	; (8000cd0 <main+0x840>)
 800099a:	2202      	movs	r2, #2
 800099c:	739a      	strb	r2, [r3, #14]
 800099e:	4bcc      	ldr	r3, [pc, #816]	; (8000cd0 <main+0x840>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	759a      	strb	r2, [r3, #22]
 80009a4:	4bca      	ldr	r3, [pc, #808]	; (8000cd0 <main+0x840>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 80009aa:	4bc9      	ldr	r3, [pc, #804]	; (8000cd0 <main+0x840>)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	71da      	strb	r2, [r3, #7]
 80009b0:	4bc7      	ldr	r3, [pc, #796]	; (8000cd0 <main+0x840>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	73da      	strb	r2, [r3, #15]
 80009b6:	4bc6      	ldr	r3, [pc, #792]	; (8000cd0 <main+0x840>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	75da      	strb	r2, [r3, #23]
 80009bc:	4bc4      	ldr	r3, [pc, #784]	; (8000cd0 <main+0x840>)
 80009be:	2200      	movs	r2, #0
 80009c0:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80009c2:	f7ff fc41 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 80009c6:	206e      	movs	r0, #110	; 0x6e
 80009c8:	f7ff fc28 	bl	800021c <DelayMS>
    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b01000001;buff_data[24]=0b00000000;
 80009cc:	4bc0      	ldr	r3, [pc, #768]	; (8000cd0 <main+0x840>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	4bbf      	ldr	r3, [pc, #764]	; (8000cd0 <main+0x840>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	721a      	strb	r2, [r3, #8]
 80009d8:	4bbd      	ldr	r3, [pc, #756]	; (8000cd0 <main+0x840>)
 80009da:	2241      	movs	r2, #65	; 0x41
 80009dc:	741a      	strb	r2, [r3, #16]
 80009de:	4bbc      	ldr	r3, [pc, #752]	; (8000cd0 <main+0x840>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 80009e4:	4bba      	ldr	r3, [pc, #744]	; (8000cd0 <main+0x840>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	705a      	strb	r2, [r3, #1]
 80009ea:	4bb9      	ldr	r3, [pc, #740]	; (8000cd0 <main+0x840>)
 80009ec:	2240      	movs	r2, #64	; 0x40
 80009ee:	725a      	strb	r2, [r3, #9]
 80009f0:	4bb7      	ldr	r3, [pc, #732]	; (8000cd0 <main+0x840>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	745a      	strb	r2, [r3, #17]
 80009f6:	4bb6      	ldr	r3, [pc, #728]	; (8000cd0 <main+0x840>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 80009fc:	4bb4      	ldr	r3, [pc, #720]	; (8000cd0 <main+0x840>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	709a      	strb	r2, [r3, #2]
 8000a02:	4bb3      	ldr	r3, [pc, #716]	; (8000cd0 <main+0x840>)
 8000a04:	2220      	movs	r2, #32
 8000a06:	729a      	strb	r2, [r3, #10]
 8000a08:	4bb1      	ldr	r3, [pc, #708]	; (8000cd0 <main+0x840>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	749a      	strb	r2, [r3, #18]
 8000a0e:	4bb0      	ldr	r3, [pc, #704]	; (8000cd0 <main+0x840>)
 8000a10:	223c      	movs	r2, #60	; 0x3c
 8000a12:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00100100;buff_data[27]=0b00100100;
 8000a14:	4bae      	ldr	r3, [pc, #696]	; (8000cd0 <main+0x840>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	70da      	strb	r2, [r3, #3]
 8000a1a:	4bad      	ldr	r3, [pc, #692]	; (8000cd0 <main+0x840>)
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	72da      	strb	r2, [r3, #11]
 8000a20:	4bab      	ldr	r3, [pc, #684]	; (8000cd0 <main+0x840>)
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	74da      	strb	r2, [r3, #19]
 8000a26:	4baa      	ldr	r3, [pc, #680]	; (8000cd0 <main+0x840>)
 8000a28:	2224      	movs	r2, #36	; 0x24
 8000a2a:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00100000;buff_data[12]=0b00001000;buff_data[20]=0b00100100;buff_data[28]=0b00100100;
 8000a2c:	4ba8      	ldr	r3, [pc, #672]	; (8000cd0 <main+0x840>)
 8000a2e:	2220      	movs	r2, #32
 8000a30:	711a      	strb	r2, [r3, #4]
 8000a32:	4ba7      	ldr	r3, [pc, #668]	; (8000cd0 <main+0x840>)
 8000a34:	2208      	movs	r2, #8
 8000a36:	731a      	strb	r2, [r3, #12]
 8000a38:	4ba5      	ldr	r3, [pc, #660]	; (8000cd0 <main+0x840>)
 8000a3a:	2224      	movs	r2, #36	; 0x24
 8000a3c:	751a      	strb	r2, [r3, #20]
 8000a3e:	4ba4      	ldr	r3, [pc, #656]	; (8000cd0 <main+0x840>)
 8000a40:	2224      	movs	r2, #36	; 0x24
 8000a42:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000a44:	4ba2      	ldr	r3, [pc, #648]	; (8000cd0 <main+0x840>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	715a      	strb	r2, [r3, #5]
 8000a4a:	4ba1      	ldr	r3, [pc, #644]	; (8000cd0 <main+0x840>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	735a      	strb	r2, [r3, #13]
 8000a50:	4b9f      	ldr	r3, [pc, #636]	; (8000cd0 <main+0x840>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	755a      	strb	r2, [r3, #21]
 8000a56:	4b9e      	ldr	r3, [pc, #632]	; (8000cd0 <main+0x840>)
 8000a58:	223c      	movs	r2, #60	; 0x3c
 8000a5a:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000a5c:	4b9c      	ldr	r3, [pc, #624]	; (8000cd0 <main+0x840>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	719a      	strb	r2, [r3, #6]
 8000a62:	4b9b      	ldr	r3, [pc, #620]	; (8000cd0 <main+0x840>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	739a      	strb	r2, [r3, #14]
 8000a68:	4b99      	ldr	r3, [pc, #612]	; (8000cd0 <main+0x840>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	759a      	strb	r2, [r3, #22]
 8000a6e:	4b98      	ldr	r3, [pc, #608]	; (8000cd0 <main+0x840>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000a74:	4b96      	ldr	r3, [pc, #600]	; (8000cd0 <main+0x840>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	71da      	strb	r2, [r3, #7]
 8000a7a:	4b95      	ldr	r3, [pc, #596]	; (8000cd0 <main+0x840>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	73da      	strb	r2, [r3, #15]
 8000a80:	4b93      	ldr	r3, [pc, #588]	; (8000cd0 <main+0x840>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	75da      	strb	r2, [r3, #23]
 8000a86:	4b92      	ldr	r3, [pc, #584]	; (8000cd0 <main+0x840>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000a8c:	f7ff fbdc 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000a90:	206e      	movs	r0, #110	; 0x6e
 8000a92:	f7ff fbc3 	bl	800021c <DelayMS>
    buff_data[0]=0b00100000;buff_data[8] =0b10000000;buff_data[16]=0b01000010;buff_data[24]=0b00000000;
 8000a96:	4b8e      	ldr	r3, [pc, #568]	; (8000cd0 <main+0x840>)
 8000a98:	2220      	movs	r2, #32
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	4b8c      	ldr	r3, [pc, #560]	; (8000cd0 <main+0x840>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	721a      	strb	r2, [r3, #8]
 8000aa2:	4b8b      	ldr	r3, [pc, #556]	; (8000cd0 <main+0x840>)
 8000aa4:	2242      	movs	r2, #66	; 0x42
 8000aa6:	741a      	strb	r2, [r3, #16]
 8000aa8:	4b89      	ldr	r3, [pc, #548]	; (8000cd0 <main+0x840>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000aae:	4b88      	ldr	r3, [pc, #544]	; (8000cd0 <main+0x840>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	705a      	strb	r2, [r3, #1]
 8000ab4:	4b86      	ldr	r3, [pc, #536]	; (8000cd0 <main+0x840>)
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	725a      	strb	r2, [r3, #9]
 8000aba:	4b85      	ldr	r3, [pc, #532]	; (8000cd0 <main+0x840>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	745a      	strb	r2, [r3, #17]
 8000ac0:	4b83      	ldr	r3, [pc, #524]	; (8000cd0 <main+0x840>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000ac6:	4b82      	ldr	r3, [pc, #520]	; (8000cd0 <main+0x840>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	709a      	strb	r2, [r3, #2]
 8000acc:	4b80      	ldr	r3, [pc, #512]	; (8000cd0 <main+0x840>)
 8000ace:	2220      	movs	r2, #32
 8000ad0:	729a      	strb	r2, [r3, #10]
 8000ad2:	4b7f      	ldr	r3, [pc, #508]	; (8000cd0 <main+0x840>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	749a      	strb	r2, [r3, #18]
 8000ad8:	4b7d      	ldr	r3, [pc, #500]	; (8000cd0 <main+0x840>)
 8000ada:	223c      	movs	r2, #60	; 0x3c
 8000adc:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b00010000;buff_data[19]=0b00101000;buff_data[27]=0b00100100;
 8000ade:	4b7c      	ldr	r3, [pc, #496]	; (8000cd0 <main+0x840>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	70da      	strb	r2, [r3, #3]
 8000ae4:	4b7a      	ldr	r3, [pc, #488]	; (8000cd0 <main+0x840>)
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	72da      	strb	r2, [r3, #11]
 8000aea:	4b79      	ldr	r3, [pc, #484]	; (8000cd0 <main+0x840>)
 8000aec:	2228      	movs	r2, #40	; 0x28
 8000aee:	74da      	strb	r2, [r3, #19]
 8000af0:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <main+0x840>)
 8000af2:	2224      	movs	r2, #36	; 0x24
 8000af4:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00101000;buff_data[28]=0b00100100;
 8000af6:	4b76      	ldr	r3, [pc, #472]	; (8000cd0 <main+0x840>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	711a      	strb	r2, [r3, #4]
 8000afc:	4b74      	ldr	r3, [pc, #464]	; (8000cd0 <main+0x840>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	731a      	strb	r2, [r3, #12]
 8000b02:	4b73      	ldr	r3, [pc, #460]	; (8000cd0 <main+0x840>)
 8000b04:	2228      	movs	r2, #40	; 0x28
 8000b06:	751a      	strb	r2, [r3, #20]
 8000b08:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <main+0x840>)
 8000b0a:	2224      	movs	r2, #36	; 0x24
 8000b0c:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <main+0x840>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	715a      	strb	r2, [r3, #5]
 8000b14:	4b6e      	ldr	r3, [pc, #440]	; (8000cd0 <main+0x840>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	735a      	strb	r2, [r3, #13]
 8000b1a:	4b6d      	ldr	r3, [pc, #436]	; (8000cd0 <main+0x840>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	755a      	strb	r2, [r3, #21]
 8000b20:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <main+0x840>)
 8000b22:	223c      	movs	r2, #60	; 0x3c
 8000b24:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000b26:	4b6a      	ldr	r3, [pc, #424]	; (8000cd0 <main+0x840>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	719a      	strb	r2, [r3, #6]
 8000b2c:	4b68      	ldr	r3, [pc, #416]	; (8000cd0 <main+0x840>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	739a      	strb	r2, [r3, #14]
 8000b32:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <main+0x840>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	759a      	strb	r2, [r3, #22]
 8000b38:	4b65      	ldr	r3, [pc, #404]	; (8000cd0 <main+0x840>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000b3e:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <main+0x840>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	71da      	strb	r2, [r3, #7]
 8000b44:	4b62      	ldr	r3, [pc, #392]	; (8000cd0 <main+0x840>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	73da      	strb	r2, [r3, #15]
 8000b4a:	4b61      	ldr	r3, [pc, #388]	; (8000cd0 <main+0x840>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	75da      	strb	r2, [r3, #23]
 8000b50:	4b5f      	ldr	r3, [pc, #380]	; (8000cd0 <main+0x840>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000b56:	f7ff fb77 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000b5a:	206e      	movs	r0, #110	; 0x6e
 8000b5c:	f7ff fb5e 	bl	800021c <DelayMS>
    buff_data[0]=0b00000000;buff_data[8] =0b10000000;buff_data[16]=0b01000100;buff_data[24]=0b00000000;
 8000b60:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <main+0x840>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <main+0x840>)
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	721a      	strb	r2, [r3, #8]
 8000b6c:	4b58      	ldr	r3, [pc, #352]	; (8000cd0 <main+0x840>)
 8000b6e:	2244      	movs	r2, #68	; 0x44
 8000b70:	741a      	strb	r2, [r3, #16]
 8000b72:	4b57      	ldr	r3, [pc, #348]	; (8000cd0 <main+0x840>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b01000000;buff_data[17]=0b00000000;buff_data[25]=0b00000000;
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <main+0x840>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	705a      	strb	r2, [r3, #1]
 8000b7e:	4b54      	ldr	r3, [pc, #336]	; (8000cd0 <main+0x840>)
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	725a      	strb	r2, [r3, #9]
 8000b84:	4b52      	ldr	r3, [pc, #328]	; (8000cd0 <main+0x840>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	745a      	strb	r2, [r3, #17]
 8000b8a:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <main+0x840>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00100000;buff_data[10]=0b00100000;buff_data[18]=0b00000000;buff_data[26]=0b00111100;
 8000b90:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <main+0x840>)
 8000b92:	2220      	movs	r2, #32
 8000b94:	709a      	strb	r2, [r3, #2]
 8000b96:	4b4e      	ldr	r3, [pc, #312]	; (8000cd0 <main+0x840>)
 8000b98:	2220      	movs	r2, #32
 8000b9a:	729a      	strb	r2, [r3, #10]
 8000b9c:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <main+0x840>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	749a      	strb	r2, [r3, #18]
 8000ba2:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <main+0x840>)
 8000ba4:	223c      	movs	r2, #60	; 0x3c
 8000ba6:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00010000;buff_data[19]=0b00110000;buff_data[27]=0b00100100;
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <main+0x840>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	70da      	strb	r2, [r3, #3]
 8000bae:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <main+0x840>)
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	72da      	strb	r2, [r3, #11]
 8000bb4:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <main+0x840>)
 8000bb6:	2230      	movs	r2, #48	; 0x30
 8000bb8:	74da      	strb	r2, [r3, #19]
 8000bba:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <main+0x840>)
 8000bbc:	2224      	movs	r2, #36	; 0x24
 8000bbe:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00001000;buff_data[20]=0b00110000;buff_data[28]=0b00100100;
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <main+0x840>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	711a      	strb	r2, [r3, #4]
 8000bc6:	4b42      	ldr	r3, [pc, #264]	; (8000cd0 <main+0x840>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	731a      	strb	r2, [r3, #12]
 8000bcc:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <main+0x840>)
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	751a      	strb	r2, [r3, #20]
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	; (8000cd0 <main+0x840>)
 8000bd4:	2224      	movs	r2, #36	; 0x24
 8000bd6:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000100;buff_data[21]=0b00000000;buff_data[29]=0b00111100;
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <main+0x840>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	715a      	strb	r2, [r3, #5]
 8000bde:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <main+0x840>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	735a      	strb	r2, [r3, #13]
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <main+0x840>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	755a      	strb	r2, [r3, #21]
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <main+0x840>)
 8000bec:	223c      	movs	r2, #60	; 0x3c
 8000bee:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00001100;buff_data[14]=0b00000010;buff_data[22]=0b00000000;buff_data[30]=0b00000000;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <main+0x840>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	719a      	strb	r2, [r3, #6]
 8000bf6:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <main+0x840>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	739a      	strb	r2, [r3, #14]
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <main+0x840>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	759a      	strb	r2, [r3, #22]
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <main+0x840>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000001;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <main+0x840>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	71da      	strb	r2, [r3, #7]
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <main+0x840>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	73da      	strb	r2, [r3, #15]
 8000c14:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <main+0x840>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	75da      	strb	r2, [r3, #23]
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <main+0x840>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000c20:	f7ff fb12 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000c24:	206e      	movs	r0, #110	; 0x6e
 8000c26:	f7ff faf9 	bl	800021c <DelayMS>


    buff_data[0]=0b00000000;buff_data[8] =0b00000000;buff_data[16]=0b01001000;buff_data[24]=0b00000000;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <main+0x840>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <main+0x840>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	721a      	strb	r2, [r3, #8]
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <main+0x840>)
 8000c38:	2248      	movs	r2, #72	; 0x48
 8000c3a:	741a      	strb	r2, [r3, #16]
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <main+0x840>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <main+0x840>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	705a      	strb	r2, [r3, #1]
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <main+0x840>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	725a      	strb	r2, [r3, #9]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <main+0x840>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	745a      	strb	r2, [r3, #17]
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <main+0x840>)
 8000c56:	227e      	movs	r2, #126	; 0x7e
 8000c58:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <main+0x840>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <main+0x840>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	729a      	strb	r2, [r3, #10]
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <main+0x840>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	749a      	strb	r2, [r3, #18]
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <main+0x840>)
 8000c6e:	2242      	movs	r2, #66	; 0x42
 8000c70:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b00010000;buff_data[27]=0b01000010;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <main+0x840>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	70da      	strb	r2, [r3, #3]
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <main+0x840>)
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	72da      	strb	r2, [r3, #11]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <main+0x840>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	74da      	strb	r2, [r3, #19]
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <main+0x840>)
 8000c86:	2242      	movs	r2, #66	; 0x42
 8000c88:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00100000;buff_data[28]=0b01000010;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <main+0x840>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	711a      	strb	r2, [r3, #4]
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <main+0x840>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	731a      	strb	r2, [r3, #12]
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <main+0x840>)
 8000c98:	2220      	movs	r2, #32
 8000c9a:	751a      	strb	r2, [r3, #20]
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <main+0x840>)
 8000c9e:	2242      	movs	r2, #66	; 0x42
 8000ca0:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <main+0x840>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	715a      	strb	r2, [r3, #5]
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <main+0x840>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	735a      	strb	r2, [r3, #13]
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <main+0x840>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	755a      	strb	r2, [r3, #21]
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <main+0x840>)
 8000cb6:	2242      	movs	r2, #66	; 0x42
 8000cb8:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <main+0x840>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	719a      	strb	r2, [r3, #6]
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <main+0x840>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	739a      	strb	r2, [r3, #14]
 8000cc6:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <main+0x840>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	759a      	strb	r2, [r3, #22]
 8000ccc:	e002      	b.n	8000cd4 <main+0x844>
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000064 	.word	0x20000064
 8000cd4:	4bfe      	ldr	r3, [pc, #1016]	; (80010d0 <main+0xc40>)
 8000cd6:	227e      	movs	r2, #126	; 0x7e
 8000cd8:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000001;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000cda:	4bfd      	ldr	r3, [pc, #1012]	; (80010d0 <main+0xc40>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	71da      	strb	r2, [r3, #7]
 8000ce0:	4bfb      	ldr	r3, [pc, #1004]	; (80010d0 <main+0xc40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	73da      	strb	r2, [r3, #15]
 8000ce6:	4bfa      	ldr	r3, [pc, #1000]	; (80010d0 <main+0xc40>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	75da      	strb	r2, [r3, #23]
 8000cec:	4bf8      	ldr	r3, [pc, #992]	; (80010d0 <main+0xc40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000cf2:	f7ff faa9 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000cf6:	206e      	movs	r0, #110	; 0x6e
 8000cf8:	f7ff fa90 	bl	800021c <DelayMS>
    buff_data[0]=0b00000000;buff_data[8] =0b00000000;buff_data[16]=0b01010000;buff_data[24]=0b00000000;
 8000cfc:	4bf4      	ldr	r3, [pc, #976]	; (80010d0 <main+0xc40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	4bf3      	ldr	r3, [pc, #972]	; (80010d0 <main+0xc40>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	721a      	strb	r2, [r3, #8]
 8000d08:	4bf1      	ldr	r3, [pc, #964]	; (80010d0 <main+0xc40>)
 8000d0a:	2250      	movs	r2, #80	; 0x50
 8000d0c:	741a      	strb	r2, [r3, #16]
 8000d0e:	4bf0      	ldr	r3, [pc, #960]	; (80010d0 <main+0xc40>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000d14:	4bee      	ldr	r3, [pc, #952]	; (80010d0 <main+0xc40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	705a      	strb	r2, [r3, #1]
 8000d1a:	4bed      	ldr	r3, [pc, #948]	; (80010d0 <main+0xc40>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	725a      	strb	r2, [r3, #9]
 8000d20:	4beb      	ldr	r3, [pc, #940]	; (80010d0 <main+0xc40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	745a      	strb	r2, [r3, #17]
 8000d26:	4bea      	ldr	r3, [pc, #936]	; (80010d0 <main+0xc40>)
 8000d28:	227e      	movs	r2, #126	; 0x7e
 8000d2a:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000d2c:	4be8      	ldr	r3, [pc, #928]	; (80010d0 <main+0xc40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	709a      	strb	r2, [r3, #2]
 8000d32:	4be7      	ldr	r3, [pc, #924]	; (80010d0 <main+0xc40>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	729a      	strb	r2, [r3, #10]
 8000d38:	4be5      	ldr	r3, [pc, #916]	; (80010d0 <main+0xc40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	749a      	strb	r2, [r3, #18]
 8000d3e:	4be4      	ldr	r3, [pc, #912]	; (80010d0 <main+0xc40>)
 8000d40:	2242      	movs	r2, #66	; 0x42
 8000d42:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b00100000;buff_data[27]=0b01000010;
 8000d44:	4be2      	ldr	r3, [pc, #904]	; (80010d0 <main+0xc40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
 8000d4a:	4be1      	ldr	r3, [pc, #900]	; (80010d0 <main+0xc40>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	72da      	strb	r2, [r3, #11]
 8000d50:	4bdf      	ldr	r3, [pc, #892]	; (80010d0 <main+0xc40>)
 8000d52:	2220      	movs	r2, #32
 8000d54:	74da      	strb	r2, [r3, #19]
 8000d56:	4bde      	ldr	r3, [pc, #888]	; (80010d0 <main+0xc40>)
 8000d58:	2242      	movs	r2, #66	; 0x42
 8000d5a:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00100000;buff_data[12]=0b00000000;buff_data[20]=0b00010000;buff_data[28]=0b01000010;
 8000d5c:	4bdc      	ldr	r3, [pc, #880]	; (80010d0 <main+0xc40>)
 8000d5e:	2220      	movs	r2, #32
 8000d60:	711a      	strb	r2, [r3, #4]
 8000d62:	4bdb      	ldr	r3, [pc, #876]	; (80010d0 <main+0xc40>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	731a      	strb	r2, [r3, #12]
 8000d68:	4bd9      	ldr	r3, [pc, #868]	; (80010d0 <main+0xc40>)
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	751a      	strb	r2, [r3, #20]
 8000d6e:	4bd8      	ldr	r3, [pc, #864]	; (80010d0 <main+0xc40>)
 8000d70:	2242      	movs	r2, #66	; 0x42
 8000d72:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000d74:	4bd6      	ldr	r3, [pc, #856]	; (80010d0 <main+0xc40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	715a      	strb	r2, [r3, #5]
 8000d7a:	4bd5      	ldr	r3, [pc, #852]	; (80010d0 <main+0xc40>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	735a      	strb	r2, [r3, #13]
 8000d80:	4bd3      	ldr	r3, [pc, #844]	; (80010d0 <main+0xc40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	755a      	strb	r2, [r3, #21]
 8000d86:	4bd2      	ldr	r3, [pc, #840]	; (80010d0 <main+0xc40>)
 8000d88:	2242      	movs	r2, #66	; 0x42
 8000d8a:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000d8c:	4bd0      	ldr	r3, [pc, #832]	; (80010d0 <main+0xc40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	719a      	strb	r2, [r3, #6]
 8000d92:	4bcf      	ldr	r3, [pc, #828]	; (80010d0 <main+0xc40>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	739a      	strb	r2, [r3, #14]
 8000d98:	4bcd      	ldr	r3, [pc, #820]	; (80010d0 <main+0xc40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	759a      	strb	r2, [r3, #22]
 8000d9e:	4bcc      	ldr	r3, [pc, #816]	; (80010d0 <main+0xc40>)
 8000da0:	227e      	movs	r2, #126	; 0x7e
 8000da2:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b10000000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000da4:	4bca      	ldr	r3, [pc, #808]	; (80010d0 <main+0xc40>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	71da      	strb	r2, [r3, #7]
 8000daa:	4bc9      	ldr	r3, [pc, #804]	; (80010d0 <main+0xc40>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	73da      	strb	r2, [r3, #15]
 8000db0:	4bc7      	ldr	r3, [pc, #796]	; (80010d0 <main+0xc40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	75da      	strb	r2, [r3, #23]
 8000db6:	4bc6      	ldr	r3, [pc, #792]	; (80010d0 <main+0xc40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000dbc:	f7ff fa44 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000dc0:	206e      	movs	r0, #110	; 0x6e
 8000dc2:	f7ff fa2b 	bl	800021c <DelayMS>
    buff_data[0]=0b00110000;buff_data[8] =0b00000000;buff_data[16]=0b01100000;buff_data[24]=0b00000000;
 8000dc6:	4bc2      	ldr	r3, [pc, #776]	; (80010d0 <main+0xc40>)
 8000dc8:	2230      	movs	r2, #48	; 0x30
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	4bc0      	ldr	r3, [pc, #768]	; (80010d0 <main+0xc40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	721a      	strb	r2, [r3, #8]
 8000dd2:	4bbf      	ldr	r3, [pc, #764]	; (80010d0 <main+0xc40>)
 8000dd4:	2260      	movs	r2, #96	; 0x60
 8000dd6:	741a      	strb	r2, [r3, #16]
 8000dd8:	4bbd      	ldr	r3, [pc, #756]	; (80010d0 <main+0xc40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000dde:	4bbc      	ldr	r3, [pc, #752]	; (80010d0 <main+0xc40>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	705a      	strb	r2, [r3, #1]
 8000de4:	4bba      	ldr	r3, [pc, #744]	; (80010d0 <main+0xc40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	725a      	strb	r2, [r3, #9]
 8000dea:	4bb9      	ldr	r3, [pc, #740]	; (80010d0 <main+0xc40>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	745a      	strb	r2, [r3, #17]
 8000df0:	4bb7      	ldr	r3, [pc, #732]	; (80010d0 <main+0xc40>)
 8000df2:	227e      	movs	r2, #126	; 0x7e
 8000df4:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000df6:	4bb6      	ldr	r3, [pc, #728]	; (80010d0 <main+0xc40>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	709a      	strb	r2, [r3, #2]
 8000dfc:	4bb4      	ldr	r3, [pc, #720]	; (80010d0 <main+0xc40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	729a      	strb	r2, [r3, #10]
 8000e02:	4bb3      	ldr	r3, [pc, #716]	; (80010d0 <main+0xc40>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	749a      	strb	r2, [r3, #18]
 8000e08:	4bb1      	ldr	r3, [pc, #708]	; (80010d0 <main+0xc40>)
 8000e0a:	2242      	movs	r2, #66	; 0x42
 8000e0c:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000010;buff_data[11]=0b11111111;buff_data[19]=0b01100000;buff_data[27]=0b01000010;
 8000e0e:	4bb0      	ldr	r3, [pc, #704]	; (80010d0 <main+0xc40>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	70da      	strb	r2, [r3, #3]
 8000e14:	4bae      	ldr	r3, [pc, #696]	; (80010d0 <main+0xc40>)
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	72da      	strb	r2, [r3, #11]
 8000e1a:	4bad      	ldr	r3, [pc, #692]	; (80010d0 <main+0xc40>)
 8000e1c:	2260      	movs	r2, #96	; 0x60
 8000e1e:	74da      	strb	r2, [r3, #19]
 8000e20:	4bab      	ldr	r3, [pc, #684]	; (80010d0 <main+0xc40>)
 8000e22:	2242      	movs	r2, #66	; 0x42
 8000e24:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00011000;buff_data[28]=0b01000010;
 8000e26:	4baa      	ldr	r3, [pc, #680]	; (80010d0 <main+0xc40>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	711a      	strb	r2, [r3, #4]
 8000e2c:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <main+0xc40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	731a      	strb	r2, [r3, #12]
 8000e32:	4ba7      	ldr	r3, [pc, #668]	; (80010d0 <main+0xc40>)
 8000e34:	2218      	movs	r2, #24
 8000e36:	751a      	strb	r2, [r3, #20]
 8000e38:	4ba5      	ldr	r3, [pc, #660]	; (80010d0 <main+0xc40>)
 8000e3a:	2242      	movs	r2, #66	; 0x42
 8000e3c:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000e3e:	4ba4      	ldr	r3, [pc, #656]	; (80010d0 <main+0xc40>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	715a      	strb	r2, [r3, #5]
 8000e44:	4ba2      	ldr	r3, [pc, #648]	; (80010d0 <main+0xc40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	735a      	strb	r2, [r3, #13]
 8000e4a:	4ba1      	ldr	r3, [pc, #644]	; (80010d0 <main+0xc40>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	755a      	strb	r2, [r3, #21]
 8000e50:	4b9f      	ldr	r3, [pc, #636]	; (80010d0 <main+0xc40>)
 8000e52:	2242      	movs	r2, #66	; 0x42
 8000e54:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000e56:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <main+0xc40>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	719a      	strb	r2, [r3, #6]
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <main+0xc40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	739a      	strb	r2, [r3, #14]
 8000e62:	4b9b      	ldr	r3, [pc, #620]	; (80010d0 <main+0xc40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	759a      	strb	r2, [r3, #22]
 8000e68:	4b99      	ldr	r3, [pc, #612]	; (80010d0 <main+0xc40>)
 8000e6a:	227e      	movs	r2, #126	; 0x7e
 8000e6c:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000e6e:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <main+0xc40>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	71da      	strb	r2, [r3, #7]
 8000e74:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <main+0xc40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	73da      	strb	r2, [r3, #15]
 8000e7a:	4b95      	ldr	r3, [pc, #596]	; (80010d0 <main+0xc40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	75da      	strb	r2, [r3, #23]
 8000e80:	4b93      	ldr	r3, [pc, #588]	; (80010d0 <main+0xc40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000e86:	f7ff f9df 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000e8a:	206e      	movs	r0, #110	; 0x6e
 8000e8c:	f7ff f9c6 	bl	800021c <DelayMS>
    buff_data[0]=0b00010000;buff_data[8] =0b00000000;buff_data[16]=0b01100001;buff_data[24]=0b00000000;
 8000e90:	4b8f      	ldr	r3, [pc, #572]	; (80010d0 <main+0xc40>)
 8000e92:	2210      	movs	r2, #16
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <main+0xc40>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	721a      	strb	r2, [r3, #8]
 8000e9c:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <main+0xc40>)
 8000e9e:	2261      	movs	r2, #97	; 0x61
 8000ea0:	741a      	strb	r2, [r3, #16]
 8000ea2:	4b8b      	ldr	r3, [pc, #556]	; (80010d0 <main+0xc40>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000000;buff_data[17]=0b00000000;buff_data[25]=0b01111110;
 8000ea8:	4b89      	ldr	r3, [pc, #548]	; (80010d0 <main+0xc40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	705a      	strb	r2, [r3, #1]
 8000eae:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <main+0xc40>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	725a      	strb	r2, [r3, #9]
 8000eb4:	4b86      	ldr	r3, [pc, #536]	; (80010d0 <main+0xc40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	745a      	strb	r2, [r3, #17]
 8000eba:	4b85      	ldr	r3, [pc, #532]	; (80010d0 <main+0xc40>)
 8000ebc:	227e      	movs	r2, #126	; 0x7e
 8000ebe:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000000;buff_data[18]=0b00000000;buff_data[26]=0b01000010;
 8000ec0:	4b83      	ldr	r3, [pc, #524]	; (80010d0 <main+0xc40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	709a      	strb	r2, [r3, #2]
 8000ec6:	4b82      	ldr	r3, [pc, #520]	; (80010d0 <main+0xc40>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	729a      	strb	r2, [r3, #10]
 8000ecc:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <main+0xc40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	749a      	strb	r2, [r3, #18]
 8000ed2:	4b7f      	ldr	r3, [pc, #508]	; (80010d0 <main+0xc40>)
 8000ed4:	2242      	movs	r2, #66	; 0x42
 8000ed6:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b11111111;buff_data[19]=0b11100000;buff_data[27]=0b01000010;
 8000ed8:	4b7d      	ldr	r3, [pc, #500]	; (80010d0 <main+0xc40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	70da      	strb	r2, [r3, #3]
 8000ede:	4b7c      	ldr	r3, [pc, #496]	; (80010d0 <main+0xc40>)
 8000ee0:	22ff      	movs	r2, #255	; 0xff
 8000ee2:	72da      	strb	r2, [r3, #11]
 8000ee4:	4b7a      	ldr	r3, [pc, #488]	; (80010d0 <main+0xc40>)
 8000ee6:	22e0      	movs	r2, #224	; 0xe0
 8000ee8:	74da      	strb	r2, [r3, #19]
 8000eea:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <main+0xc40>)
 8000eec:	2242      	movs	r2, #66	; 0x42
 8000eee:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00000000;buff_data[20]=0b00011100;buff_data[28]=0b01000010;
 8000ef0:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <main+0xc40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	711a      	strb	r2, [r3, #4]
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <main+0xc40>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	731a      	strb	r2, [r3, #12]
 8000efc:	4b74      	ldr	r3, [pc, #464]	; (80010d0 <main+0xc40>)
 8000efe:	221c      	movs	r2, #28
 8000f00:	751a      	strb	r2, [r3, #20]
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <main+0xc40>)
 8000f04:	2242      	movs	r2, #66	; 0x42
 8000f06:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00000000;buff_data[21]=0b00000000;buff_data[29]=0b01000010;
 8000f08:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <main+0xc40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	715a      	strb	r2, [r3, #5]
 8000f0e:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <main+0xc40>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	735a      	strb	r2, [r3, #13]
 8000f14:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <main+0xc40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	755a      	strb	r2, [r3, #21]
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <main+0xc40>)
 8000f1c:	2242      	movs	r2, #66	; 0x42
 8000f1e:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b00000000;buff_data[22]=0b00000000;buff_data[30]=0b01111110;
 8000f20:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <main+0xc40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	719a      	strb	r2, [r3, #6]
 8000f26:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <main+0xc40>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	739a      	strb	r2, [r3, #14]
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <main+0xc40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	759a      	strb	r2, [r3, #22]
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <main+0xc40>)
 8000f34:	227e      	movs	r2, #126	; 0x7e
 8000f36:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00010000;buff_data[15]=0b00000000;buff_data[23]=0b00000000;buff_data[31]=0b00000000;
 8000f38:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <main+0xc40>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	71da      	strb	r2, [r3, #7]
 8000f3e:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <main+0xc40>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	73da      	strb	r2, [r3, #15]
 8000f44:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <main+0xc40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	75da      	strb	r2, [r3, #23]
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <main+0xc40>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8000f50:	f7ff f97a 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8000f54:	206e      	movs	r0, #110	; 0x6e
 8000f56:	f7ff f961 	bl	800021c <DelayMS>


    buff_data[0]=0b00000000;buff_data[8] =0b00000001;buff_data[16]=0b01100010;buff_data[24]=0b11111111;
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <main+0xc40>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <main+0xc40>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	721a      	strb	r2, [r3, #8]
 8000f66:	4b5a      	ldr	r3, [pc, #360]	; (80010d0 <main+0xc40>)
 8000f68:	2262      	movs	r2, #98	; 0x62
 8000f6a:	741a      	strb	r2, [r3, #16]
 8000f6c:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <main+0xc40>)
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 8000f72:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <main+0xc40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	705a      	strb	r2, [r3, #1]
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <main+0xc40>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	725a      	strb	r2, [r3, #9]
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <main+0xc40>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	745a      	strb	r2, [r3, #17]
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <main+0xc40>)
 8000f86:	2281      	movs	r2, #129	; 0x81
 8000f88:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00010000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 8000f8a:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <main+0xc40>)
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	709a      	strb	r2, [r3, #2]
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <main+0xc40>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	729a      	strb	r2, [r3, #10]
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <main+0xc40>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	749a      	strb	r2, [r3, #18]
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <main+0xc40>)
 8000f9e:	2281      	movs	r2, #129	; 0x81
 8000fa0:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b11100000;buff_data[27]=0b10000001;
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <main+0xc40>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	70da      	strb	r2, [r3, #3]
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <main+0xc40>)
 8000faa:	2208      	movs	r2, #8
 8000fac:	72da      	strb	r2, [r3, #11]
 8000fae:	4b48      	ldr	r3, [pc, #288]	; (80010d0 <main+0xc40>)
 8000fb0:	22e0      	movs	r2, #224	; 0xe0
 8000fb2:	74da      	strb	r2, [r3, #19]
 8000fb4:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <main+0xc40>)
 8000fb6:	2281      	movs	r2, #129	; 0x81
 8000fb8:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00000000;buff_data[12]=0b00010000;buff_data[20]=0b00011110;buff_data[28]=0b10000001;
 8000fba:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <main+0xc40>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	711a      	strb	r2, [r3, #4]
 8000fc0:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <main+0xc40>)
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	731a      	strb	r2, [r3, #12]
 8000fc6:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <main+0xc40>)
 8000fc8:	221e      	movs	r2, #30
 8000fca:	751a      	strb	r2, [r3, #20]
 8000fcc:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <main+0xc40>)
 8000fce:	2281      	movs	r2, #129	; 0x81
 8000fd0:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <main+0xc40>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	715a      	strb	r2, [r3, #5]
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <main+0xc40>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	735a      	strb	r2, [r3, #13]
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <main+0xc40>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	755a      	strb	r2, [r3, #21]
 8000fe4:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <main+0xc40>)
 8000fe6:	2281      	movs	r2, #129	; 0x81
 8000fe8:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <main+0xc40>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	719a      	strb	r2, [r3, #6]
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <main+0xc40>)
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	739a      	strb	r2, [r3, #14]
 8000ff6:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <main+0xc40>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	759a      	strb	r2, [r3, #22]
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <main+0xc40>)
 8000ffe:	2281      	movs	r2, #129	; 0x81
 8001000:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000001;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <main+0xc40>)
 8001004:	2201      	movs	r2, #1
 8001006:	71da      	strb	r2, [r3, #7]
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <main+0xc40>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	73da      	strb	r2, [r3, #15]
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <main+0xc40>)
 8001010:	2200      	movs	r2, #0
 8001012:	75da      	strb	r2, [r3, #23]
 8001014:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <main+0xc40>)
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	77da      	strb	r2, [r3, #31]
    build_buffer();
 800101a:	f7ff f915 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 800101e:	206e      	movs	r0, #110	; 0x6e
 8001020:	f7ff f8fc 	bl	800021c <DelayMS>
    buff_data[0]=0b00000000;buff_data[8] =0b00000001;buff_data[16]=0b01100100;buff_data[24]=0b11111111;
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <main+0xc40>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <main+0xc40>)
 800102c:	2201      	movs	r2, #1
 800102e:	721a      	strb	r2, [r3, #8]
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <main+0xc40>)
 8001032:	2264      	movs	r2, #100	; 0x64
 8001034:	741a      	strb	r2, [r3, #16]
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <main+0xc40>)
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <main+0xc40>)
 800103e:	2200      	movs	r2, #0
 8001040:	705a      	strb	r2, [r3, #1]
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <main+0xc40>)
 8001044:	2202      	movs	r2, #2
 8001046:	725a      	strb	r2, [r3, #9]
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <main+0xc40>)
 800104a:	2200      	movs	r2, #0
 800104c:	745a      	strb	r2, [r3, #17]
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <main+0xc40>)
 8001050:	2281      	movs	r2, #129	; 0x81
 8001052:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <main+0xc40>)
 8001056:	2200      	movs	r2, #0
 8001058:	709a      	strb	r2, [r3, #2]
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <main+0xc40>)
 800105c:	2204      	movs	r2, #4
 800105e:	729a      	strb	r2, [r3, #10]
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <main+0xc40>)
 8001062:	2200      	movs	r2, #0
 8001064:	749a      	strb	r2, [r3, #18]
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <main+0xc40>)
 8001068:	2281      	movs	r2, #129	; 0x81
 800106a:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b11100000;buff_data[27]=0b10000001;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <main+0xc40>)
 800106e:	2200      	movs	r2, #0
 8001070:	70da      	strb	r2, [r3, #3]
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <main+0xc40>)
 8001074:	2208      	movs	r2, #8
 8001076:	72da      	strb	r2, [r3, #11]
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <main+0xc40>)
 800107a:	22e0      	movs	r2, #224	; 0xe0
 800107c:	74da      	strb	r2, [r3, #19]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <main+0xc40>)
 8001080:	2281      	movs	r2, #129	; 0x81
 8001082:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00111000;buff_data[12]=0b00010000;buff_data[20]=0b00011111;buff_data[28]=0b10000001;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <main+0xc40>)
 8001086:	2238      	movs	r2, #56	; 0x38
 8001088:	711a      	strb	r2, [r3, #4]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <main+0xc40>)
 800108c:	2210      	movs	r2, #16
 800108e:	731a      	strb	r2, [r3, #12]
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <main+0xc40>)
 8001092:	221f      	movs	r2, #31
 8001094:	751a      	strb	r2, [r3, #20]
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <main+0xc40>)
 8001098:	2281      	movs	r2, #129	; 0x81
 800109a:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <main+0xc40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	715a      	strb	r2, [r3, #5]
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <main+0xc40>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	735a      	strb	r2, [r3, #13]
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <main+0xc40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	755a      	strb	r2, [r3, #21]
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <main+0xc40>)
 80010b0:	2281      	movs	r2, #129	; 0x81
 80010b2:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <main+0xc40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	719a      	strb	r2, [r3, #6]
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <main+0xc40>)
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	739a      	strb	r2, [r3, #14]
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <main+0xc40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	759a      	strb	r2, [r3, #22]
 80010c6:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <main+0xc40>)
 80010c8:	2281      	movs	r2, #129	; 0x81
 80010ca:	779a      	strb	r2, [r3, #30]
 80010cc:	e002      	b.n	80010d4 <main+0xc44>
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	20000064 	.word	0x20000064
    buff_data[7]=0b10000000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <main+0xe00>)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	71da      	strb	r2, [r3, #7]
 80010da:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <main+0xe00>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	73da      	strb	r2, [r3, #15]
 80010e0:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <main+0xe00>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	75da      	strb	r2, [r3, #23]
 80010e6:	4b6a      	ldr	r3, [pc, #424]	; (8001290 <main+0xe00>)
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80010ec:	f7ff f8ac 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 80010f0:	206e      	movs	r0, #110	; 0x6e
 80010f2:	f7ff f893 	bl	800021c <DelayMS>
    buff_data[0]=0b00110000;buff_data[8] =0b00000001;buff_data[16]=0b01101000;buff_data[24]=0b11111111;
 80010f6:	4b66      	ldr	r3, [pc, #408]	; (8001290 <main+0xe00>)
 80010f8:	2230      	movs	r2, #48	; 0x30
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	4b64      	ldr	r3, [pc, #400]	; (8001290 <main+0xe00>)
 80010fe:	2201      	movs	r2, #1
 8001100:	721a      	strb	r2, [r3, #8]
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <main+0xe00>)
 8001104:	2268      	movs	r2, #104	; 0x68
 8001106:	741a      	strb	r2, [r3, #16]
 8001108:	4b61      	ldr	r3, [pc, #388]	; (8001290 <main+0xe00>)
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00000000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 800110e:	4b60      	ldr	r3, [pc, #384]	; (8001290 <main+0xe00>)
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]
 8001114:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <main+0xe00>)
 8001116:	2202      	movs	r2, #2
 8001118:	725a      	strb	r2, [r3, #9]
 800111a:	4b5d      	ldr	r3, [pc, #372]	; (8001290 <main+0xe00>)
 800111c:	2200      	movs	r2, #0
 800111e:	745a      	strb	r2, [r3, #17]
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <main+0xe00>)
 8001122:	2281      	movs	r2, #129	; 0x81
 8001124:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 8001126:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <main+0xe00>)
 8001128:	2200      	movs	r2, #0
 800112a:	709a      	strb	r2, [r3, #2]
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <main+0xe00>)
 800112e:	2204      	movs	r2, #4
 8001130:	729a      	strb	r2, [r3, #10]
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <main+0xe00>)
 8001134:	2200      	movs	r2, #0
 8001136:	749a      	strb	r2, [r3, #18]
 8001138:	4b55      	ldr	r3, [pc, #340]	; (8001290 <main+0xe00>)
 800113a:	2281      	movs	r2, #129	; 0x81
 800113c:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b01100000;buff_data[27]=0b10000001;
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <main+0xe00>)
 8001140:	2200      	movs	r2, #0
 8001142:	70da      	strb	r2, [r3, #3]
 8001144:	4b52      	ldr	r3, [pc, #328]	; (8001290 <main+0xe00>)
 8001146:	2208      	movs	r2, #8
 8001148:	72da      	strb	r2, [r3, #11]
 800114a:	4b51      	ldr	r3, [pc, #324]	; (8001290 <main+0xe00>)
 800114c:	2260      	movs	r2, #96	; 0x60
 800114e:	74da      	strb	r2, [r3, #19]
 8001150:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <main+0xe00>)
 8001152:	2281      	movs	r2, #129	; 0x81
 8001154:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00110000;buff_data[12]=0b00010000;buff_data[20]=0b00011110;buff_data[28]=0b10000001;
 8001156:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <main+0xe00>)
 8001158:	2230      	movs	r2, #48	; 0x30
 800115a:	711a      	strb	r2, [r3, #4]
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <main+0xe00>)
 800115e:	2210      	movs	r2, #16
 8001160:	731a      	strb	r2, [r3, #12]
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <main+0xe00>)
 8001164:	221e      	movs	r2, #30
 8001166:	751a      	strb	r2, [r3, #20]
 8001168:	4b49      	ldr	r3, [pc, #292]	; (8001290 <main+0xe00>)
 800116a:	2281      	movs	r2, #129	; 0x81
 800116c:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00000000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 800116e:	4b48      	ldr	r3, [pc, #288]	; (8001290 <main+0xe00>)
 8001170:	2200      	movs	r2, #0
 8001172:	715a      	strb	r2, [r3, #5]
 8001174:	4b46      	ldr	r3, [pc, #280]	; (8001290 <main+0xe00>)
 8001176:	2220      	movs	r2, #32
 8001178:	735a      	strb	r2, [r3, #13]
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <main+0xe00>)
 800117c:	2200      	movs	r2, #0
 800117e:	755a      	strb	r2, [r3, #21]
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <main+0xe00>)
 8001182:	2281      	movs	r2, #129	; 0x81
 8001184:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000100;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <main+0xe00>)
 8001188:	2204      	movs	r2, #4
 800118a:	719a      	strb	r2, [r3, #6]
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <main+0xe00>)
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	739a      	strb	r2, [r3, #14]
 8001192:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <main+0xe00>)
 8001194:	2200      	movs	r2, #0
 8001196:	759a      	strb	r2, [r3, #22]
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <main+0xe00>)
 800119a:	2281      	movs	r2, #129	; 0x81
 800119c:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00000000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <main+0xe00>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	71da      	strb	r2, [r3, #7]
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <main+0xe00>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	73da      	strb	r2, [r3, #15]
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <main+0xe00>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	75da      	strb	r2, [r3, #23]
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <main+0xe00>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	77da      	strb	r2, [r3, #31]
    build_buffer();
 80011b6:	f7ff f847 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 80011ba:	206e      	movs	r0, #110	; 0x6e
 80011bc:	f7ff f82e 	bl	800021c <DelayMS>
    buff_data[0]=0b00111000;buff_data[8] =0b00000001;buff_data[16]=0b01110000;buff_data[24]=0b11111111;
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <main+0xe00>)
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <main+0xe00>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	721a      	strb	r2, [r3, #8]
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <main+0xe00>)
 80011ce:	2270      	movs	r2, #112	; 0x70
 80011d0:	741a      	strb	r2, [r3, #16]
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <main+0xe00>)
 80011d4:	22ff      	movs	r2, #255	; 0xff
 80011d6:	761a      	strb	r2, [r3, #24]
    buff_data[1]=0b00001000;buff_data[9] =0b00000010;buff_data[17]=0b00000000;buff_data[25]=0b10000001;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <main+0xe00>)
 80011da:	2208      	movs	r2, #8
 80011dc:	705a      	strb	r2, [r3, #1]
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <main+0xe00>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	725a      	strb	r2, [r3, #9]
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <main+0xe00>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	745a      	strb	r2, [r3, #17]
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <main+0xe00>)
 80011ec:	2281      	movs	r2, #129	; 0x81
 80011ee:	765a      	strb	r2, [r3, #25]
    buff_data[2]=0b00000000;buff_data[10]=0b00000100;buff_data[18]=0b00000000;buff_data[26]=0b10000001;
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <main+0xe00>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	709a      	strb	r2, [r3, #2]
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <main+0xe00>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	729a      	strb	r2, [r3, #10]
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <main+0xe00>)
 80011fe:	2200      	movs	r2, #0
 8001200:	749a      	strb	r2, [r3, #18]
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <main+0xe00>)
 8001204:	2281      	movs	r2, #129	; 0x81
 8001206:	769a      	strb	r2, [r3, #26]
    buff_data[3]=0b00000000;buff_data[11]=0b00001000;buff_data[19]=0b00100000;buff_data[27]=0b10000001;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <main+0xe00>)
 800120a:	2200      	movs	r2, #0
 800120c:	70da      	strb	r2, [r3, #3]
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <main+0xe00>)
 8001210:	2208      	movs	r2, #8
 8001212:	72da      	strb	r2, [r3, #11]
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <main+0xe00>)
 8001216:	2220      	movs	r2, #32
 8001218:	74da      	strb	r2, [r3, #19]
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <main+0xe00>)
 800121c:	2281      	movs	r2, #129	; 0x81
 800121e:	76da      	strb	r2, [r3, #27]
    buff_data[4]=0b00011000;buff_data[12]=0b00010000;buff_data[20]=0b00011100;buff_data[28]=0b10000001;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <main+0xe00>)
 8001222:	2218      	movs	r2, #24
 8001224:	711a      	strb	r2, [r3, #4]
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <main+0xe00>)
 8001228:	2210      	movs	r2, #16
 800122a:	731a      	strb	r2, [r3, #12]
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <main+0xe00>)
 800122e:	221c      	movs	r2, #28
 8001230:	751a      	strb	r2, [r3, #20]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <main+0xe00>)
 8001234:	2281      	movs	r2, #129	; 0x81
 8001236:	771a      	strb	r2, [r3, #28]
    buff_data[5]=0b00001000;buff_data[13]=0b00100000;buff_data[21]=0b00000000;buff_data[29]=0b10000001;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <main+0xe00>)
 800123a:	2208      	movs	r2, #8
 800123c:	715a      	strb	r2, [r3, #5]
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <main+0xe00>)
 8001240:	2220      	movs	r2, #32
 8001242:	735a      	strb	r2, [r3, #13]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <main+0xe00>)
 8001246:	2200      	movs	r2, #0
 8001248:	755a      	strb	r2, [r3, #21]
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <main+0xe00>)
 800124c:	2281      	movs	r2, #129	; 0x81
 800124e:	775a      	strb	r2, [r3, #29]
    buff_data[6]=0b00000000;buff_data[14]=0b01000000;buff_data[22]=0b00000000;buff_data[30]=0b10000001;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <main+0xe00>)
 8001252:	2200      	movs	r2, #0
 8001254:	719a      	strb	r2, [r3, #6]
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <main+0xe00>)
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	739a      	strb	r2, [r3, #14]
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <main+0xe00>)
 800125e:	2200      	movs	r2, #0
 8001260:	759a      	strb	r2, [r3, #22]
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <main+0xe00>)
 8001264:	2281      	movs	r2, #129	; 0x81
 8001266:	779a      	strb	r2, [r3, #30]
    buff_data[7]=0b00010000;buff_data[15]=0b10000000;buff_data[23]=0b00000000;buff_data[31]=0b11111111;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <main+0xe00>)
 800126a:	2210      	movs	r2, #16
 800126c:	71da      	strb	r2, [r3, #7]
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <main+0xe00>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	73da      	strb	r2, [r3, #15]
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <main+0xe00>)
 8001276:	2200      	movs	r2, #0
 8001278:	75da      	strb	r2, [r3, #23]
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <main+0xe00>)
 800127c:	22ff      	movs	r2, #255	; 0xff
 800127e:	77da      	strb	r2, [r3, #31]
    build_buffer();
 8001280:	f7fe ffe2 	bl	8000248 <build_buffer>
    DelayMS(ANIMDELAY);
 8001284:	206e      	movs	r0, #110	; 0x6e
 8001286:	f7fe ffc9 	bl	800021c <DelayMS>
    buff_data[0]=0b00100000;buff_data[8] =0b00010000;buff_data[16]=0b00000001;buff_data[24]=0b00000000;
 800128a:	f7ff f986 	bl	800059a <main+0x10a>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	20000064 	.word	0x20000064

08001294 <sysclock_config>:
 *      Author: varun
 */
#include "stm32g0xx.h"
#include "system_stm32g0xx.h"

void sysclock_config(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	//select voltage scaling range 1 for high frequency operation.
	PWR->CR1  |= 1<<9;
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <sysclock_config+0xa0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <sysclock_config+0xa0>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0089      	lsls	r1, r1, #2
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

	//enable flash prefetch buffer.
	FLASH->ACR   |=  (1<<8);
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <sysclock_config+0xa4>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <sysclock_config+0xa4>)
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0049      	lsls	r1, r1, #1
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

	//enable 2 flash wait states for F <= 64Mhz
	FLASH->ACR &= ~( FLASH_ACR_LATENCY );
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <sysclock_config+0xa4>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <sysclock_config+0xa4>)
 80012ba:	2107      	movs	r1, #7
 80012bc:	438a      	bics	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
	FLASH->ACR |=  ( 2 << FLASH_ACR_LATENCY_Pos );
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <sysclock_config+0xa4>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <sysclock_config+0xa4>)
 80012c6:	2102      	movs	r1, #2
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

	//Set the prescalers for 64Mhz
	RCC->PLLCFGR &= ~( RCC_PLLCFGR_PLLR |
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <sysclock_config+0xa8>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <sysclock_config+0xa8>)
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <sysclock_config+0xac>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]
	                   RCC_PLLCFGR_PLLREN |
	                   RCC_PLLCFGR_PLLN |
	                   RCC_PLLCFGR_PLLM |
	                   RCC_PLLCFGR_PLLSRC );
	RCC->PLLCFGR |=  ( 1 << RCC_PLLCFGR_PLLR_Pos |
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <sysclock_config+0xa8>)
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <sysclock_config+0xa8>)
 80012de:	4919      	ldr	r1, [pc, #100]	; (8001344 <sysclock_config+0xb0>)
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
	                   8 << RCC_PLLCFGR_PLLN_Pos |
	                   RCC_PLLCFGR_PLLREN |
	                   2 << RCC_PLLCFGR_PLLSRC_Pos );
	RCC->CR   |= RCC_CR_PLLON;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <sysclock_config+0xa8>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <sysclock_config+0xa8>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0449      	lsls	r1, r1, #17
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
	while ( !( RCC->CR & RCC_CR_PLLRDY ) ) {};
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <sysclock_config+0xa8>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	049b      	lsls	r3, r3, #18
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f9      	beq.n	80012f4 <sysclock_config+0x60>
	RCC->CFGR &= ~( RCC_CFGR_SW );
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <sysclock_config+0xa8>)
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <sysclock_config+0xa8>)
 8001306:	2107      	movs	r1, #7
 8001308:	438a      	bics	r2, r1
 800130a:	609a      	str	r2, [r3, #8]
	RCC->CFGR |=  ( 2 << RCC_CFGR_SW_Pos );
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <sysclock_config+0xa8>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <sysclock_config+0xa8>)
 8001312:	2102      	movs	r1, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	609a      	str	r2, [r3, #8]
	while ( ( RCC->CFGR & RCC_CFGR_SWS ) >> RCC_CFGR_SWS_Pos != 2 ) {};
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <sysclock_config+0xa8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	2207      	movs	r2, #7
 8001322:	4013      	ands	r3, r2
 8001324:	2b02      	cmp	r3, #2
 8001326:	d1f8      	bne.n	800131a <sysclock_config+0x86>

	//System clock is now 64Mhz
	SystemCoreClock = 64000000;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <sysclock_config+0xb4>)
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <sysclock_config+0xb8>)
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40007000 	.word	0x40007000
 8001338:	40022000 	.word	0x40022000
 800133c:	40021000 	.word	0x40021000
 8001340:	0fff808c 	.word	0x0fff808c
 8001344:	30000802 	.word	0x30000802
 8001348:	20000000 	.word	0x20000000
 800134c:	03d09000 	.word	0x03d09000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	 tick++;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <SysTick_Handler+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	4b02      	ldr	r3, [pc, #8]	; (8001388 <SysTick_Handler+0x14>)
 8001380:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000020 	.word	0x20000020

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <SystemInit+0x14>)
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0512      	lsls	r2, r2, #20
 8001396:	609a      	str	r2, [r3, #8]
#endif
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b7f      	cmp	r3, #127	; 0x7f
 80013b8:	d828      	bhi.n	800140c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <__NVIC_SetPriority+0xd4>)
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	33c0      	adds	r3, #192	; 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	589b      	ldr	r3, [r3, r2]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	; 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	481f      	ldr	r0, [pc, #124]	; (8001478 <__NVIC_SetPriority+0xd4>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	430a      	orrs	r2, r1
 8001404:	33c0      	adds	r3, #192	; 0xc0
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140a:	e031      	b.n	8001470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <__NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0019      	movs	r1, r3
 8001414:	230f      	movs	r3, #15
 8001416:	400b      	ands	r3, r1
 8001418:	3b08      	subs	r3, #8
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3306      	adds	r3, #6
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	; 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <__NVIC_SetPriority+0xd8>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	001c      	movs	r4, r3
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	3b08      	subs	r3, #8
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	430a      	orrs	r2, r1
 8001466:	3306      	adds	r3, #6
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	18c3      	adds	r3, r0, r3
 800146c:	3304      	adds	r3, #4
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b003      	add	sp, #12
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <SysTick_Config+0x40>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e010      	b.n	80014b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SysTick_Config+0x44>)
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	3a01      	subs	r2, #1
 800149c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	2301      	movs	r3, #1
 80014a0:	425b      	negs	r3, r3
 80014a2:	2103      	movs	r1, #3
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff7d 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SysTick_Config+0x44>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x44>)
 80014b2:	2207      	movs	r2, #7
 80014b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	00ffffff 	.word	0x00ffffff
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <systick_enable>:
#include "core_cm0plus.h"
#include "system_stm32g0xx.h"

volatile uint32_t tick=0;

void systick_enable() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	uint32_t ticks=(SystemCoreClock/1000UL)-1UL;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <systick_enable+0x2c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	23fa      	movs	r3, #250	; 0xfa
 80014d4:	0099      	lsls	r1, r3, #2
 80014d6:	0010      	movs	r0, r2
 80014d8:	f7fe fe14 	bl	8000104 <__udivsi3>
 80014dc:	0003      	movs	r3, r0
 80014de:	3b01      	subs	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
	SysTick_Config(ticks);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ffcb 	bl	8001480 <SysTick_Config>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000000 	.word	0x20000000

080014f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopForever+0xa>)
  ldr r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopForever+0xe>)
  adds r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopForever+0x12>)
  b LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  str  r3, [r2]
 8001518:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151a:	3204      	adds	r2, #4

0800151c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopForever+0x16>)
  cmp r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001522:	f7ff ff33 	bl	800138c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001526:	f000 f811 	bl	800154c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7fe ffb1 	bl	8000490 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   r0, =_estack
 8001530:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001534:	080015b4 	.word	0x080015b4
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800153c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001540:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001544:	20000084 	.word	0x20000084

08001548 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_COMP_IRQHandler>
	...

0800154c <__libc_init_array>:
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	2600      	movs	r6, #0
 8001550:	4d0c      	ldr	r5, [pc, #48]	; (8001584 <__libc_init_array+0x38>)
 8001552:	4c0d      	ldr	r4, [pc, #52]	; (8001588 <__libc_init_array+0x3c>)
 8001554:	1b64      	subs	r4, r4, r5
 8001556:	10a4      	asrs	r4, r4, #2
 8001558:	42a6      	cmp	r6, r4
 800155a:	d109      	bne.n	8001570 <__libc_init_array+0x24>
 800155c:	2600      	movs	r6, #0
 800155e:	f000 f819 	bl	8001594 <_init>
 8001562:	4d0a      	ldr	r5, [pc, #40]	; (800158c <__libc_init_array+0x40>)
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <__libc_init_array+0x44>)
 8001566:	1b64      	subs	r4, r4, r5
 8001568:	10a4      	asrs	r4, r4, #2
 800156a:	42a6      	cmp	r6, r4
 800156c:	d105      	bne.n	800157a <__libc_init_array+0x2e>
 800156e:	bd70      	pop	{r4, r5, r6, pc}
 8001570:	00b3      	lsls	r3, r6, #2
 8001572:	58eb      	ldr	r3, [r5, r3]
 8001574:	4798      	blx	r3
 8001576:	3601      	adds	r6, #1
 8001578:	e7ee      	b.n	8001558 <__libc_init_array+0xc>
 800157a:	00b3      	lsls	r3, r6, #2
 800157c:	58eb      	ldr	r3, [r5, r3]
 800157e:	4798      	blx	r3
 8001580:	3601      	adds	r6, #1
 8001582:	e7f2      	b.n	800156a <__libc_init_array+0x1e>
 8001584:	080015ac 	.word	0x080015ac
 8001588:	080015ac 	.word	0x080015ac
 800158c:	080015ac 	.word	0x080015ac
 8001590:	080015b0 	.word	0x080015b0

08001594 <_init>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159a:	bc08      	pop	{r3}
 800159c:	469e      	mov	lr, r3
 800159e:	4770      	bx	lr

080015a0 <_fini>:
 80015a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a6:	bc08      	pop	{r3}
 80015a8:	469e      	mov	lr, r3
 80015aa:	4770      	bx	lr
